计算机系统不同于一般的电子设备，它是一个由硬件、软件组成的复杂的自动化设备。本章先说明计算机的分类，然后采用自上而下的方法，简要地介绍硬件、软件的概念和组成，目的在于使读者先有一个粗略的总体概念，以便于展开后续各章内容。电子计算机从总体上来说分为两大类。一类是电子模拟计算机。“模拟”就是相似的意思，例如计算尺是用长度来标示数值；时钟是用指针在表盘上转动来表示时间；电表是用角度来反映电量大小，这些都是模拟计算装置。模拟计算机的特点是数值由连续量来表示，运算过程也是连续的。另一类是电子数字计算机，它是在算盘的基础上发展起来的，是用数字来表示数量的大小。数字计算机的主要特点是按位运算，并且不连续地跳动计算。表列出了电子数字计算机与电子模拟计算机的主要区别。电子模拟计算机由于精度和解题能力都有限，所以应用范围较小。电子数字计算机则与电子模拟计算机不同，它是以近似于人类的“思维过程”来进行工作的，所以有人把它叫做电脑。它的发明和发展是世纪人类最伟大的科学技术成就之一，也是现代科学技术发展水平的主要标志。习惯上所称的电子计算机，一般是指现在广泛应用的电子数字计算机。电子数字计算机进一步又可分为专用计算机和通用计算机。专用和通用是根据计算机的效率、速度、价格、运行的经济性和适应性来划分的。专用计算机是最有效、最经济和最快速的计算机，但是它的适应性很差。通用计算机适应性很强，但是牺牲了效率、速度和经济性。通用计算机可分为超级计算机、大型机、服务器、PC机、单片机和多核机六类，它们的区别在于体积、简易性、功率损耗、性能指标、数据存储容量、指令系统规模和机器价格，见图。一般来说，超级计算机主要用于科学计算，其运算速度在每秒万亿次以上，数据存储容量很大，结构复杂，价格昂贵。而单片机是只用一片集成电路做成的计算机，体积小，结构简单，性能指标较低，价格便宜。介于超级计算机和多核机之间的是大型机、服务器、PC机和单片机，它们的结构规模和性能指标依次递减。但随着巨大规模集成电路的迅速发展，单片机、多核机等彼此之间的概念也在发生变化，因为今天的单片机可能就是明天的多核机。专用计算机是针对某一任务设计的计算机，一般来说，其结构要比通用计算机简单。目前已经出现了多种型号的单片专用机及嵌入式单片机，用于测试或控制，成为计算机应用领域中最热门的产品。多核机是多于一个处理器的计算机芯片，具有更强的能力。世界上第一台电子数字计算机是年在美国宾夕法尼亚大学制成的。这台机器用了多个电子管，占地m，重量达吨，而运算速度只有次秒。用今天的眼光来看，这台计算机耗费既大又不完善，但却是科学史上一次划时代的创新，它奠定了电子计算机的基础。自从这台计算机问世多年来，从使用器件的角度来说，计算机的发展大致经历了五代的变化。第一代为年，电子管计算机。计算机运算速度为每秒几千次至几万次，体积庞大，成本很高，可靠性较低。在此期间，形成了计算机的基本体系，确定了程序设计的基本方法，数据处理机开始得到应用。第二代为年，晶体管计算机。运算速度提高到每秒几万次至几十万次，可靠性提高，体积缩小，成本降低。在此期间，工业控制机开始得到应用。第三代为年，中小规模集成电路计算机。可靠性进一步提高，体积进一步缩小，成本进一步下降，运算速度提高到每秒几十万次至几百万次。在此期间形成机种多样化，生产系列化，使用系统化，小型计算机开始出现。第四代为年，大规模和超大规模集成电路计算机。可靠性更进一步提高，体积更进一步缩小，成本更进一步降低，速度提高到每秒万次至亿次。由几片大规模集成电路组成的微型计算机开始出现。第五代为年开始的巨大规模集成电路计算机。运算速度提高到每秒亿次。由一片巨大规模集成电路实现的单片计算机开始出现。总之，从年计算机诞生以来，大约每隔五年运算速度提高倍，可靠性提高倍，成本降低为，体积缩小为。而世纪年代以来，计算机的生产数量每年以的速度递增。计算机从第三代起，与集成电路技术的发展密切相关。LSI的采用，一块集成电路芯片上可以放置个元件，VLSI达到每个芯片万个元件，现在的ULSI芯片超过了万个元件。年摩尔观察到芯片上的晶体管数量每年翻一番，年这种态势减慢成每个月翻一番，这就是人们所称的摩尔定律。在国际超级计算机强排序中，中国年“曙光A”位居第；年“星云号”位居第；年“天河号”位居第，运算速度达万亿次秒。世纪年代，所有计算机存储器都是由微小的铁磁体环磁芯做成，每个磁芯直径约mm。这些小磁芯处在计算机内用三条细导线穿过网格板上。每个磁芯的一种磁化方向代表一个，另一个磁化方向则代表一个。磁芯存储器速度相当快，读存储器中的一位只需微秒。但是磁芯存储器价格昂贵，体积大，而且读出是破坏性的，因此必须有读出后立即重写数据的电路。更重要的在于工艺复杂，甚至手工制作。年，仙童半导体公司生产出了第一个较大容量半导体存储器。一个相当于单个磁芯大小的芯片，包含了位的存储器。这种芯片是非破坏性的，而且读写速度比磁芯快得多，读出一位只要纳秒，但是其价格比磁芯要贵。年每位半导体存储器的价格低于磁芯。这以后，存储器的价格持续快速下跌，但存储密度却不断增加。这导致了新的机器比它之前的机器更小、更快、存储容量更大，价格更便宜。存储器技术的发展，与处理器技术的发展一起，在不到年的时间里改变了计算机的生命力。虽然庞大昂贵的计算机仍然存在，但计算机已经走向了个人电脑时代。从年起，半导体存储器经历了代：单个芯片KB、KB、KB、KB、KB、MB、MB、MB、MB、MB和现在的GB。其中K，M，G。每一代比前一代存储密度提高倍，而每位价格和存取时间都在下降。与存储器芯片一样，处理器芯片的单元密度也在不断增加。随着时间的推移，每块芯片上的单元个数越来越多，因此构建一个计算机处理器所需的芯片越来越少。表列出了Intel公司微处理器的演化。年Intel公司开发出Intel。这是第一个将CPU的所有元件都放入同一块芯片内的产品，于是，微处理器诞生了。第章计算机系统概论Intel能完成两个位数相加，通过重复相加能完成乘法。按今天的标准，虽然过于简单，但是它却成为微处理器的能力和功能不断发展的奠基者。微处理器演变中的另一个主要进步是年出现的Intel，这是第一个位微处理器，它比复杂一倍。年出现了Intel。这是第一个通用微处理器，而和是为特殊用途而设计的。是为通用微机而设计的中央处理器。它与一样，都是位微处理器，但更快，有更丰富的指令系统和更强的寻址能力。大约在同时，位微机被开发出来。但是直到世纪年代末才出现强大的通用位微处理器，Intel便是其中之一。这一发展趋势中的另一阶段是在年，贝尔实验室和HP公司开发出了位单片微处理器。Intel于年推出了位微处理器Intel。吞吐量表征一台计算机在某一时间间隔内能够处理的信息量。响应时间表征从输入有效到系统产生响应之间的时间度量，用时间单位来度量。利用率在给定的时间间隔内系统被实际使用的时间所占的比率，用百分比表示。处理机字长指处理机运算器中一次能够完成二进制数运算的位数，如位、位。总线宽度一般指CPU中运算器与存储器之间进行互连的内部总线二进制位数。存储器容量存储器中所有存储单元的总数目，通常用KB、MB、GB、TB来表示。存储器带宽单位时间内从存储器读出的二进制数信息量，一般用字节数秒表示。主频时钟周期CPU的工作节拍受主时钟控制，主时钟不断产生固定频率的时钟，主时钟的频率f叫CPU的主频。度量单位是MHz兆赫兹、GHz吉赫兹。主频的倒数称为CPU时钟周期T，Tf，度量单位是s、ns。CPU执行时间表示CPU执行一般程序所占用的CPU时间，可用下式计算：CPU执行时间CPU时钟周期数CPU时钟周期CPl表示每条指令周期数，即执行一条指令所需的平均时钟周期数。用下式计算：CPI执行某段程序所需的CPU时钟周期数程序包含的指令条数MIPSMillionInstructionsPerSecond的缩写，表示平均每秒执行多少百万条定点指令数，用下式计算：MIPS指令数程序执行时间FLOPSFloatingpointOperationsPerSecond的缩写，表示每秒执行浮点操作的次数，用来衡量机器浮点操作的性能。用下式计算：FLOPS程序中的浮点操作次数程序执行时间s要了解数字计算机的主要组成和工作原理，可从打算盘说起。假设给一个算盘、一张带横格的纸和一支笔，要求计算yaxbc这样一个题目。为了和下面讲到的内容做比较，不妨按以下方法把使用算盘进行解题的过程步骤事先用笔详细地记录在带横格的纸上。首先，将横格纸编上序号，每一行占一个序号，如n，如表所示。其次，把计算式中给定的四个数a、b、c和x分别写到横格纸的第、、、行上，每一行只写一个数。接着详细列出给定题目的解题步骤，而解题步骤也需要记在横格纸上，每一步也只写一行。第一步写到横格纸的第行，第二步写到第行，以此类推。在完成yaxbc的计算过程中，用到了什么东西呢首先，用到了带横格且编有序号的纸，把原始的数据及解题步骤记录在纸上，即纸“存储”了算题的原始信息。其次，用到了算盘，它用来对数据进行加、减、乘、除等算术运算。再次，用到了笔，利用笔把原始数据和解题步骤记录到纸上，还可把计算结果写出来告诉人。最后，用到了我们人本身，这主要是人的脑和手。在人的控制下，按照解题步骤一步一步进行操作，直到完成全部运算。电子数字计算机进行解题的过程完全和人用算盘解题的情况相似，也必须有运算工具，解题步骤和原始数据的输入与存储，运算结果的输出及整个计算过程的调度控制。和打算盘不同的是，以上这些部分都是由电子线路和其他设备自动进行的。在电子计算机里，相当于算盘功能的部件，我们称之为运算器；相当于纸那样具有“记忆”功能的部件，我们称之为存储器；相当于笔那样把原始解题信息送到计算机或把运算结果显示出来的设备，我们称之为输入设备或输出设备；而相当于人的大脑，能够自动控制整个计算过程的，称之为控制器。图所示为数字计算机的主要组成结构，其中双线及箭头表示数据代码传送通路。运算器就好像是一个由电子线路构成的算盘，图是它的示意图。它的主要功能是进行加、减、乘、除等算术运算。除此以外，还可以进行逻辑运算，因此通常称为ALU算术逻辑运算部件。人们习惯于十进制数的运算，但是考虑到电子器件的特性，计算机中通常采用二进制数。二进制数是以为基数来计数，也就是“逢二进一”。在二进制数中，只有和两个数字。和可以用电压的高低、脉冲的有无来表示。这种电压的高低，脉冲的有无，在电子器件中很容易实现，而且设备也最省。二进制数的运算规律非常简单。例如，加法：，，，，最后一个加式中等号右边的“”表示向上一位的进位。又如，乘法：，，，。正是由于二进制数运算规律简单，在电子器件中比较容易实现，因此，在电子数字计算机中广泛采用二进制数。二进制数和十进制数一样，在运算中，当数的位数越多时，计算的精度就越高。理论上讲，数的位数可以任意多。但是位数越多，所需的电子器件也越多，因此计算机的运算器长度一般是位、位、位、位。存储器的功能是保存或“记忆”解题的原始数据和解题步骤。为此，在运算前需要把参加运算的数据和解题步骤通过输入设备送到存储器中保存起来。注意，不论是数据，还是解题步骤，在存放到存储器以前，它们全已变成或表示的二进制代码。因此，存储器存储的也全是或表示的二进制代码。那么大量的、代码在存储器中如何保存呢目前采用半导体器件来担当此任务。我们知道，一个半导体触发器由于有和两个状态，可以记忆一个二进制代码。一个数假定用位二进制代码来表示，那么就需要有个触发器来保存这些代码。通常，在存储器中把保存一个数的个触发器称为一个存储单元。存储器是由许多存储单元组成的。每个存储单元都有编号，称为地址。向存储器中存数或者从存储器中取数，都要按给定的地址来寻找所选的存储单元，这相当于上面所讲的横格纸每一行存放一个数一样。图所示为存储器的结构示意图。存储器所有存储单元的总数称为存储器的存储容量，通常用单位KB、MB来表示，如KB、MB。存储容量越大，表示计算机记忆储存的信息越多。半导体存储器的存储容量毕竟有限，因此计算机中又配备了存储容量更大的磁盘存储器和光盘存储器，称为外存储器。相对而言，半导体存储器称为内存储器，简称内存。控制器是计算机中发号施令的部件，它控制计算机的各部件有条不紊地进行工作。更具体地讲，控制器的任务是从内存中取出解题步骤加以分析，然后执行某种操作。运算器只能完成加、减、乘、除四则运算及其他一些辅助操作。对于比较复杂的计算题目，计算机在运算前必须化成一步一步简单的加、减、乘、除等基本操作来做。每一个基本操作就叫做一条指令，而解算某一问题的一串指令序列，叫做该问题的计算程序，简称为程序。例如，在前述求解yaxbc的例子中，我们在横格纸上列出了它的解题步骤。解题步骤的每一步，只完成一种基本操作，所以就是一条指令，而整个解题步骤就是一个简单的计算程序。正如我们在横格纸上按行的序号记下解题步骤一样，计算机中为了顺利运算，也必须事先把程序和数据按地址安排到存储器里去。注意，程序中的指令通常按顺序执行，所以这些指令是顺次放在存储器里。这就相当于我们把表所示的横格纸的内容原封不动地搬到存储器，因而所编的程序如表所示。由表可知，每条指令应当明确告诉控制器，从存储器的哪个单元取数，并进行何种操作。这样可知指令的内容由两部分组成，即操作的性质和操作数的地址。前者称为操作码，后者称为地址码。因而上述指令的形式如下：操作码地址码其中操作码指出指令所进行的操作，如加、减、乘、除、取数、存数等；而地址码表示参加运算的数据应从存储器的哪个单元中取来，或运算的结果应该存到哪个单元中去。指令的操作码和地址码用二进制代码来表示，其中地址码部分和数据一样，是二进制数的数码，而操作码部分则是二进制代码的编码。假定只有种基本指令，那么这种指令的操作码可用位二进制代码来定义，如表所示。这样一来，表中指令的操作码部分就可以变成二进制代码。假如把地址码部分和数据也换成二进制数，那么整个存储器的内容全部变成了二进制的代码或数码，如图所示。由图可知，指令数码化以后，就可以和数据一样放入存储器。存储器的任何位置既可以存放数据也可以存放指令，不过一般是将指令和数据分开存放。将解题的程序指令序列存放到存储器中称为存储程序，而控制器依据存储的程序来控制全机协调地完成计算任务叫做程序控制。存储程序并按地址顺序执行，这就是冯诺依曼型计算机的设计思想，也是机器自动化工作的关键。由于指令和数据放在同一个存储器，称为冯诺依曼结构；如果指令和数据分别放在两个存储器，称为哈佛结构。显然后者结构的计算机速度更快。一台计算机通常有几十种基本指令，从而构成了该计算机的指令系统。指令系统不仅是硬件设计的依据，而且是软件设计的基础。因此，指令系统是衡量计算机性能的一个重要标志。由表可知，计算机进行计算时，指令必须是按一定的顺序一条接一条地进行。控制器的基本任务，就是按照计算程序所排的指令序列，先从存储器取出一条指令放到控制器中，对该指令的操作码由译码器进行分析判别，然后根据指令性质，执行这条指令，进行相应的操作。接着从存储器取出第二条指令，再执行这第二条指令。以此类推。通常把取指令的一段时间叫做取指周期，而把执行指令的一段时间叫做执行周期。因此，控制器反复交替地处在取指周期与执行周期之中，如图所示。每取出一条指令，控制器中的指令计数器就加，从而为取下一条指令做好准备，这也就是指令在存储器中顺序存放的原因。在计算机系统中，运算器和控制器通常被组合在一个集成电路芯片中，合称为中央处理器（中央处理机），简称处理器，英文缩写为CPU。由于计算机仅使用和两个二进制数字，所以使用“位”bit作为数字计算机的最小信息单位。当CPU向存储器送入或从存储器取出信息时，不能存取单个的“位”，而用B字节和W字等较大的信息单位来工作。一个“字节”由位二进制信息组成，而一个“字”则至少由一个以上的字节组成。通常把组成一个字的二进制位数叫做字长。例如，微型机的字长可以是位，也可以达到位。由于计算机使用的信息既有指令又有数据，所以计算机字既可以代表指令，也可以代表数据。如果某字代表要处理的数据，则称为数据字；如果某字为一条指令，则称为指令字。我们已经看到，指令和数据统统放在内存中，从形式上看，它们都是二进制数码，似乎很难分清哪些是指令字，哪些是数据字。然而控制器完全可以区分开哪些是指令字，哪些是数据字。一般来讲，取指周期中从内存读出的信息流是指令流，它流向控制器；而在执行周期中从内存读出的信息流是数据流，它由内存流向运算器。例如，图中从地址号单元读出的信息流是指令流，而从地址号单元读出的信息流是数据流。显然，某些指令进行过程中需要两次访问内存，一次是取指令，另一次是取数据，如表中取数、乘法、加法、减法、存数指令就是如此。理想的计算机输入设备应该是“会看”和“会听”，即能够把人们用文字或语言所表达的问题直接送到计算机内部进行处理，但是现在这种理想的输入设备还未大规模投入应用。目前常用的输入设备是键盘、鼠标、数字扫描仪及模数转换器等。它们的作用是把人们所熟悉的某种信息形式变换为机器内部所能接收和识别的二进制信息形式。输出设备的作用是把计算机处理的结果变换为人或其他机器设备所能接收和识别的信息形式。理想的输出设备应该是“会写”和“会讲”。“会写”已经做到，如目前广为使用的激光印字机、绘图仪、CRT显示器等。这些设备不仅能输出文字符号，而且还能画图作曲线。至于“会讲”即输出语言的设备，目前也有高级产品问世。计算机的输入输出设备通常称为外围设备。这些外围设备有高速的也有低速的，有机电结构的，也有全电子式的。由于种类繁多且速度各异，因而它们不是直接与高速工作的主机相连接，而是通过适配器部件与主机相联系。适配器的作用相当于一个转换器。它可以保证外围设备用计算机系统特性所要求的形式发送或接收信息。一个典型的计算机系统具有各种类型的外围设备，因而有各种类型的适配器，它使得被连接的外围设备通过系统总线与主机进行联系，以便使主机和外围设备并行协调地工作。除了上述各部件外，计算机系统中还必须有总线。系统总线是构成计算机系统的骨架，是多个系统部件之间进行数据传送的公共通路。借助系统总线，计算机在各系统部件之间实现传送地址、数据和控制信息的操作。以上是我们对一台计算机硬件组成的概貌了解，其目的在于使读者对计算机的整体先有一个粗略的印象，为后面讲授各章提供一些方便。上面说过，现代电子计算机是由运算器、存储器、控制器、适配器、总线和输入输出设备组成的。这些部件或设备都是由元器件构成的有形物体，因而称为硬件或硬设备。我们知道，使用算盘进行运算时，要按运算法则和计算步骤，利用珠算口诀来进行。如果只有算盘，没有运算法则和计算步骤，就不能用算盘来计算。电子计算机更是如此。如果只有上述硬件，计算机并不能进行运算，它仍然是一个“死”东西。那么计算机靠什么东西才能变“活”，从而高速自动地完成各种运算呢这就是前面讲过的计算程序。因为它是无形的东西，所以称为软件或软设备。比方说，用算盘进行运算，算盘本身就是硬件，而运算法则和解题步骤等就是软件。事实上，利用电子计算机进行计算、控制或做其他工作时，需要有各种用途的程序。因此，凡是用于一台计算机的各种程序，统称为这台计算机的程序或软件系统。计算机软件一般分为两大类：一类叫系统程序，一类叫应用程序。系统程序用来简化程序设计，简化使用方法，提高计算机的使用效率，发挥和扩大计算机的功能及用途。它包括以下四类：各种服务性程序，如诊断程序、排错程序、练习程序等；语言程序，如汇编程序、编译程序、解释程序等；操作系统；数据库管理系统。应用程序是用户利用计算机来解决某些问题而编制的程序，如工程设计程序、数据处理程序、自动控制程序、企业管理程序、情报检索程序、科学计算程序等。随着计算机的广泛应用，这类程序的种类越来越多。如同硬件一样，计算机软件也是在不断发展的。下面以系统程序为例，简要说明软件的发展演变过程。在早期的计算机中，人们是直接用机器语言即机器指令代码来编写程序的，这种方式编写的程序称为手编程序。这种用机器语言书写的程序，计算机完全可以“识别”并能执行，所以又叫做目的程序。但直接用机器语言编写程序是一件很烦琐的工作，需要耗费大量的人力和时间，而且又容易出错，出错后寻找错误也相当费事。这些情况大大限制了计算机的使用。后来，为了编写程序方便和提高机器的使用效率，人们想了一种办法，用一些约定的文字、符号和数字按规定的格式来表示各种不同的指令，然后再用这些特殊符号表示的指令来编写程序。这就是所谓的汇编语言，它是一种能被转化为二进制文件的符号语言。对人来讲，符号语言简单直观、便于记忆，比二进制数表示的机器语言方便了许多。但计算机只“认识”机器语言而不认识这些文字、数字、符号，为此人们创造了一种程序，叫汇编器。如同英汉之间对话需要“翻译”一样，汇编器的作用相当于一个“翻译员”。借助于汇编器，计算机本身可以自动地把符号语言表示的程序称为汇编语言程序翻译成用机器语言表示的目的程序，从而实现了程序设计工作的部分自动化。使用符号语言编程序比用机器语言编程序是进了一步，但符号语言还是一种最初级的语言，和数学语言的差异很大，并且仍然面向一台具体的机器。由于不同的计算机其指令系统也不同，所以人们使用计算机时必须先花很多时间熟悉这台机器的指令系统，然后再用它的符号语言来编写程序，因此还是很不方便，节省的人力时间也有限。为了进一步实现程序自动化和便于程序交流，使不熟悉具体计算机的人也能很方便地使用计算机，人们又创造了各种接近于数学语言的算法语言。所谓算法语言，是指按实际需要规定好的一套基本符号及由这套基本符号构成程序的规则。算法语言比较接近数学语言，它直观通用，与具体机器无关，只要稍加学习就能掌握，便于推广使用计算机。有影响的算法语言有BASIC、FORTRAN、C、C、Java等。用算法语言编写的程序称为源程序。但是，这种源程序如同汇编语言程序一样，是不能由机器直接识别和执行的，也必须给计算机配备一个既懂算法语言又懂机器语言的“翻译”，才能把源程序翻译为机器语言。通常采用的方法是给计算机配制一套用机器语言写的编译程序，它把源程序翻译成目的程序，然后机器执行目的程序，得出计算结果。但由于目的程序一般不能独立运行，还需要一种叫做运行系统的辅助程序来帮助。通常，把编译程序和运行系统合称为编译器。图描述了一个在硬盘文件中的C语言程序，被转换成计算机上可运行的机器语言程序的四个步骤：C语言程序通过编译器首先被编译为汇编语言程序，然后通过汇编器汇编为机器语言的目标模块。链接器将多个模块与库程序组合在一起以解析所有的应用。加载器将机器代码放入合适的内存位置以便处理器执行。随着计算机技术的日益发展，原始的操作方式越来越不适应，特别是用户直接使用大型机器并独占机器，无论是对机器的效率来说还是对方便用户来说都不适宜。用户直接使用机器总觉得机器“太硬了”，很多情况都得依附它。而计算机又觉得用户及外部设备“太笨”，常常使它处于无事可做的状态，因此，迫切需要摆脱这种情况。显然人的思维速度跟不上计算机的计算速度，要摆脱这种情况还要依靠计算机来管理自己和管理用户，于是人们又创造出一类程序，叫做操作系统。它是随着硬件和软件的不断发展而逐渐形成的一套软件系统，用来管理计算机资源如处理器，内存，外部设备和各种编译、应用程序和自动调度用户的作业程序，而使多个用户能有效地共用一套计算机系统。操作系统的出现，使计算机的使用效率成倍地提高，并且为用户提供了方便的使用手段和令人满意的服务质量。根据不同使用环境要求，操作系统目前大致分为批处理操作系统、分时操作系统、网络操作系统、实时操作系统等多种。个人计算机中广泛使用微软公司的“视窗”操作系统。随着计算机在信息处理、情报检索及各种管理系统中应用的发展，要求大量处理某些数据，建立和检索大量的表格。这些数据和表格按一定的规律组织起来，使得处理更方便，检索更迅速，用户使用更方便，于是出现了数据库。所谓数据库，就是实现有组织地、动态地存储大量相关数据，方便多用户访问的计算机软、硬件资源组成的系统。数据库和数据库管理软件一起，组成了数据库管理系统。数据库管理系统有各种类型。目前许多计算机包括微型机，都配有数据库管理系统。随着软件的进一步发展，将开发更高级的计算机语言。这是因为目前所有的高级语言编写程序时，程序比较复杂，开发成本高。计算机语言发展的方向是标准化、积木化、产品化，最终是向自然语言发展，它们能够自动生成程序。从前两节讲述可知，计算机不能简单地认为是一种电子设备，而是一个十分复杂的硬、软件结合而成的整体。它通常由五个以上不同的级组成，每一级都能进行程序设计。第级是微程序设计级或逻辑电路级。这是一个实在的硬件级，由硬件直接执行。如果某一个应用程序直接用微指令来编写，那么可在这一级上运行应用程序。第级是一般机器级，也称为机器语言级，它由微程序解释机器指令系统。这一级也是硬件级。第级是操作系统级，它由操作系统程序实现。这些操作系统由机器指令和广义指令组成，广义指令是操作系统定义和解释的软件指令，所以这一级也称为混合级。第级是汇编语言级，它给程序人员提供一种符号形式语言，以减少程序编写的复杂性。这一级由汇编程序支持和执行。如果应用程序采用汇编语言编写，则机器必须要有这一级的功能；如果应用程序不采用汇编语言编写，则这一级可以不要。第级是高级语言级，它是面向用户的，为方便用户编写应用程序而设置的。这一级由各种高级语言编译程序支持和执行。图中，除第级外，其他各级都得到它下级的支持，同时也受到运行在下面各级上的程序的支持。第级到第级编写程序采用的语言，基本是二进制数字化语言，机器执行和解释容易。第、两级编写程序所采用的语言是符号语言，用英文字母和符号来表示程序，因而便于大多数不了解硬件的人们使用计算机。显然，采用这种用一系列的级来组成计算机的概念和技术，对了解计算机如何组成提供了一种好的结构和体制。而且用这种分级的观点来设计计算机，对保证产生一个良好的系统结构也是很有帮助的。然而，随着大规模集成电路技术的发展和软件硬化的趋势，计算机系统的软、硬件界限已经变得模糊了。因为任何操作可以由软件来实现，也可以由硬件来实现；任何指令的执行可以由硬件完成，也可以由软件来完成。对于某一机器功能采用硬件方案还是软件方案，取决于器件价格、速度、可靠性、存储容量和变更周期等因素。当研制一台计算机的时候，设计者必须明确分配每一级的任务，确定哪些情况使用硬件，哪些情况使用软件，而硬件始终放在最低级。就目前而言，一些计算机的特点是，把原来明显地在一般机器级通过编制程序实现的操作，如整数乘除法指令、浮点运算指令、处理字符串指令等，改为直接由硬件完成。总之，随着大规模集成电路和计算机系统结构的发展，实体硬件机的功能范围在不断扩大。换句话说，第一级和第二级的边界范围，要向第三级乃至更高级扩展。这是因为容量大、价格低、体积小、可以改写的只读存储器提供了软件固化的良好物质手段。现在已经可以把许多复杂的、常用的程序制作成所谓的固件。就它的功能来说，是软件，但从形态上来说，又是硬件。其次，目前在一片硅单晶芯片上制作复杂的逻辑电路已经是实际可行的，这就为扩大指令的功能提供了物质基础，因此本来通过软件手段来实现的某种功能，现在可以通过硬件来直接解释执行。进一步的发展，就是设计所谓面向高级语言的计算机。这样的计算机，可以通过硬件直接解释执行高级语言的语句而不需要先经过编译程序的处理。因此传统的软件部分，今后完全有可能“固化”甚至“硬化”。习惯上所称的“电子计算机”是指现在广泛应用的电子数字计算机，它分为专用计算机和通用计算机两大类。专用和通用是根据计算机的效率、速度、价格、运行的经济性和适应性来划分的。通用计算机分为超级计算机、大型机、服务器、PC机、单片机、多核机六类，其结构复杂性、性能、价格依次递减。计算机的硬件是由有形的电子器件等构成的，它包括运算器、存储器、控制器、适配器、输入输出设备。早期将运算器和控制器合在一起称为CPU中央处理器。目前的CPU包含了存储器，因此称为中央处理机。存储程序并按地址顺序执行，这是冯诺依曼型计算机的工作原理，也是CPU自动工作的关键。计算机的软件是计算机系统结构的重要组成部分，也是计算机不同于一般电子设备的本质所在。计算机软件一般分为系统程序和应用程序两大类。系统程序用来简化程序设计，简化使用方法，提高计算机的使用效率，发挥和扩大计算机的功能和用途，它包括：各种服务性程序；语言类程序；操作系统；数据库管理系统。应用程序是针对某一应用课题领域开发的软件。计算机系统是一个由硬件、软件组成的多级层次结构，它通常由微程序级、一般机器级、操作系统级、汇编语言级、高级语言级组成，每一级上都能进行程序设计，且得到下面各级的支持。计算机的性能指标主要是CPU性能指标、存储器性能指标和IO吞吐率。在选择计算机的数的表示方式时，需要考虑以下几个因素：要表示的数的类型小数、整数、实数和复数；可能的数值范围；数值精确度；数据存储和处理所需要的硬件代价。计算机中常用的数据表示格式有两种，一是定点格式，二是浮点格式。一般来说，定点格式容许的数值范围有限，要求的处理硬件比较简单。而浮点格式容许的数值范围很大，要求的处理硬件比较复杂。定点数的表示方法所谓定点格式，即约定机器中所有数据的小数点位置是固定不变的。由于约定在固定的位置，小数点就不再使用记号“”来表示。原理上讲，小数点位置固定在哪一位都可以，但是通常将数据表示成纯小数或纯整数。假设用一个n位字来表示一个定点数x，其中一位xn用来表示数的符号，其余位数代表它的量值。为了将整个n位统一处理，符号位xn放在最左位置，并用数值和分别代表正号和负号，这样，对于任意定点数xxnxnxx，在定点机中可表示为如下形式：目前计算机中多采用定点纯整数表示，因此将定点数表示的运算简称为整数运算。电子的质量g和太阳的质量g相差甚远，在定点计算机中无法直接来表示这个数值范围。要使它们送入定点计算机进行某种运算，必须对它们分别取不同的比例因子，使其数值部分的绝对值小于，即这里的比例因子和要分别存放在机器的某个存储单元中，便于以后对计算结果按这个比例增大。显然这要占用一定的存储空间和运算时间。从定点机取比例因子中我们得到一个启示，在计算机中还可以这样来表示数据：把一个数的有效数字和数的范围在计算机的一个存储单元中分别予以表示。这种把数的范围和精度分别表示的方法，相当于数的小数点位置随比例因子的不同而在一定范围内可以自由浮动，所以称为浮点表示法。任意一个十进制数N可以写成同样，在计算机中一个任意二进制数N可以写成其中M称为浮点数的尾数，是一个纯小数。e是比例因子的指数，称为浮点数的指数，是一个整数。比例因子的基数对二进记数制的机器是一个常数。在机器中表示一个浮点数时，一是要给出尾数，用定点小数形式表示。尾数部分给出有效数字的位数，因而决定了浮点数的表示精度。二是要给出指数，用整数形式表示，常称为阶码，阶码指明小数点在数据中的位置，因而决定了浮点数的表示范围。浮点数也要有符号位。计算机中，一个机器浮点数由阶码和尾数及其符号位组成：大多数通用性较强的计算机都能直接处理十进制形式表示的数据。十进制数串在计算机内主要有两种表示形式：字符串形式，即字节存放一个十进制的数位或符号位。在主存中，这样的一个十进制数占用连续的多字节，故为了指明这样一个数，需要给出该数在主存中的起始地址和位数串的长度。这种方式表示的十进制字符串主要用在非数值计算的应用领域中。压缩的十进制数串形式，即字节存放两个十进制的数位。它比前一种形式节省存储空间，又便于直接完成十进制数的算术运算，是广泛采用的较为理想的方法。用压缩的十进制数串表示一个数，也要占用主存连续的多字节。每个数位占用半字节即个二进制位，其值可用二十编码BCD码或数字符的ASCII码的低位表示。符第章运算方法和运算器号位也占半字节并放在最低数字位之后，其值选用四位编码中的六种冗余状态中的有关值，如用C表示正号，用D表示负号。在这种表示中，规定数位加符号位之和必须为偶数，当和不为偶数时，应在最高数字位之前补一个。例如，和分别被表示成：在上述表示中，一个实线框表示字节，虚线把一个字节分为高低各半字节，每一个小框内给出一个数值位或符号位的编码值用十六进制形式给出。符号位在数字位之后。与第一种表示形式类似，要指明一个压缩的十进制数串，也得给出它在主存中的首地址和数字位个数不含符号位，又称位长，位长为的数其值为。十进制数串表示法的优点是位长可变，许多机器中规定该长度为，有的甚至更长。数的机器码表示前面介绍了数的小数点表示，下面还需要解决数的机器码表示问题。在计算机中对数据进行运算操作时，符号位如何表示呢是否也同数值位一道参加运算操作呢如参加，会给运算操作带来什么影响呢为了妥善地处理好这些问题，就产生了把符号位和数值位一起编码来表示相应的数的各种表示方法，如原码、补码、反码、移码。为了区别一般书写表示的数和机器中这些编码表示的数，通常将前者称为真值，后者称为机器数或机器码。若定点整数的原码形式为xnxnxxxn为符号位，则原码表示的定义是式中，x原是机器数，x是真值。例如，x，则x原x，则x原一般情况下，对于正数xxnxx，则有x原xnxx对于负数xxnxx，则有x原xnxx对于，原码机器中往往有“”、“”之分，故有两种形式：原原采用原码表示法简单易懂，即符号位加上二进制数的绝对值，但它的最大缺点是加法运算复杂。这是因为，当两数相加时，如果是同号则数值相加；如果是异号，则要进行减法。而在进行减法时，还要比较绝对值的大小，然后大数减去小数，最后还要给结果选择恰当的符号。为了解决这些矛盾，人们找到了补码表示法。计算机组成原理我们先以钟表对时为例说明补码的概念。假设现在的标准时间为点正，而有一只表已经点了，为了校准时间，可以采用两种方法：一是将时针退格；一是将时针向前拨格。这两种方法都能对准到点，由此看出，减和加是等价的。就是说是对的补码，可以用数学公式表示为modmod的意思就是为模数，这个“模”表示被丢掉的数值。上式在数学上称为同余式。上例中和mod等价，原因就是表指针超过时，将自动丢掉，最后得到。同样地，以为模时，modmod从这里可以得到一个启示，就是负数用补码表示时，可以把减法转化为加法。这样，在计算机中实现起来就比较方便。对定点整数，补码形式为xnxnxx，xn为符号位，则补码表示的定义是采用补码表示法进行减法运算比原码方便多了。因为不论数是正或负，机器总是做加法，减法运算可变成加法运算。但根据补码定义，求负数的补码还要做减法，这显然不方便，为此可通过反码来解决。我们先引出数的补码表示与真值的关系。设一个二进制整数补码有n位含位符号位xn，即x补xnxnxnxx则其补码表示的真值为由此可知，式统一表示了正负整数的补码与真值的关系。下面说明由原码表示法变成补码表示法的方法。在定点数的反码表示法中，正数的机器码仍然等于其真值；而负数的机器码符号位为，尾数则将真值的各个二进制位取反。由于原码变反码很容易实现触发器互补输出端得到，所以用反码作为过渡，就可以很容易得到补码。一个正整数，当用原码、反码、补码表示时，符号位都固定为，用二进制表示的数位值都相同，即三种表示方法完全一样。一个负整数，当用原码、反码、补码表示时，符号位都固定为，用二进制表示的数位值都不相同。此时由原码表示法变成补码表示法的规则如下：原码符号位为不变，整数的每一位二进制数位求反得到反码；反码符号位为不变，反码数值位最低位加，得到补码。移码表示法移码通常用于表示浮点数的阶码。由于阶码是个k位的整数，假定定点整数移码形式为ekekeee最高位为符号位时，移码的传统定义是e移ke，kek式中，e移为机器数，e为真值，k是一个固定的偏移值常数。若阶码数值部分为位，以e表示真值，则e移e，e例如，当正数e时，e移，；当负数e时，e移e，。移码中的逗号不是小数点，而是表示左边一位是符号位。显然，移码中符号位ek表示的规律与原码、补码、反码相反。移码表示法对两个指数大小的比较和对阶操作都比较方便，因为阶码域值大者其指数值也大。浮点数的机器表示早期，各个计算机系统的浮点数使用不同的机器码表示阶和尾数，给数据的交换和比较带来很大麻烦。当前的计算机都采用统一的IEEE标准中的格式表示浮点数。IEEE标准规定的位短浮点数和位长浮点数的标准格式为不论是位浮点数还是位浮点数，由于基数是固定常数，对每一个浮点数都一样，所以不必用显式方式来表示它。位的浮点数中，S是浮点数的符号位，占位，安排在最高位，S表示正数，S表示负数。M是尾数，放在低位部分，占用位，小数点位置放在尾数域最左最高有效位的右边。E是阶码，占用位，阶符采用隐含方式，即采用移码方法来表示正负指数。采用这种方式时，将浮点数的指数真值e变成阶码E时，应将指数e加上一个固定的偏置常数，即Ee。若不对浮点数的表示作出明确规定，同一个浮点数的表示就不是唯一的。例如，可以表示成、、等多种形式。为了提高数据的表示精度，当尾数的值不为时，尾数域的最高有效位应为，这称为浮点数的规格化表示。对于非规格化浮点数，一般可以通过修改阶码同时右移动小数点位置的办法，使其变成规格化数的形式。在IEEE标准中，一个规格化的位浮点数x的真值表示为其中尾数域所表示的值是M。由于规格化的浮点数的尾数域最左位最高有效位总是，故这一位无需存储，而认为隐藏在小数点的左边。于是用位字段可以存储位有效数。对位浮点数N，IEEE定义：若E且M，则NNaN。符号NaN表示无定义数据，采用这个标志的目的是让程序员能够推迟进行测试及判断的时间，以便在方便的时候进行。若E且M，则NS。当阶码E为全且尾数M为全时，表示的真值N为无穷大，结合符号位S为或，也有和之分。若E且M，则NS。当阶码E为全且尾数M也为全时，表示的真值N为零称为机器，结合符号位S为或，有正零和负零之分。若E，则NSME规格化数。除去用E为全和全即十进制表示零和无穷大的特殊情况，指数的偏移值不选，而选。对于规格化浮点数，阶码E的范围变为，指数值e则为。因此位浮点数表示的绝对值的范围是。若E且M，则NSM非规格化数。对于规格化无法表示的数据，可以用非规格化形式表示。位的浮点数中符号位位，阶码域位，尾数域位，指数偏移值是。因此规格化的位浮点数x的真值为浮点数所表示的范围远比定点数大。一般在高档微机以上的计算机中同时采用定点、浮点表示，由使用者进行选择。而单片机中多采用定点表示。现代计算机不仅处理数值领域的问题，而且处理大量非数值领域的问题。这样一来，必然要引入文字、字母及某些专用符号，以便表示文字语言、逻辑语言等信息。例如，人机交换信息时使用英文字母、标点符号、十进制数及诸如，，等符号。然而数字计算机只能处理二进制数据，因此，上述信息应用到计算机中时，都必须编写成二进制格式的代码，也就是字符信息用数据表示，称为符号数据。目前国际上普遍采用的一种字符系统是七单位的IRA码。其美国版称为ASCII码美国国家信息交换标准字符码，它包括个十进制数码，个英文字母和一定数量的专用符号，如，，等，总共个元素，因此二进制编码需要位，加上一个偶校验位，共位，刚好为字节。ASCII码规定个二进制位的最高一位为，余下的位可以给出个编码，表示个不同的字符。其中个编码，对应着计算机终端能敲入并且可以显示的个字符，打印机设备也能打印这个字符，如大小写各个英文字母，这个数字符，通用的运算符和标点符号，，，，，，等。另外的个字符，其编码值为和，则不对应任何一个可以显示或打印的实际字符，它们被用作控制码，控制计算机某些外围设备的工作特性和某些计算机软件的运行情况。ASCII编码和个字符的对应关系如表所示。表中编码符号的排列次序为bbbbbbbb，其中b恒为，表中未给出，bbb为高位部分，bbbb为低位部分。可以看出，十进制的码可以去掉bbb而得到。字符串是指连续的一串字符，通常方式下，它们占用主存中连续的多字节，每字节存一个字符。当主存字由或字节组成时，在同一个主存字中，既可按从低位字节向高位字节的顺序存放字符串内容，也可按从高位字节向低位字节的顺序存放字符串内容。这两种存放方式都是常用方式，不同的计算机可以选用其中任何一种。例如下述字符串：IFABTHENREADC就可以按图所示从高位字节到低位字节依次存放在主存中。其中主存单元长度由字节组成。每字节中存放相应字符的ASCII值，文字表达式中的空格“”在主存中也占字节的位置。因而每字节分别存放十进制的，，，，，，，，，，，，，，，，为了能直接使用西文标准键盘把汉字输入到计算机，就必须为汉字设计相应的输入编码方法。当前采用的方法主要有以下三类：数字编码常用的是国标区位码，用数字串代表一个汉字输入。区位码是将国家标准局公布的个两级汉字分为个区，每个区分位，实际上把汉字表示成二维数组，每个汉字在数组中的下标就是区位码。区码和位码各两位十进制数字，因此输入一个汉字需按键四次。例如“中”字位于第区位，区位码为。数字编码输入的优点是无重码，且输入码与内部编码的转换比较方便，缺点是代码难以记忆。拼音码拼音码是以汉语拼音为基础的输入方法。凡掌握汉语拼音的人，不需训练和记忆，即可使用。但汉字同音字太多，输入重码率很高，因此按拼音输入后还必须进行同音字选择，影响了输入速度。字形编码字形编码是用汉字的形状进行的编码。汉字总数虽多，但是由一笔一画组成，全部汉字的部件和笔画是有限的。因此，把汉字的笔画部件用字母或数字进行编码，按笔画的顺序依次输入，就能表示一个汉字。例如五笔字型编码是最有影响的一种字形编码方法。除了上述三种编码方法之外，为了加快输入速度，在上述方法基础上，发展了词组输入、联想输入等多种快速输入方法。但是都利用了键盘进行“手动”输入。理想的输入方式是利用语音或图像识别技术“自动”将拼音或文本输入到计算机内，使计算机能认识汉字，听懂汉语，并将其自动转换为机内代码表示。目前这种理想已经成为现实。汉字内码是用于汉字信息的存储、交换、检索等操作的机内代码，一般采用字节表示。英文字符的机内代码是七位的ASCII码，当用字节表示时，最高位为“”。为了与英文字符能相互区别，汉字机内代码中字节的最高位均规定为“”。例如，汉字操作系统CCDOS中使用的汉字内码是一种最高位为“”的两字节内码。有些系统中字节的最高位用于奇偶校验位，这种情况下用字节表示汉字内码。字模码是用点阵表示的汉字字形代码，它是汉字的输出形式。根据汉字输出的要求不同，点阵的多少也不同。简易型汉字为点阵，提高型汉字为点阵、点阵，甚至更高。因此字模点阵的信息量是很大的，所占存储空间也很大。以点阵为例，每个汉字要占用字节，国标两级汉字要占用K字节。因此字模点阵只能用来构成汉字库，而不能用于机内存储。字库中存储了每个汉字的点阵代码。当显示输出或打印输出时才检索字库，输出字模点阵，得到字形。注意，汉字的输入编码、汉字内码、字模码是计算机中用于输入、内部处理、输出三种不同用途的编码，不要混为一谈。元件故障、噪声干扰等各种因素常常导致计算机在处理信息过程中出现错误。例如，将位二进制数x从部件A传送到部件B，可能由于传送信道中的噪声干扰而受到破坏，以至于在接收部件B收到的是x而不是x。为了防止这种错误，可将信号采用专门的逻辑电路进行编码以检测错误，甚至校正错误。通常的方法是，在每个字上添加一些校验位，用来确定字中出现错误的位置。计算机中常用这种检错或纠错技术进行存储器读写正确性或传输信息的检验。这里仅介绍检错码。最简单且应用广泛的检错码是采用一位校验位的奇校验或偶校验。设Xxxxn是一个n位字，则奇校验位C定义为节已介绍了数的补码表示法，负数用补码表示后，就可以和正数一样来处理。这样，运算器里只需要一个加法器就可以了，不必为了负数的加法运算，再配一个减法器。计算机组成原理补码加法的公式是x补y补xy补modn可分四种情况来证明。假设采用定点整数表示，因此证明的先决条件是：xn，yn，xyn。x，y，则xy。相加两数都是正数，故其和也一定是正数。正数的补码和原码是一样的，根据数据补码定义可得x补y补xyxy补modnx，y，则xy或xy。相加的两数一个为正，一个为负，因此相加结果有正、负两种可能。根据补码定义，x补x，y补ny所以x补y补xnynxyxy补modnx，y，则xy或xy。这种情况和第种情况一样，把x和y的位置对调即得证。x，y，则xy。相加两数都是负数，则其和也一定是负数。x补nx，y补ny所以x补y补nxnynnxyxy补modn式说明，在模n意义下，任意两数的补码之和等于该两数之和的补码。这是补码加法的理论基础。在定点整数机器中，数的表示范围xn。在运算过程中如出现大于字长绝对值的现象，称为“溢出”。在定点机中，运算过程中出现溢出时其结果是不正确的，故运算器必须能检测出溢出。之所以发生错误，是因为运算结果产生了溢出。两个正数相加，结果大于机器字长所能表示的最大正数，称为正溢。而两个负数相加，结果小于机器所能表示的最小负数，称为负溢，如图所示。为了判断“溢出”是否发生，可采用两种检测方法。第一种方法是采用双符号位法，这称为“变形补码”，从而可使模n补码所能表示的数的范围扩大一倍。数的变形补码用同余式表示时为了得到两数变形补码之和等于两数和的变形补码，同样必须：两个符号位都看做数码一样参加运算；两数进行以n为模的加法，即最高符号位上产生的进位要丢掉。采用变形补码后，任何正数，两个符号位都是“”，即xnxnxx；任何负数，两个符号位都是“”，即xnxnxx。如果两个数相加后，其结果的符号位出现“”或“”两种组合时，表示发生溢出。最高符号位永远表示结果的正确符号。两个符号位出现“”，表示负溢出，即结果小于n。由此，我们可以得出如下结论：当以变形补码运算，运算结果的二符号位相异时，表示溢出；相同时，表示未溢出。故溢出逻辑表达式为VSfSf，其中Sf和Sf分别为最高符号位和第二符号位。此逻辑表达式可用异或门实现。模n补码相加的结果，不论溢出与否，最高符号位始终指示正确的符号。第二种溢出检测方法是采用单符号位法。从例和例中看到，当最高有效位产生进位而符号位无进位时，产生正溢；当最高有效位无进位而符号位有进位时，产生负溢。故溢出逻辑表达式为VCfC，其中Cf为符号位产生的进位，C为最高有效位产生的进位。此逻辑表达式也可用异或门实现。在定点机中，当运算结果发生溢出时表示出错，机器通过逻辑电路自动检查出这种溢出，并进行中断处理。图a示出了补码运算的二进制加法减法器逻辑结构图。由图看到，n个位的全加器FA可级联成一个n位的行波进位加减器。M为方式控制输入线，当M时，做加法AB运算；当M，做减法AB运算，在后一种情况下，AB运算转化成A补B补运算，求补过程由B来实现。因此，图中最右边的全加器的起始进位输入端被连接到功能方式线M上，做减法时M，相当于在加法器的最低位上加。另外，图中左边还表示出单符号位法的溢出检测逻辑：当CnCn时，运算无溢出；而当CnCn时，运算有溢出，经异或门产生溢出信号。两个二进制数字Ai，Bi和一个进位输入Ci相加，产生一个和输出Si，以及一个进位输出Ci。表中列出一位全加器FA进行加法运算的输入输出真值表。根据表所示的真值表，三个输入端和两个输出端可按如下逻辑方程进行联系：SiAiBiCiCiAiBiBiCiCiAiAiBiAiBiCi按此表达式组成的FA示于图a，进位链采用个与门和个或门。对图a所示的一位全加器FA来说，求和结果Si的时间延迟为T每级异或门延迟T。Ci的时间延迟为T，其中T被定义为相应于单级逻辑电路的单位门延迟。T通常采用一个“与”门或一个“或”门的时间延迟来作为度量单位，因此多级进位链的时间延迟可以用与或门的级数或者T的数目来计算得到。现在计算n位行波进位加法器图b的时间延迟。假如采用图a所示的一位全加器FA并考虑溢出检测，那么n位行波进位加法器的延迟时间ta为其中，T为最低位上的两级“异或”门再加上溢出“异或”门的总时间，T为每级进位链的延迟时间。ta意味着加法器的输入端输入加数和被加数后，在最坏情况下加法器输出端得到稳定的求和输出所需的最长时间。显然这个时间越小越好。注意，加数、被加数、进位与和数都是用电平来表示的，因此，所谓稳定的求和输出，就是指稳定的电平输出。思考题为什么一套加法器可以实现加法和减法操作？创新点在何处？在定点计算机中，两个原码表示的数相乘的运算规则是：乘积的符号位由两数的符号位按异或运算得到，而乘积的数值部分则是两个正数相乘之积。设n位被乘数和乘数用定点整数表示被乘数x原xfxnxx乘数y原yfynyy乘积z原xfyfxnxxynyy式中，xf为被乘数符号，yf为乘数符号。乘积符号的运算法则是：同号相乘为正，异号相乘为负。由于被乘数和乘数的符号组合只有四种情况xfyf，因此积的符号可按“异或”按位加运算得到。数值部分的运算方法与普通的十进制小数乘法相类似，不过对于用二进制表达的数来说，其乘法规则更为简单一些。设x，y，先用习惯方法求其乘积，其过程如下：xyz运算的过程与十进制乘法相似：从乘数y的最低位开始，若这一位为“”，则将被乘数x写下；若这一位为“”，则写下全。然后再对乘数y的高一位进行乘法运算，其规则同上，不过这一位乘数的权与最低位乘数的权不一样，因此被乘数x要左移一位。以此类推，直到乘数各位乘完为止，最后将它们统统加起来，便得到最后乘积z。如果被乘数和乘数用定点小数表示，我们也会得到同样的结果。但是人们习惯的算法对机器并不完全适用。原因之一，机器通常只有n位长，两个n位数相乘，乘积可能为n位。原因之二，只有两个操作数相加的加法器，难以胜任将n个位积一次相加起来的运算。因此，在早期计算机中为了简化硬件结构，采用串行的位乘法方案，即多次执行“加法移位”操作来实现。这种方法并不需要很多器件。然而串行方法毕竟太慢，不能满足科学技术对高速乘法所提出的要求。由于乘法运算大约占全部算术运算的，因此采用高速乘法部件，无论从速度上来说还是从效率上来说，都是十分必要的。自从大规模集成电路问世以来，高速的单元阵列乘法器应运而生，出现了各种形式的流水式阵列乘法器，它们属于并行乘法器。鉴于串行乘法器已被淘汰，下面只介绍并行乘法器。设有两个不带符号的二进制整数：AamaaBbnbb上述过程说明了在m位n位不带符号整数的阵列乘法中加法移位操作的被加数矩阵。每一个部分乘积项位积aibj叫做一个被加数。这mn个被加数aibjim和jn可以用mn个“与”门并行地产生，如图的上半部分所示。显然，设计高速并行乘法器的基本问题，就在于缩短被加数矩阵中每列所包含的的加法时间。现以位位不带符号的阵列乘法器mn为例来说明并行阵列乘法器的基本原理。图示出了位位阵列乘法器的逻辑电路图，其中FA是前面讲过的一位全加器，FA的斜线方向为进位输出，竖线方向为和输出，而所有被加数项的排列和前述ABP乘法过程中的被加数矩阵相同。图中用虚线围住的阵列中最后一行构成了一个行波进位加法器，其求和时间延迟为nTT异或门。当然，为了缩短加法时间，最下一行的行波进位加法器也可以用先行进位加法器来代替。这种乘法器要实现n位n位时，需要nn个全加器和n个与门。该乘法器的总的乘法时间可以估算如下：令Ta为与门的传输延迟时间，Tf为全加器FA的进位传输延迟时间，假定用级“与或”逻辑来实现FA的进位链功能，那么就有TaT，TfT从图可见，最坏情况下的延迟途径，即是沿着矩阵p垂直线和最下面的一行进位及p求和。参见图b，n位n位不带符号的阵列乘法器总的乘法时间估算为对带符号的阵列乘法器的结构来说，按其所用的数的表示方法而有所不同。在介绍带符号的阵列乘法器基本原理以前，我们先来看看算术运算部件设计中经常用到的求补电路。图示出了一个具有使能控制的二进制对求补器电路图，其逻辑表达式如下：C，CiaiCiiaaiECi，in对求补时，采用按位扫描技术来执行所需要的求补操作。令Aanaa是给定的n位带符号的数，要求确定它的补码形式。进行求补的方法就是从数的最右端a开始，由右向左，直到找出第一个“”，例如，ai，in。这样，ai以右的每一个输入位，包括ai自己，都保持不变，而ai以左的每一个输入位都求反，即变，变。鉴于此，横向链式线路中的第i扫描级的输出Ci为的条件是：第i级的输入位ai，或者第i级链式输入来自右起前i级的链式输出Ci。另外，最右端的起始链式输入C必须永远置成“”。当控制信号线E为“”时，启动对求补的操作；当控制信号线E为“”时，输出将和输入相等。显然，我们可以利用符号位来作为控制信号。例如，在一个位的对求补器中，如果输入数为，那么输出数应是，其中从右算起的第位，就是所遇到的第一个“”的位置。用这种对求补器来转换一个n位带符号的数，所需的总时间延迟为tTCnTTnT其中每个扫描级需T延迟，而T则是由于“与”门和“异或”门引起的。现在让我们来讨论带符号的阵列乘法器。图给出了n位n位带求补器的阵列乘法器逻辑方框图。通常，把包含这些求补级的乘法器又称为符号求补的阵列乘法器。在这种逻辑结构中，共使用了三个求补器。其中两个算前求补器的作用是：将两个操作数A和B在被不带符号的乘法阵列核心部件相乘以前，先变成正整数。而算后求补器的作用则是：当两个输入操作数的符号不一致时，把运算结果变换成带符号的数。设Aananaa和Bbnbnbb均为用定点表示的n位带符号整数。由图看到，在必要的求补操作以后，A和B的码值输送给n位n位不带符号的阵列乘法器，并由此产生n位乘积为ABPpnpppnanbn其中，pn为符号位。图所示的带求补器的阵列乘法器既适用于原码乘法，也适用于间接的补码乘法。不过在原码乘法中，算前求补和算后求补都不需要，因为输入数据都是立即可用的。而间接的补码阵列乘法却需要使用三个求补器。为了完成所必需的求补与乘法操作，时间大约比原码阵列乘法增加倍。可控加法减法CAS单元和阵列乘法器相似，阵列除法器也是一种并行运算部件，采用大规模集成电路制造。与早期的串行除法器相比，阵列除法器不仅所需要的控制线路少，而且能够提供令人满意的高速运算速度。阵列除法器有多种形式，如加减交替阵列除法器、补码阵列除法器等。这里以加减交替阵列除法器为例，来说明这类除法器的组成原理。在介绍加减交替阵列除法器以前，首先介绍可控加法减法CAS单元，因为它将被采用于下面所介绍的除法流水逻辑阵列中。图a示出了可控加法减法CAS单元的逻辑电路图，它有四个输出端和四个输入端。当输入线P时，CAS做加法运算；当P时，CAS做减法运算。在这两个表达式中，每一个都能用一个三级组合逻辑电路包括反相器来实现。因此每一个基本的CAS单元的延迟时间为T单位。后面将利用这个单元的延迟时间来精确确定除法时间。加减交替的阵列除法器现在转入讨论加减交替的阵列除法器，假定所有被处理的数都是正小数。在加减交替的除法阵列中，每一行所执行的操作究竟是加法还是减法，取决于前一行输出的符号与被除数的符号是否一致。当出现不够减时，部分余数相对于被除数来说要改变符号。这时应该产生一个商位“”，除数首先沿对角线右移，然后加到下一行的部分余数上。当部分余数不改变它的符号时，即产生商位“”，下一行的操作应该是减法。图b示出了位除位的加减交替阵列除法器的逻辑原理图。其中被除数xxxxxxx双倍长除数yyyy商数qqqq余数rrrrr字长n由图看出，该阵列除法器是用一个可控加法减法CAS单元所组成的流水阵列来实现的。推广到一般情况，一个n位n位的加减交替除法阵列由n个CAS单元组成，其中两个操作数被除数与除数都是正的。单元之间的互联是用n的阵列来表示的。这里被除数x是一个位的小数双倍长数值：xxxxxxx它是由顶部一行和最右边的对角线上的垂直输入线来提供的。除数y是一个位的小数：yyyy它沿对角线方向进入这个阵列。这是因为，在除法中将所需要的部分余数保持固定，而将除数沿对角线右移。商q是一个位的小数：qqqq它在阵列的左边产生。余数r是一个位的小数：rrrrr它在阵列的最下一行产生。最上面一行所执行的初始操作一定是减法。因此最上面一行的控制线P固定置成“”。减法是用的补码运算来实现的，这时右端各CAS单元上的反馈线用作初始的进位输入，即最低位上加“”。每一行最左边的单元的进位输出决定着商的数值。将当前的商反馈到下一行，我们就能确定下一行的操作。由于进位输出信号指示出当前的部分余数的符号，因此，正如前面所述，它决定下一行的操作将进行加法还是减法。对加减交替阵列除法器来说，在进行运算时，沿着每一行都有进位或借位传播，同时所有行在它们的进位链上都是串行连接。而每个CAS单元的延迟时间为T单元，因此，对一个n位除以n位的加减交替阵列除法器来说，单元的数量为n，考虑最大情况下的信号延迟，其除法执行时间为tdnT其中n为尾数数位。运算器是数据的加工处理部件，是CPU的重要组成部分。尽管各种计算机的运算器结构可能有这样或那样的不同，但是它们的最基本的结构中必须有算术逻辑运算单元、数据缓冲寄存器、通用寄存器、多路转换器和数据总线等逻辑构件。计算机中除了进行加、减、乘、除等基本算术运算以外，还可对两个或一个逻辑数进行逻辑运算。所谓逻辑数，是指不带符号的二进制数。利用逻辑运算可以进行两个数的比较，或者从某个数中选取某几位等操作。例如，当利用计算机做过程控制时，我们可以利用逻辑运算对一组输入的开关量做出判断，以确定哪些开关是闭合的，哪些开关是断开的。总之，在非数值应用的广大领域中，逻辑运算是非常有用的。计算机中的逻辑运算，主要是指逻辑非、逻辑加、逻辑乘、逻辑异等四种基本运算。逻辑非也称求反。对某数进行逻辑非运算，就是按位求它的反，常用变量上方加一横来表示。设一个数x表示成：xxxxxn对x求逻辑非，则有xzzzzznziix，in我们在节中曾介绍由一位全加器FA构成的行波进位加法器，它可以实现补码数的加法运算和减法运算。但是这种加法减法器存在两个问题。一是由于串行进位，它的运算时间很长。假如加法器由n位全加器构成，每一位的进位延迟时间为ns，那么最坏情况下，进位信号从最低位传递到最高位而最后输出稳定，至少需要nns，这在高速计算中显然是不利的。二是就行波进位加法器本身来说，它只能完成加法和减法两种操作而不能完成逻辑操作。为此，本节先介绍多功能算术逻辑运算单元ALU，它不仅具有多种算术运算和逻辑运算的功能，而且具有先行进位逻辑，从而能实现高速运算。基本思想节中给出一位全加器FA的逻辑表达式为FiAiBiCiCiAiBiBiCiCiAi式中，Fi是第i位的和数，Ai、Bi是第i位的被加数和加数，Ci是第i位的进位输入，Ci为第i位的进位输出。为了将全加器的功能进行扩展以完成多种算术逻辑运算，我们先不将输入Ai、Bi和下一位的进位数Ci直接进行全加，而是将Ai和Bi先组合成由控制参数S、S、S、S控制的组合函数Xi和Yi图，然后再将Xi、Yi和下一位进位数通过全加器进行全加。这样，不同的控制参数可以得到不同的组合函数，因而能够实现多种算术运算和逻辑运算。因此，一位算术逻辑运算单元的逻辑表达式修改为FiXiYiCniCniXiYiYiCniCniXi式中进位下标用ni代替原来一位全加器中的i，i代表集成在一片电路上的ALU的二进制位数，对于位一片的ALU，i。n代表若干片ALU组成更大字长的运算器时每片电路的进位输入，如当片组成位字长的运算器时，n。逻辑表达式控制参数S、S、S、S分别控制输入Ai和Bi，产生Yi和Xi的函数。其中Yi是受S、S控制的Ai和Bi的组合函数，而Xi是受S、S控制的Ai和Bi的组合函数，其函数关系如表所示。根据上面所列的函数关系，即可列出Xi和Yi的逻辑表达式这样，对一片ALU来说，可有三个进位输出。其中G称为进位发生输出，P称为进位传送输出。在电路中多加这两个进位输出的目的，是为了便于实现多片组ALU之间的先行进位，为此还需一个配合电路，称为先行进位发生器CLA，将在下面介绍。Cn是本片组的最后进位输出。逻辑表达式表明，这是一个先行进位逻辑。换句话说，第位的进位输入Cn可以直接传送到最高进位位上去，因而可以实现高速运算。图示出了用正逻辑表示的位算术逻辑运算单元ALU的逻辑电路图，它是根据上面的原始推导公式用TTL电路实现的。这个器件的商业标号为ALU。算术逻辑运算的实现图中除了SS四个控制端外，还有一个控制端M，它用来控制ALU进行算术运算还是进行逻辑运算。当M时，M对进位信号没有任何影响。此时Fi不仅与本位的被操作数Yi和操作数Xi有关，而且与向本位的进位值Cni有关，因此M时，进行算术操作。当M时，封锁了各位的进位输出，即Cni，因此各位的运算结果Fi仅与Yi和Xi有关，故M时，进行逻辑操作。表列出了ALU的运算功能表，它有两种工作方式。对正逻辑操作数来说，算术运算称高电平操作，逻辑运算称正逻辑操作即高电平为“”，低电平为“”。对于负逻辑操作数来说，正好相反。由于SS有种状态组合，因此对正逻辑输入与输出而言，有种算术运算功能和种逻辑运算功能。同样，对于负逻辑输入与输出而言，也有种算术运算功能和种逻辑运算功能。表中只列出了正逻辑的种算术运算和种逻辑运算功能。注意，表中算术运算操作是用补码表示法来表示的。其中“加”是指算术加，运算时要考虑进位，而符号“”是指“逻辑加”。其次，减法是用补码方法进行的，其中数的反码是内部产生的，而结果输出“A减B减”，因此做减法时须在最末位产生一个强迫进位加，以便产生“A减B”的结果。另外，“AB”输出端可指示两个数相等，因此它与其他ALU的“AB”输出端按“与”逻辑连接后，可以检测两个数的相等条件。两级先行进位的ALU前面说过，ALU设置了P和G两个本组先行进位输出端。如果将四片的P，G输出端送入到先行进位部件CLA，又可实现第二级的先行进位，即组与组之间的先行进位。假设片组的先行进位输出依次为P，G，P，G，P，G，P，G，那么参考式的进位逻辑表达式，先行进位部件CLA所提供的进位逻辑关系如下：CnxGPCnCnyGPCnxGGPPPCnCnzGPCnyGGPGPPPPPCnCnGPCnzGGPGPPGPPPPPPPCnGPCn其中PPPPPGGGPGPPGPPP根据以上表达式，用TTL器件实现的成组先行进位部件的逻辑电路图如图所示。其中G称为成组进位发生输出，P称为成组进位传送输出。下面介绍如何用若干个ALU位片，与配套的先行进位部件CLA在一起，构成一个全字长的ALU。图示出了用两个位全先行进位部件级联组成的位ALU逻辑方框图。在这个电路中使用了八个ALU和两个CLA器件。很显然，对一个位来说，CLA部件构成了第二级的先行进位逻辑，即实现四个小组位片之间的先行进位，从而使全字长ALU的运算时间大大缩短。由于计算机内部的主要工作过程是信息传送和加工的过程，因此在机器内部各部件之间的数据传送非常频繁。为了减少内部数据传送线并便于控制，通常将一些寄存器之间数据传送的通路加以归并，组成总线结构，使不同来源的信息在此传输线上分时传送。根据总线所处的位置，总线分为内部总线和外部总线两类。内部总线是指CPU内各部件的连线，而外部总线是指系统总线，即CPU与存储器、IO系统之间的连线。本节只讨论内部总线。按总线的逻辑结构来说，总线可分为单向传送总线和双向传送总线。所谓单向总线，就是信息只能向一个方向传送。所谓双向总线，就是信息可以向两个方向传送，既可以发送数据，也可以接收数据。图是带有缓冲驱动器的位双向数据总线。其中所用的基本电路就是三态逻辑电路。当“发送”信号有效时，数据从左向右传送。反之，当“接收”信号有效时，数据从右向左传送。这种类型的缓冲器通常根据它们如何使用而叫做总线扩展器、总线驱动器、总线接收器等等。运算器包括ALU、阵列乘除器、寄存器、多路开关、三态缓冲器、数据总线等逻辑部件。运算器的设计，主要是围绕着ALU和寄存器同数据总线之间如何传送操作数和运算结果而进行的。在决定方案时，需要考虑数据传送的方便性和操作速度，在微型机和单片机中还要考虑在硅片上制作总线的工艺。计算机的运算器大体有如下三种结构形式：单总线结构的运算器单总线结构的运算器如图a所示。由于所有部件都接到同一总线上，所以数据可以在任何两个寄存器之间，或者在任一个寄存器和ALU之间传送。如果具有阵列乘法器或除法器，那么它们所处的位置应与ALU相当。对这种结构的运算器来说，在同一时间内，只能有一个操作数放在单总线上。为了把两个操作数输入到ALU，需要分两次来做，而且还需要A、B两个缓冲寄存器。例如，执行一个加法操作时，第一个操作数先放入A缓冲寄存器，然后再把第二个操作数放入B缓冲寄存器。只有两个操作数同时出现在ALU的两个输入端，ALU才执行加法。当加法结果出现在单总线上时，由于输入数已保存在缓冲寄存器中，它并不会打扰输入数。然后，再由第三个传送动作，以便把加法的“和”选通到目的寄存器中。由此可见，这种结构的主要缺点是操作速度较慢。虽然在这种结构中输入数据和操作结果需要三次串行的选通操作，但它并不会对每种指令都增加很多执行时间。例如，如果有一个输入数是从存储器来的，且运算结果又送回存储器，那么限制数据传送速度的主要因素是存储器访问时间。只有在对全都是CPU寄存器中的两个操作数进行操作时，单总线结构的运算器才会造成一定的时间损失。但是由于它只控制一条总线，故控制电路比较简单。双总线结构的运算器双总线结构的运算器如图b所示。在这种结构中，两个操作数同时加到ALU进行运算，只需要一次操作控制，而且马上就可以得到运算结果。图中，两条总线各自把其数据送至ALU的输入端。专用寄存器分成两组，它们分别与一条总线交换数据。这样，通用寄存器中的数就可以进入到任一组专用寄存器中去，从而使数据传送更为灵活。ALU的输出不能直接加到总线上去。这是因为，当形成操作结果的输出时，两条总线都被输入数占据，因而必须在ALU输出端设置缓冲寄存器。为此，操作的控制要分两步来完成：第一步，在ALU的两个输入端输入操作数，形成结果并送入缓冲寄存器；第二步，把结果送入目的寄存器。假如在总线、和ALU输入端之间再各加一个输入缓冲寄存器，并把两个输入数先放至这两个缓冲寄存器，那么，ALU输出端就可以直接把操作结果送至总线或总线上去。三总线结构的运算器三总线结构的运算器如图c所示。在三总线结构中，ALU的两个输入端分别由两条总线供给，而ALU的输出则与第三条总线相连。这样，算术逻辑操作就可以在一步的控制之内完成。由于ALU本身有时间延迟，所以打入输出结果的选通脉冲必须考虑到这个延迟。另外，设置了一个总线旁路器桥。如果一个操作数不需要修改，而直接从总线传送到总线，那么可以通过总线旁路器把数据传出；如果一个操作数传送时需要修改，那么就借助于ALU。三总线运算器的特点是操作时间快。思考题你能评价三种运算器的结构特点吗？设有两个浮点数x和y，它们分别为xExMxyEyMy其中，Ex和Ey分别为数x和y的阶码，Mx和My分别为数x和y的尾数。两浮点数进行加法和减法的运算规则是zxyMxExEyMyEy，ExEy完成浮点加减运算的操作过程大体分为四步：第一步，操作数检查；第二步，比较阶码大小并完成对阶；第三步，尾数进行加或减运算；第四步，结果规格化并进行舍入处理。图示出浮点加减运算的操作流程。操作数检查浮点加减运算过程比定点运算过程复杂。如果判知两个操作数x或y中有一个数为，即可得知运算结果而没有必要再进行后续的一系列操作，以节省运算时间。操作数检查步骤则用来完成这一功能。比较阶码大小并完成对阶两浮点数进行加减，首先要看两数的阶码是否相同，即小数点位置是否对齐。若两数阶码相同，表示小数点是对齐的，就可以进行尾数的加减运算。反之，若两数阶码不同，表示小数点位置没有对齐，此时必须使两数的阶码相同，这个过程叫做对阶。要对阶，首先应求出两数阶码Ex和Ey之差，即EExEy若E，表示两数阶码相等，即ExEy；若E，表示ExEy；若E，表示ExEy。当ExEy时，要通过尾数的移动以改变Ex或Ey，使之相等。原则上，既可以通过Mx移位以改变Ex来达到ExEy，也可以通过My移位以改变Ey来实现ExEy。但是，由于浮点表示的数多是规格化的，尾数左移会引起最高有效位的丢失，造成很大误差。而尾数右移虽引起最低有效位的丢失，但造成的误差较小。因此，对阶操作规定使尾数右移，尾数右移后使阶码作相应增加，其数值保持不变。很显然，一个增加后的阶码与另一个阶码相等，所增加的阶码一定是小阶。因此在对阶时，总是使小阶向大阶看齐，即小阶的尾数向右移位相当于小数点左移，每右移一位，其阶码加，直到两数的阶码相等为止，右移的位数等于阶差E。尾数加减运算对阶结束后，即可进行尾数的加减运算。不论是加法运算还是减法运算，都按加法进行操作，其方法与定点加减运算完全一样。结果规格化在浮点加减运算时，尾数求和的结果也可以得到或，即两符号位不相等，这在定点加减运算中称为溢出，是不允许的。但在浮点运算中，它表明尾数求和结果的绝对值大于，向左破坏了规格化。此时将尾数运算结果右移以实现规格化表示，称为向右规格化，即尾数右移位，阶码加。当尾数不是M时须向左规格化。舍入处理在对阶或向右规格化时，尾数要向右移位，这样，被右移的尾数的低位部分会被丢掉，从而造成一定误差，因此要进行舍入处理。在IEEE标准中，舍入处理提供了四种可选办法。就近舍入其实质就是通常所说的“四舍五入”。例如，尾数超出规定的位的多余位数字是，多余位的值超过规定的最低有效位值的一半，故最低有效位应增。若多余的位是，则简单的截尾即可。对多余的位这种特殊情况：若最低有效位现为，则截尾；若最低有效位现为，则向上进位使其变为。朝舍入即朝数轴原点方向舍入，就是简单的截尾。无论尾数是正数还是负数，截尾都使取值的绝对值比原值的绝对值小。这种方法容易导致误差累积。朝舍入对正数来说，只要多余位不全为则向最低有效位进；对负数来说，则是简单的截尾。朝舍入处理方法正好与朝舍入情况相反。对正数来说，则是简单截尾；对负数来说，只要多余位不全为，则向最低有效位进。溢出处理浮点数的溢出是以其阶码溢出表现出来的。在加、减运算过程中要检查是否产生了溢出：若阶码正常，加减运算正常结束；若阶码溢出，则要进行相应的处理。另外对尾数的溢出也需要处理。图表示了位格式浮点数的溢出概念。阶码上溢超过了阶码可能表示的最大值的正指数值，一般将其认为是和。阶码下溢超过了阶码可能表示的最小值的负指数值，一般将其认为是。尾数上溢两个同符号尾数相加产生了最高位向上的进位，要将尾数右移，阶码增来重新对齐。尾数下溢在将尾数右移时，尾数的最低有效位从尾数域右端流出，要进行舍入处理。图示出浮点加减法运算电路的硬件框图。首先，两个加数的指数部分通过ALU相减，从而判断出哪一个的指数较大、大多少。指数相减所得的差值控制着下面的三个多路开关；按从左到右的顺序，这三个多路开关分别挑选出较大的指数、较小加数的有效数位以及较大加数的有效数位。较小加数的有效数位部分右移适当的位数，然后再在ALU中与另一个加数的有效数位部分相加。接下来对结果进行规格化，这是通过将求得的和向左或向右做适当的移位操作同时相应地增大或减小和的指数部分来实现的。最后对结果进行舍入，舍入之后可能还需要再次进行规格化，才能得到最终的结果。浮点乘、除法运算步骤浮点数的乘除运算大体分为六步：第一步，操作数检查，如果被除数x为，则商为，如果除数y为，则商为；第二步，阶码加减操作；第三步，尾数乘除操作；第四步，结果规格化；第五步，舍入处理；第六步，确定积的符号。浮点数的阶码运算浮点乘除法中，对阶码的运算有、、两阶码求和、两阶码求差四种，运算时还必须检查结果是否溢出。尾数处理浮点加减法对结果的规格化及舍入处理也适用于浮点乘除法。第一种简单办法是，无条件地丢掉正常尾数最低位之后的全部数值。这种办法被称为截断处理，其好处是处理简单，缺点是影响结果的精度。第二种简单办法是，运算过程中保留右移中移出的若干高位的值，最后再按某种规则用这些位上的值修正尾数。这种处理方法被称为舍入处理。当尾数用原码表示时，舍入规则比较简单。最简便的方法，是只要尾数最低位为，或移出的几位中有为的数值位，就使最低位的值为。另一种是舍入法，即当丢失的最高位的值为时，把这个加到最低数值位上进行修正。第步，规格化与溢出检查。乘积的有效数位已经规格化，由于指数处在，故没有发生上溢和下溢。第步，舍入到位有效数字。这一步无需做任何操作，结果仍为第步，确定积的符号：x和y符号相反，乘积为负数，即xy浮十进制浮点数验证：流水线原理计算机的流水处理过程同工厂中的流水装配线类似。为了实现流水，首先必须把输入的任务分割为一系列子任务，使各子任务能在流水线的各个阶段并发地执行。将任务连续不断地输入流水线，从而实现了子任务级的并行。因此流水处理大幅度地改善了计算机的系统性能，是在计算机上实现时间并行性的一种非常经济的方法。在流水线中，原则上要求各个阶段的处理时间都相同。若某一阶段的处理时间较长，势必造成其他阶段的空转等待。因此对子任务的划分，是决定流水线性能的一个关键因素，它取决于操作部分的效率、所期望的处理速度，以及成本价格等。假设作业T被分成k个子任务，可表达为TTTTk各个子任务之间有一定的优先关系：若ij，则必须在Ti完成以后，Tj才能开始工作。具有这种线性优先关系的流水线称为线性流水线。线性流水线的硬件基本结构如图所示。图中，处理一个子任务的过程为过程段Si。线性流水线由一系列串联的过程段组成，各个过程之间设有高速的缓冲寄存器L，以暂时保存上一过程子任务处理的结果。在一个统一的时钟C控制下，数据从一个过程段流向相邻的过程段。设过程段Si所需的时间为i，缓冲寄存器的延时为，线性流水线的时钟周期定义为maxim故流水线处理的频率为f。在流水线处理中，当任务饱满时，任务源源不断地输入流水线，不论有多少级过程段，每隔一个时钟周期都能输出一个任务。从理论上说，一个具有k级过程段的流水线处理n个任务需要的时钟周期数为Tkkn其中k个时钟周期用于处理第一个任务。k个周期后，流水线被装满，剩余的n个任务只需n个周期就能完成。如果用非流水线的硬件来处理这n个任务，时间上只能串行进行，则所需时钟周期数为TLnk当nk时，Ckk。这就是说，理论上k级线性流水线处理几乎可以提高k倍速度。思考题你能举出工厂中的生产流水线实例吗？流水线浮点加法器从图看出，浮点加减法由操作数检查、对阶操作、尾数操作、结果规格化及舍入处理共步完成，因此流水线浮点加法器可由个过程段组成。图仅示出了除操作数检查之外的段流水线浮点加法器框图。假设有两个规格化的浮点数x，y第章运算方法和运算器当此二数相加时，因x具有较小的阶码，首先应使它向Y对阶，从而得到x，然后尾数再相加，即其结果要进行规格化，将尾数向右移位，阶码增。即规格化的结果为。在图所示的流水线浮点加法器框图中，标出了上述例子在每一个过程段和锁存器L中保存的流水运算结果值。本章小结一个定点数由符号位和数值域两部分组成。按小数点位置不同，定点数有纯小数和纯整数两种表示方法。按IEEE标准，一个浮点数由符号位S、阶码E、尾数M三个域组成。其中阶码E的值等于指数的真值e加上一个固定偏移值。为了使计算机能直接处理十进制形式的数据，采用两种表示形式：字符串形式，主要用在非数值计算的应用领域；压缩的十进制数串形式，用于直接完成十进制数的算术运算。数的真值变成机器码时有四种表示方法：原码表示法、反码表示法、补码表示法、移码表示法。其中移码主要用于表示浮点数的阶码E，以利于比较两个指数的大小和对阶操作。字符信息属于符号数据，是处理非数值领域的问题。国际上采用的字符系统是七单位的ASCII码。直接使用西文标准键盘输入汉字，进行处理，并显示打印汉字，是一项重大成就。为此要解决汉字的输入编码、汉字内码、字模码等三种不同用途的编码。为运算器构造的简单性，运算方法中算术运算通常采用补码加、减法，原码乘除法或补码乘除法。为了运算器的高速性和控制的简单性，采用了先行进位、阵列乘除法、流水线等并行技术措施。运算方法和运算器是本章的重点。定点运算器和浮点运算器的结构复杂程度有所不同。早期微型机中浮点运算器放在CPU芯片外，随着高密度集成电路技术的发展，现已移至CPU内部。在冯诺依曼体系结构中，存储器是计算机系统的五大组成部件之一。早期的计算机系统只有单一的存储器存放为数不多的数据和指令。但是，随着软件复杂度的提高、多媒体技术和网络技术的普及，对存储器容量的要求不断提高。而微电子技术的发展又为大幅度提升存储器的存储密度提供了可能性，这反过来又促使对存储器容量的需求进一步提升。由于存储器的价格相对较高，而且在整机成本中占有较大的比例，因而从性能价格比的角度不能通过简单配置更大容量的存储器满足用户的需求。为此，必须使用某种策略解决成本和性能之间的矛盾。这一策略就是存储器分层，即利用不同容量、成本、功耗和速度的多种存储器构成有机结合的多级存储系统。构成多级存储系统的依据就是程序的局部性原理。程序的局部性原理统计表明，无论是访问存取指令还是存储数据，在一个较短的时间间隔内，程序所访问的存储器地址在很大比例上集中在存储器地址空间的很小范围内。这种在某一段时间内频繁访问某一局部的存储器地址空间，而对此范围以外的地址空间则很少访问的现象称为程序的局部性原理。程序的局部性可以从两个角度分析。时间局部性：最近被访问的信息很可能还要被访问。空间局部性：最近被访问的信息邻近地址的信息也可能被访问。多级存储系统的组成在CPU内部有少量的寄存器可以存储正在执行的指令或者正在参加运算的数据，寄存器的访问速度非常快，但数量较少。正在执行的程序的指令和数据存储在CPU能直接访问的存储器中，这种狭义的存储器就是内存储器。内存储器速度高、容量小、价格高，由半导体器件构成。为了扩大存储容量，在内存储器之外增加容量更大但访问速度稍慢的外存储器外存，或者称为辅助存储器辅存。相对而言，外存储器速度低、容量大、价格便宜，可以由磁盘存储器、光盘存储器等非半导体器件或者固态半导体存储器构成。CPU不能直接访问外存储器，外存储器的信息必须调入内存储器后才能由CPU处理。内存储器和外存储器构成了两级存储系统。随着半导体技术的发展，CPU和内存储器的工作速度都在提高，但CPU速度提高得更快，而更高速度的内存储器价格非常高。为此，人们在常规内存储器与CPU之间增加了速度更高但容量更小的半导体高速缓冲存储器，即cache，用于存放常规内存中正在使用的一些信息块的副本。常规的内存被称为主存。这样，内存储器就分为cache和主存两部分，由此构成了三级存储系统，其结构如图所示。在三级存储系统中，cache用于提升访问速度，以便使存取速度和CPU的运算速度相匹配；外存储器则主要解决存储容量问题，以满足计算机的大容量存储要求；主存储器介于cache与外存之间，要求选取适当的存储容量和存取周期，使它能容纳系统的核心软件和较多的用户程序。多级存储系统的出发点是提高存储系统的性能价格比，让整个存储系统在速度上接近cache，而在容量和价格上接近外存。对性能要求更高的系统还可以将cache分成一级Lcache和二级Lcache，甚至更多级。对存储容量要求更多的系统还可以用磁带等可更换介质实现无容量限制的存储。如图所示，在由cache、主存、磁盘和磁带构成的多级存储体系中，存储容量、存储密度逐级提升，访问速度和价格逐级降低，构成金字塔式的存储结构。构成存储器的存储介质，目前主要采用半导体器件和磁性材料。一个双稳态半导体电路或一个CMOS晶体管或磁性材料的存储元，均可以存储一位二进制代码。这个二进制代码位是存储器中最小的存储单位，称为存储位元。由若干存储位元组成一个存储单元，然后再由许多存储单元组成一个存储器。根据存储材料的性能及使用方法不同，存储器有各种不同的分类方法。存储介质作为存储介质的基本要求，必须有两个明显区别的物理状态，分别用来表示二进制的代码和。另外，存储器的存取速度又取决于这种物理状态的改变速度。目前使用的存储介质主要是半导体器件、磁性材料和光存储器。用半导体器件组成的存储器称为半导体存储器。用磁性材料做成的存储器称为磁表面存储器，如磁盘存储器和磁带存储器。光存储器是指只读光盘或者读写光盘。磁盘和光盘的共同特点是存储容量大，储存的信息不易丢失。存取方式如果存储器中任何存储单元的内容都能被随机存取，且存取时间和存储单元的物理位置无关，这种存储器称为随机存取存储器。如果存储器只能按某种顺序来存取，也就是说存取时间和存储单元的物理位置有关，这种存储器称为顺序存取存储器。如磁带存储器就是顺序存取存储器，它的存取周期较长。磁盘存储器则是半顺序直接存取存储器，沿磁道方向顺序存取，垂直半径方向随机存取。读写功能有些半导体存储器存储的内容在存储器工作过程中只能读出而不能写入，这种半导体存储器称为只读存储器ROM。在存储器工作过程中既能读出又能写入的半导体存储器称为读写存储器或随机存取存储器RAM。信息易失性断电后信息消失的存储器，称为易失性存储器。断电后仍能保存信息的存储器，称为非易失性存储器。半导体存储器中，RAM是易失性存储器，一旦掉电，储存信息全部丢失。而ROM是非易失性存储器。磁性材料做成的存储器是非易失性存储器。与CPU的耦合程度根据存储器在计算机系统中所处的位置，可分为内部存储器和外部存储器。内存又可分为主存和高速缓冲存储器。计算机系统的主存习惯上被分为RAM和ROM两类。RAM用来储存当前运行的程序和数据，并可以在程序运行过程中反复更改其内容。而ROM常用来储存不变或基本不变的程序和数据如监控程序、引导加载程序及常数表格等。RAM可以根据信息储存方法分为静态RAMSRAM和动态RAMDRAM。SRAM是用半导体管的“导通”或“截止”来记忆的，只要不掉电，储存信息就不会丢失。而DRAM的信息是用电荷储存在电容上，随着时间的推移，电荷会逐渐漏掉，储存信息也会丢失，因此要周期性地对其“刷新”。根据工艺和特性的不同，只读存储器又分为掩膜ROM、一次可编程ROMPROM和可擦除PROMEPROM，后者又分为紫外线擦除EPROMUVEPROM、电擦除EPROMEEPROM或EPROM和闪速Flash只读存储器。存放一个机器字的存储单元，通常称为字存储单元，相应的单元地址称为字地址。而存放一字节的单元，称为字节存储单元，相应的地址称为字节地址。编址方式是存储器地址的组织方式，一般在设计处理器时就已经确定了。如果计算机中编址的最小单位是字存储单元，则该计算机称为按字编址的计算机。如果计算机中编址的最小单位是字节，则该计算机称为按字节编址的计算机。一个机器字可以包含数字节，所以一个存储单元也可占用数个能够单独编址的字节地址。例如，一个位二进制的字存储单元包含两字节，当采用字节编址方式时，该字占两字节地址。当一个存储字的字长高于八位时，就存在一个存储字内部的多字节的排列顺序问题，第章存储系统其排列方式称为端模式。大端bigendian模式将一个字的高有效字节放在内存的低地址端，低有效字节放在内存的高地址端，而小端littleendian模式则将一个字的低有效字节放在内存的低地址端，高有效字节放在内存的高地址端。如图所示，如果一个位数ABCD按照大端模式存放在内存中，则最低地址存放最高有效字节A，最高地址存放最低有效字节D；而按照小端模式存放时，字节顺序刚好相反。常用的英特尔系列处理器采用小端模式。ARM系列的处理器一般默认采用小端模式，但可以随时在程序中进行大小端模式的切换。许多处理器允许在CPU每次访问存储器时动态确定读写的信息量大小，相应地选择不同的寻址宽度。例如，字寻址每次访存读写一个存储字，半字寻址每次访存读写半个存储字，字节寻址则每次访存读写一字节。内存储器的性能指标主要是存储容量和存取速度，后者通常可以用存取时间、存储周期和存储器带宽描述。存储容量存储容量指一个存储器中可存储的信息比特数，常用比特数bit或字节数B来表示，也可使用KB、MB、GB、TB等单位。其中KBB，MBB，GBB，TBB。为了清楚地表示其组织结构，存储容量也可表示为：存储字数存储单元数存储字长每单元的比特数。例如，Mbit容量的存储器可以组织成Mbit，也可组织成Kbit，或者Kbit。存取时间又称存储器访问时间，是从存储器接收到读写命令开始到信息被读出或写入完成所需的时间，取决于存储介质的物理特性和寻址部件的结构。存储周期存取周期是在存储器连续读写过程中一次完整的存取操作所需的时间，即CPU连续两次访问存储器的最小间隔时间。通常，存储周期略大于存取时间。存储器带宽数据传送速率，频宽单位时间里存储器所存取的信息量，通常以位秒或字节秒做度量单位。若系统的总线宽度为W位，则带宽W存取周期bits。静态随机存取存储器SRAM的优点是存取速度快，但存储密度和容量不如DRAM大。本节先讨论SRAM。图表示基本的静态存储元阵列。SRAM用锁存器触发器作为存储元。只要直流供电电源一直加在这个记忆电路上，它就无限期地保持记忆的状态或状态。如果电源断电，则存储的数据或就会丢失。任何一个SRAM，都有三组信号线与外部打交道：地址线，本例中有条，即A、A、A、A、A、A，它指定了存储器的容量是个存储单元。数据线，本例中有条，即IO、IO、IO和IO，说明存储器的字长是位，因此存储位元的总数是。控制线，本例中RW控制线，它指定了对存储器进行读RW高电平，还是进行写RW低电平。注意，读写操作不会同时发生。地址译码器输出有条选择线，称为行线，其作用是打开每个存储位元的输入与非门。当外部输入数据为时，锁存器便记忆了；当外部输入数据为时，锁存器便记忆了。目前的SRAM芯片采用双译码方式，以便组织更大的存储容量。这种译码方式的实质是采用了二级译码：将地址分成x向、y向两部分，第一级进行x向行译码和y向列译码的独立译码，然后在存储阵列中完成第二级的交叉译码。而数据宽度有位、位、位，甚至有更多的字节。图a表示存储容量为K位的SRAM逻辑结构图。它的地址线共条，其中x方向条AA，经行译码输出行，y方向条AA，经列译码输出列，存储阵列为三维结构，即行列位。双向数据线有条，即IOIO。向SRAM写入时，个输入缓冲器被打开，而个输出缓冲器被关闭，因而条IO数据线上的数据写入存储阵列中。从SRAM读出时，个输出缓冲器被打开，个输入缓冲器被关闭，读出的数据送到条IO数据线上。控制信号中CS是片选信号，CS有效时低电平，门G、G均被打开。OE为读出使能信号，OE有效时低电平，门G开启，当写命令WE时高电平，门G关闭，存储器进行读操作。写操作时，WE，门G开启，门G关闭。注意，门G和G是互锁的，一个开启时另一个必定关闭，这样保证了读时不写，写时不读。图b为K位SRAM的逻辑图。如图所示，读写周期波形图精确地反映了SRAM工作的时间关系。我们把握住地址线、控制线、数据线三组信号线何时有效，就能很容易看懂这个周期时序图。在读周期中，地址线先有效，以便进行地址译码，选中存储单元。为了读出数据，片选信号CS和读出使能信号OE也必须有效由高电平变为低电平。从地址有效开始经tAQ读出时间，数据总线IO上出现了有效的读出数据。之后CS、OE信号恢复高电平，tRC以后才允许地址总线发生改变。tRC时间即为读周期时间。在写周期中，也是地址线先有效，接着片选信号CS有效，写命令WE有效低电平，此时数据总线IO上必须置写入数据，在tWD时间段将数据写入存储器。之后撤销写命令WE和CS。为了写入可靠，IO线的写入数据要有维持时间thD，CS的维持时间也比读周期长。tWC时间称为写周期时间。为了控制方便，一般取tRCtWC，通常称为存取周期。当单个存储器芯片的容量不能满足系统要求时，需要把多片存储器芯片组合起来，组成更大容量的存储器。所需芯片数为：d设计要求的存储器容量已知芯片存储容量。位扩展若给定的芯片的字数地指数符合要求，但位数较短，不满足设计要求的存储器字长，则需要进行位扩展，让多片给定芯片并行工作。三组信号线中，地址线和控制线公用而数据线单独分开连接。字位扩展若给定的芯片的字数和位数均不符合要求，则需要先进行位扩展，再进行字扩展。SRAM的存储元是一个触发器，它具有两个稳定的状态。而动态随机存取存储器DRAM简化了每个存储元的结构，因而DRAM的存储密度很高，通常用作计算机的主存储器。作为开关使用，而所存储的信息或则是由电容器上的电荷量来体现当电容器充满电荷时，代表存储了，当电容器放电没有电荷时，代表存储了。写到存储元时，输出缓冲器关闭、刷新缓冲器关闭，输入缓冲器打开RW为低，输入数据DIN送到存储元位线上，而行选线为高，打开MOS管，于是位线上的高电平给电容器充电，表示存储了。写到存储元时，输出缓冲器和刷新缓冲器关闭，输入缓冲器打开，输入数据DIN送到存储元位线上；行选线为高，打开MOS管，于是电容上的电荷通过MOS管和位线放电，表示存储了。从存储元读出时，输入缓冲器和刷新缓冲器关闭，输出缓冲器读放打开RW为高。行选线为高，打开MOS管，若当前存储的信息为，则电容上所存储的送到位线上，通过输出缓冲器读出放大器发送到DOUT，即DOUT。读出过程破坏了电容上存储的信息，所以要把信息重新写入，即刷新。读出的过程中可以完成刷新。读出后，输入缓冲器关闭，刷新缓冲器打开，输出缓冲器读放打开，读出的数据DOUT又经刷新缓冲器送到位线上，再经MOS管写到电容上，存储元重写。注意，输入缓冲器与输出缓冲器总是互锁的。这是因为读操作和写操作是互斥的，不会同时发生。与SRAM相比，DRAM的存储元所需元件更少，所以存储密度更高。但是DRAM的附属电路比较复杂，访问时需要额外的电路和操作支持。与SRAM不同的是，图中增加了行地址锁存器和列地址锁存器。由于DRAM容量很大，地址线的数目相当多，为减少芯片引脚的数量，将地址分为行、列两部分分时传送。存储容量为M字，共需位地址线。此芯片地址引脚的数量为位，先传送行地址码AA，由行选通信号RAS打入到行地址锁存器；然后传送列地址码AA，由列选通信号CAS打入到列地址锁存器。片选信号的功能也由增加的RAS和CAS信号实现。DRAM读写时序图a为DRAM的读周期波形。当地址线上行地址有效后，用行选通信号RAS打入行地址锁存器；接着地址线上传送列地址，并用列选通信号CAS打入列地址锁存器。此时经行、列地址译码，读写命令RW高电平表示读，数据线上便有输出数据。图b为DRAM的写周期波形。此时读写命令RW低电平表示写，在此期间，数据线上必须送入欲写入的数据DIN或。从图中可以看出，每个读周期或写周期是从行选通信号RAS下降沿开始，到下一个RAS信号的下降沿为止的时间，也就是连续两个读写周期的时间间隔。通常为控制方便，读周期和写周期时间相等。DRAM存储位元是基于电容器上的电荷量存储信息的，DRAM的读操作是破坏性的，读操作会使电容器上的电荷流失，因而读出后必须刷新。而未读写的存储元也要定期刷新，因为电荷量会逐渐泄漏而减少。从外部看，刷新操作与读操作类似，只是刷新时无须送出数据，并且可以将一行的所有存储元同时刷新。现代的DRAM芯片通常会在一次读操作之后自动地刷新选中行中的所有存储位元。但是读操作出现的时间不是固定的，因此必须对DRAM进行周期性的刷新，以保持其记忆的信息不丢失。早期的DRAM需要由存储器控制器从外部向DRAM芯片送入刷新行地址并启动一次刷新，而现代的DRAM都支持自动刷新功能，由芯片内部提供刷新行地址。故图中增加了刷新计数器刷新行地址发生器和相应的控制电路。刷新计数器的宽度等于行地址锁存器的宽度。由于自动刷新不需要给出列地址，而行地址由片内刷新计数器自动生成，故可利用CAS信号先于RAS信号有效来启动一次刷新操作，此时地址线上的地址无效。当前主流的DRAM器件的刷新间隔时间刷新周期为ms。周期性的刷新操作是与读写操作交替进行的，所以通过选多路开关选择刷新行地址或正常读写的行地址。常用的刷新策略有集中式刷新和分散式刷新两种。例如，对于一片有行、刷新周期为ms的DRAM内存来说：在集中式刷新策略中，每一个刷新周期中集中一段时间对DRAM的所有行进行刷新。ms的刷新周期时间可以分为两部分：前一段时间进行正常的读写操作；后一段时间作为集中刷新操作时间，连续刷新行。由于刷新操作的优先级高，刷新操作时正常的读写操作被暂停，数据线输出被封锁。等所有行刷新结束后，又开始正常的读写周期。由于在刷新的过程中不允许读写操作，集中式刷新策略存在“死时间”。在分散式刷新策略中，每一行的刷新操作被均匀地分配到刷新周期时间内。由于ms除以约等于s，所以DRAM每隔s刷新一行。由于CPU送出的访存地址要分行地址和列地址两次送入DRAM芯片，并且DRAM还要实现定时刷新，因而使用DRAM做系统主存的系统通常要通过存储器控制器或者DRAM控制器产生DRAM访问和刷新时序控制与地址信号。DRAM存储密度高，大容量DRAM价格相对较低，因而适合用作系统主存。但是，DRAM的访问速度相对要低一些，提升其访问速度是改进系统性能的重要途径之一。近年来，人们在传统DRAM的基础上应用了诸多技术提升其访问速度。突发Burst，猝发访问指的是在存储器同一行中对相邻的存储单元进行连续访问的方式，突发长度可以从几字节到数千字节不等。由于访问地址是连续的，因而只需要向存储器发送一次访问地址。突发访问时先激活一行，然后按照一定的顺序依次发出列选择信号，访问相应的目标存储单元。突发方式可以消除地址建立时间及第一次存取之后的行、列线的预充电时间。在第一次存取后，一系列数据能够快速地输出。通过支持突发模式、快速页模式和扩展数据输出等方式，可以允许重复存取DRAM存储矩阵的行缓冲区而无须增加另外的行存取时间，以提升等效数据访问速度。传统的DRAM是异步工作的，处理器送地址和控制信号到存储器后，等待存储器进行内部操作选择行线和列线读出信号放大并送输出缓冲器等，处理器需等待一段存取延时时间后才能存取数据，因而必须消耗较长时间以确保数据传输可靠，影响了系统性能。在DRAM接口上增加时钟信号则可以降低存储器芯片与控制器同步的开销，优化DRAM与CPU之间的接口，这是同步DRAMSDRAM的最主要改进。SDRAM的特征SDRAM存储体的存储单元电路仍然是标准的DRAM存储体结构，只是在工艺上进行了改进，如功耗更低、集成度更高等。与传统的DRAM相比，SDRAM在存储体的组织方式和对外操作上作了重大改进。图显示了SDRAM的逻辑结构，其主要特性如下。同步操作处理器访问SDRAM时，SDRAM的所有输入信号均在系统时钟CLK的上升沿被存储器内部电路锁定；SDRAM的所有输出信号均在系统时钟CLK的上升沿被输出。这样做的目的是使SDRAM的操作在系统时钟CLK的控制下，与系统的高速操作严格同步进行。CKE为时钟使能信号，只有该信号有效时，时钟输入才能作用于SDRAM芯片。多存储体配置为了进一步提高存取速度和减少内部操作冲突，SDRAM的存储体被拆分为多个相互独立的存储体bank。这种内部组织结构可以支持流水线方式的并行操作。各存储体可同时和独立工作，也可选择顺序工作或交替工作。例如，当一个存储体正在刷新时，另一个存储体可以进行正常的读写操作，从而提高存取速度。通常由片内地址线的最高一位或若干位选择存储体。命令控制传统的异步DRAM是根据控制信号的电平组合选择工作方式的，而SDRAM将一组控制信号的电平编码组合为“命令”。例如，RAS、CAS、WE、CS以及特定地址线的不同组合分别代表激活存储体active，所有存储体在读写之前都必须被激活、读、写、预充等不同的命令。模式寄存器在SDRAM加电后必须先对模式寄存器进行设置，控制SDRAM工作在不同的操作模式下。在模式寄存器中可以设置CAS延迟、突发类型、突发长度和测试模式等。表比较了传统异步DRAM和SDRAM的功能差异。SDRAM的控制方式下面以读周期为例说明SDRAM的控制方式。图对比了异步DRAM和SDRAM的读操作时序。在SDRAM操作过程中，所有的动作都是以时钟信号为依据的。在T时钟的上升沿图中处，激活命令ACT和行地址首先被锁存，表明开始一次存取操作。而异步DRAM并没有时钟信号，对应的动作为RAS有效低。第章存储系统在T时钟的上升沿处，读命令和列地址被锁存，表明当前是一次读操作。对应异步DRAM的CAS有效低。此后，SDRAM将完成内部准备操作，并在个时钟周期之后送出数据。从列地址被锁存到数据有效输出的时间间隔称为CAS延迟CL，图中CL。在T时钟的上升沿处，控制器送入预充命令。对应异步DRAM的RAS和CAS无效变高。SDRAM的操作时序都是确定的，在系统时钟控制下，CPU向SDRAM送出地址和控制命令后，需等待事先确定好的一定数量的时钟周期。在此期间，SDRAM完成读或写的内部操作如行列选择、地址译码、数据读出或写入、数据放大等，处理器则可照常安全地执行其他任务，不必单纯等待，以此来提高系统效率。SDRAM的命令图给出了SDRAM读和写命令操作的时序，可以看出SDRAM的命令发送方式。在T时钟的上升沿，控制器发出存储体A的激活命令。存储体激活命令通过在时钟上升沿发出下列信号组合发出：CS、RAS、CAS、WE，地址线A选择存储体A。在T时钟的上升沿，控制器发出存储体A的读命令。读命令通过在时钟上升沿发出下列信号组合发出：CS、RAS、CAS、WE。经过个时钟周期的内部操作，数据在T时钟的上升沿开始送出。此例中，突发长度BL，故在随后的四个时钟周期内分别送出一个数据字。在T时钟的上升沿，DQ输出被设置为高阻状态。在T时钟的上升沿，控制器发出存储体A的写命令。写命令通过在时钟上升沿发出下列信号组合发出：CS、RAS、CAS、WE。在T时钟的上升沿开始下一次读操作。双倍数据率SDRAMDDRSDRAM在SDRAM出现之后，又出现了双数据率的DDRSDRAM，故后来将单数据率的SDRAM称为SDRSDRAM。狭义的SDRAM仅指SDRSDRAM。DDRSDRAM沿袭了SDRSDRAM内存的制造体系，又能够提供更快的操作速度和更低的功耗。SDRAM仅能在时钟上升沿传输数据，而DDRSDRAM的最大特点便是在时钟的上升沿和下降沿都能传输数据。双倍数据率结构本质上是一个n预取结构，如图所示。内部总线宽度是外部总线宽度的两倍，从存储矩阵到IO缓冲区每个时钟周期传输n比特数据，从IO缓冲区到数据总线则在时钟触发沿的上、下沿都能进行数据传输。差分时钟也是DDRSDRAM的一个必要设计。由于数据是在CK的上下沿触发，因而传输周期缩短了一半，因此必须要保证传输周期的稳定，以确保数据的正确传输。因为温度和电阻特性的改变等原因，CK上下沿间距可能发生变化，此时与其反相的CK就起到触发时钟校准的作用。在第一代DDRSDRAM出现之后，相继又出现了DDR、DDR和DDR等SDRAM技术。这些技术的主要改进点在于提升存储矩阵输出的数据率。例如，DDR技术采用n预取结构，将数据总线的时钟频率提升至内部传输频率的倍，从而使外部总线数据率比DDRSDRAM提升一倍。类似地，DDRSDRAM则采用n预取结构。DDRSDRAM仍然采用n预取，但是允许使用两个或者四个存储体组，每个存储体组都有独立的激活、读取、写入和刷新操作。因此，如果设计两个独立的存储体组，相当于将内存预取值提高到了n；如果是四个独立的存储体组，则预取值提高到了n。DRAM读写校验DRAM通常用作主存储器，其读写操作的正确性与可靠性至关重要。为此除了正常的数据位宽度，还增加了附加位，用于读写操作正确性校验。增加的附加位也要同数据位一起写入DRAM中保存。显然这增加了DRAM的位成本。图表示DRAM正确性校验的概念示意图。最简单的校验是奇偶校验，除了数据位外只需增加位附加位k，进行奇校验或偶校验即可。图中的F部分为进行奇校验或偶校验的异或运算电路，如果存储器读写正确，那么写入存储器前与读出存储器后两部分的F运算结果应该一致，否则给出错误信号。奇偶校验只能检出位错误，不能纠正错误。但是由于技术简单，成本较低，所以在早期主存储器中常常使用。为了能纠正错误，纠错码设成k位，如果数据字为m位，则实际存储的字长为mk位。最简单的纠错码是汉明码。为了能纠错，汉明码要求的校验位长度如表所示。由表可见，数据位位时，附加的校验码要求为位，存储器字长变成位，位成本增加了。但是数据位位时，校验码要求为位，字长变成位，位成本只增加约。在汉明码校验中，F电路的运算要比奇偶校验复杂，如位数据时，F部分有位，所以有个异或运算表达式。纠正器电路部分则是新、老校验位比较时形成的故障字，它也通过异或运算形成。CDRAMCDRAMCachedDRAM是一种附带高速缓冲存储器的动态存储器，它是在常规的DRAM芯片封装内又集成了一个小容量SRAM作为高速缓冲存储器，从而使DRAM芯片的访问速度得到显著提升。CDRAM芯片的结构图为M位CDRAM芯片的结构框图。一片位的SRAM构成cache，保存最近访问的一行数据。另外增加了最后读出行地址锁存器和行地址比较器，如果后续访问的数据就在最近访问过的行中，则可直接从cache中读出数据而无须访问DRAM存储体。访问M位的CDRAM芯片需位内存地址。在行选通信号RAS作用下，内存地址的高位行地址经AA地址线输入，并被锁存在行地址锁存器和最后读出行地址锁存器中。在DRAM阵列的行中，此地址指定行的全部位数据被读取到SRAM中暂存。然后，内存地址的低位列地址在列选通信号CAS有效时经AA地址线输入，并被锁存到列地址锁存器中。如果是首次读操作，则在读命令信号有效时，SRAM中个位组内的某一个位组被此列地址选中，经DD送出芯片。下一次读取时，输入的位行地址立即与最后读出行地址锁存器的内容进行比较：若相符则SRAM命中，由输入的列地址直接从SRAM中选择某一位组送出即可；只在比较不相符时，才需要再次访问DRAM阵列，更新SRAM和最后读出行地址锁存器的内容，并送出指定的位组。CDRAM在常规DRAM的基础上增加了一点成本，但是有几个明显的优点。一是突发操作的速度高，如果连续访问的地址的高位相同属于同一行地址，那么只需连续变动位列地址就能从SRAM中快速读出数据。二是在SRAM读出期间可同时对DRAM阵列进行刷新。三是允许在写操作完成的同时启动同一行的读操作，因为芯片内的数据输出路径由SRAM到IO与数据输入路径由IO到读出放大和列写选择是分开的。CDRAM存储模块片容量为M位的CDRAM芯片可以组成M位MB的存储模块，如图所示。个芯片共用片选信号Sel、行选通信号RAS、刷新信号Ref和地址输入信号AA。每两片M位的CDRAM芯片的列选通信号CAS接在一起，形成一个M位MB的片组。个片组组合成一个M位的存储模块。数据总线宽度为位。为了CPU与存储器交换数据方便，每次访存时可以由CPU选择实现字存取位、半字存取高位或低位或字节存取任意位。由于存储器按字节编址，因而每次访存数据总线上可能会传输个地址字、个地址半字或者个地址字节的数据。为此，CPU送出的地址线中最低两位的A和A并不送出，而是送出由连续四字节组成的一个位字的字地址字地址的最低两位固定为，外加个字节低位地址排列关系。该模块按小端模式安排地址，故每个字的最低有效字节与数据线DD对应安排在低地址最低两位地址为，而每个字的最高有效字节与数据线DD对应安排在高地址最低两位地址为。个片组的列选通信号CASCAS分别与CPU送出的个字节允许信号BEBE相对应。当某模块被选中并完成位存取时，此模块的个CDRAM芯片同时动作。个位数据IO端口DD同时与位数据总线交换数据，完成一次位的存取。此位存储字的模块内地址对应系统存储地址中的AA。这位地址分为位的行地址和位的列地址，分别在RAS和CAS有效时同时输入到个芯片的地址引脚端。系统存储地址的最高两位A、A作为模块选择地址，译码输出可以分别驱动个这样的MB模块的Sel信号。即系统可配置个这样的模块，存储器容量达到MB。上述存储模块具有高速的突发存取能力。如果连续访问的数据块的高位地址相同同一行，那么只是第一个存储字需要一个完整的存取周期如个总线时钟周期，而后续存储字的存取因内容已在SRAM中，故存取周期大为缩短如个总线时钟周期。这样，读取个位字只使用了个总线时钟周期。存储器写入也有相似的速度提高。半导体只读存储器ROM最大的特点是其非易失性，其访问速度比RAM稍低，可以按地址随机访问并在线执行程序，因而在计算机中用于储存固件、引导加载程序、监控程序及不变或很少改变的数据。“只读”的意思是在其工作时只能读出，不能写入。早期的只读存储器中存储的原始数据必须在其工作以前离线存入芯片中，现代的许多只读存储器都能够支持在线更新其存储的内容，但更新操作与RAM的写操作完全不同，不仅控制复杂，而且耗时长，更新所需的时间比ROM的读操作时间长很多，可以重复更新的次数也相对较少。因此，这种更新ROM存储内容的操作实际上不是“写入”，而是编程。狭义的ROM仅指掩模ROM。掩模ROM实际上是一个存储内容固定的ROM，由半导体生产厂家根据用户提供的信息代码在生产过程中将信息存入芯片内。一旦ROM芯片做成，就不能改变其中的存储内容。掩模ROM一般用于存储广泛使用的具有标准功能的程序或数据，或用户定做的具有特殊功能的程序或数据，当然这些程序或数据均转换成二进制码。由于成本很低，在没有更新需求的大批量的应用中适宜使用掩模ROM。为了让芯片的用户能更新ROM中存储的内容，可以使用可编程ROMPROM。一次性编程ROM、紫外线擦除PROM、EPROM和闪速存储器均可由用户编程。狭义的PROM即指一次性编程ROMOTPROM，只能编程一次。紫外线擦除PROMUVEPROM通常简称EPROM，器件的上方有一个石英窗口，通常将其从电路板上的插座上拔下后，在专用的擦除器中使用一定波长的紫外线照射数分钟至十余分钟即可擦除存储的信息，且可在通用编程器或电路板上实现多次编程和验证。电可擦PROMEEPROM，EPROM采用电擦除，因而不需要离线擦除，且擦除速度快，可以单字节编程和擦除或者擦除块尺寸很小，使用更方便。EPROM通常容量比较小，单位成本高，但可重复擦除的次数多，一般在一百万次左右，一般用于存储偶尔需要更新的系统配置信息、系统参数、加密保护数据或历史信息等。许多单片机或者简单电子模块往往会内置EPROM芯片。常规并行总线EPROM访问速度快，接口简单，但引脚数量多，封装尺寸较大，故近年来更多地被串行EPROMSEEPROM或闪存取代。常见的串行EPROM支持SPI、IC、Microwire或Wire等至线的串行总线，芯片封装只需个或者更少的引脚。闪速Flash存储器闪存也属于电可擦、可在线编程的非易失性只读存储器。Flash意为擦除速度高，其擦除时间远高于传统的UVEPROM和EPROM。闪速存储器的存储密度高，工作速度快，擦除块尺寸较大通常在字节以上，可擦除的次数相对较少NOR闪存为一万到十万次。闪存自世纪年代末出现以来，应用已经极为普遍，在很多情况下取代了传统的其他ROM。根据存储元工作原理和制造工艺的不同，闪存可以分为NOR技术、DINOR技术、AND技术和NAND技术等不同类别。其中应用最普遍的是NOR技术和NAND技术。NOR闪存通常被称为线性闪存，最早由英特尔和AMD等公司生产。相对于其他技术的闪存，其特点是：可以像SRAM和传统ROM那样随机读出任意地址的内容，读出速度高；存储在其中的指令代码可以直接在线执行；可以对单字节或单字进行编程在重新编程之前需要先进行擦除操作；以区块sector或芯片为单位执行擦除操作；拥有独立的数据线和地址线，因而接口方式与SRAM相似；信息存储的可靠性高。因此，NOR闪存更适用于擦除和编程操作较少而直接执行代码的场合，尤其是纯代码存储应用。由于擦除和编程速度相对较慢，且区块尺寸较大，NOR闪存不太适合纯数据存储和文件存储等应用场景。NOR闪存可在线“写入”数据，又具有ROM的非易失性，因而可以取代全部的UVEPROM和大部分的EPROM，存储监控程序、引导加载程序等不经常改变的程序代码，或者储存在掉电时需要保持的系统配置等不常改变的数据。NAND闪存通常被称为非线性闪存，最早由三星和东芝等公司生产。相对于其他技术的闪存，其特点是：每次读出以页page为单位，因而属于非随机访问的存储器；存储在其中的指令代码不能够直接在线执行；以页为单位进行编程操作；以数十页组成的块block为单位进行擦除操作；快速编程和快速擦除；数据线、地址线和控制线复用在同一组总线信号上，故其接口方式与传统ROM不同；位成本低、位密度高；由于工艺的限制，存在较高的比特错误率，通常需要软件处理坏块。NAND闪存不能够随机读出，所以一般不能直接用于存储在线执行的代码；但是由于其存储密度高，价格低，通常容量较大，增加NAND闪存控制器后也可用于程序代码存储。由于NAND闪存有倍于NOR闪存的可擦除次数，故适用于大容量存储设备，如存储卡、优盘USB闪存盘、固态盘等应用。由于NAND闪存的数据存取无机械运动，可靠性高，存取速度快，体积小巧，因而已经部分取代了磁介质辅存。NOR闪存的外部接口与逻辑结构下面以飞索公司现赛普拉斯公司生产的SALJ系列Mbit闪存为例，说明NOR闪存的接口和工作方式。图a给出了其外部引脚。该芯片有两种工作模式：字模式组织成Mbit，需要AA共位地址，DQDQ共位数据线；字节模式组织成Mbit，需要AA共位地址，DQDQ共位数据线。引脚BYTE代表低电平有效为低时选择字节模式，为高时选择字模式。此外，CE为片选信号线，OE为输出允许线，WE为写使能信号。闪存芯片内部需要有状态机支持其操作，复位信号RESET可以让其通过硬件复位恢复到初始状态。由于闪存经常存放系统上电引导程序，为了防止误操作或其他原因导致存储的信息被删除，WP信号为低电平时可以让芯片处于写保护状态。为了获取闪存内部的工作状态，可以读取RYBYReadyBusy信号的电平：高表示芯片准备好接收新的命令，低表示芯片内部正忙于处理上一操作。从图b的逻辑结构图可以看出，闪存芯片的核心仍然是存储矩阵。该芯片由单一V电源供电，内部集成了编程电压发生器和擦除电压发生器，无需外接高电压电源。与传统只读存储器不同，闪存可以通过命令寄存器接收外部命令。而且，闪存内部有状态机，需要有状态控制逻辑，并且通过定时器给出内部操作定时。NOR闪存的区块划分SALJ是一种区块sector式闪存，外部按Mbit或Mbit组织，内部组织为个区块。表给出了底部引导区版本的区块地址表，其低地址区通常存放系统引导程序和一些参数，因而区块尺寸较小并且可以附加特定的写保护措施，前个区块大小分别为KB、KB、KB、KB。SASA大小均为KB。每个存储单元的地址由高位的区块地址A以上和低位的区块内偏移地址两个字段组成，两个字段的长度与区块尺寸相关。表SALJ的区块地址表底部引导区NOR闪存的总线操作与工作方式表给出了SALJ的部分总线操作。NOR闪存的外部接口信号线与SRAM类似，但除了读出和编程写入这些常规的PROM操作外，NOR闪存还具有内部控制寄存器和状态寄存器，可以通过“命令写”和“状态读”操作进行灵活的控制。为了在保持与传统ROM兼容的情况下实现更多新功能，闪存内部通过状态机控制其操作状态。WP时，最外区块保持保护状态；WP时，最外区块的保护状态由先前的保护去保护状态决定。RESET信号为低时为硬件复位。上电或复位之后，芯片内部的状态机使器件自动进入“读存储矩阵”操作状态。在该状态下，NOR闪存的读出操作与传统ROM芯片相同，只需给出片选信号和一定的地址并使读信号输出允许线有效即可。因而其读操作与传统ROM完全兼容。如果需要执行传统ROM不支持的其他操作，需要执行特定的命令序列，使NOR闪存转入其他状态，进行芯片擦除、区块擦除、编程写入、软件数据保护或者读标识码等操作。为防止状态机的误动作，闪存的各种命令是以“向特定地址写入特定内容的命令序列”方式定义的。命令寄存器本身并不占据单独的存储器片内地址，而是通过特定的地址和特定的数据组合给出不同的命令。表中的“写”操作是指总线上的写入操作，并非直接写入存储矩阵，而是写命令寄存器的“写周期”操作。不同命令通常要占用长短不一的若干个总线写周期。在每一次命令操作之后，可以查询状态寄存器，以使CPU能够了解命令的执行情况。不同厂商生产的芯片支持的命令序列不同，常见的有AMDFujitsu的标准命令集和IntelSharp的扩展命令集。表给出了字模式下SALJ使用的标准命令集中的部分命令。表中地址和数据均为十六进制。其中的地址是指芯片地址线上应该给出的地址模式，形式上为片内偏移地址，但并非向存储矩阵的相应单元写入，而是与其他地址和数据模式组合代表特定命令。例如，芯片擦除命令将所有存储元擦除到存储的状态。当芯片在连续的个总线写周期中依次从其地址线数据线上接收到AA、AA、、AA、AA和这组信息时，将会把内部状态机转到“整片擦除”状态，并启动整片擦除操作。区块擦除操作与此类似，但最后一个写周期需给出欲擦除的区块的地址，且数据线送入，芯片收到此命令后将启动该区块的擦除操作。编程命令需要四个写总线周期，依次送入AA、AA、A和欲编程地址欲编程数据后，芯片将转入“编程”状态。需要注意的是，无论是擦除操作还是编程操作都不是能在接到命令后立即完成的，闪存收到擦除或编程命令后需要执行内嵌擦除编程算法进行费时的内部复杂操作才有可能完成操作任务。在闪存完成上一命令之前，不能接收新的命令。为了让CPU知晓闪存的内部操作是否完成，芯片支持多种编程擦除状态判定方法。例如，通过通用IO引脚读取RYBY信号的电平可以获知闪存是处于“准备好”状态还是“忙”状态。还有一种常用的判定编程和写入的状态的方法称为datapolling，如图所示。在发出编程或擦除命令之后，对欲编程的存储单元地址或者欲擦除的任意存储单元的地址VA发出读命令，并检查数据线返回的状态值。设欲向该地址编程的数据的第七位为D，若编程未完成时，读出的DQD；而编程结束后，读出的DQD。擦除操作可以看作写全的操作，故擦除过程中，DQ；擦除完成时，DQ。闪存内部状态机设置了超时时间，以判断编程或擦除是否因错误而超时。超时时，数据线上的DQ输出为，表示编程或擦除操作失败。在超时之前，可以通过不断读取该地址的方式轮询闪存的状态，直到DQ翻转。由于在超时的瞬间DQ仍可能翻转，故可以在超时后最后读取一次状态字，判断编程或者擦除操作是否失败。编程或擦除失败后只能通过复位命令返回读存储矩阵状态。从NOR闪存的编程和擦除方式可以看出闪存与RAM的差异。闪存的存储单元在编程之前需首先擦除；闪存发出编程命令也比RAM发出写命令复杂许多；闪存编程的速度远低于RAM的写入速度；闪存的读出速度也远低于RAM。可见，虽然闪存具有非易失性并可在线编程，但仍然属于ROM，一般情况下闪存不能取代RAM。CPU和主存储器之间在速度上是不匹配的，这种情况成为限制高速计算机设计的主要问题。为了提高CPU和主存之间的数据交换速率，可以在不同层次采用不同的技术加速存储器访问速度：芯片技术提高单个芯片的访问速度。可以选用更高速的半导体器件，或者改善存储芯片内部结构和对外接口方式。例如，前述的突发传输技术、同步DRAM技术和CDRAM技术等。结构技术为了解决存储器与CPU速度不匹配问题，需要改进存储器与CPU之间的连接方式，加速CPU和存储器之间的有效传输。例如，采用并行技术的双口存储器甚至是多口存储器，以及多体交叉存储器，都可以让CPU在一个周期中访问多个存储字。系统结构技术这是从整个存储系统的角度采用分层存储结构解决访问速度问题。例如，增加cache，采用虚拟存储器等。本节讲授双端口存储器和多体交叉存储器，前者采用空间并行技术，后者采用时间并行技术。早期的计算机系统以CPU为中心。机器内部各个部件之间的信息传递都受CPU控制，IO设备与主存之间的信息交换也经过CPU的运算器。这种结构严重影响了CPU效能的发挥，故以内存为中心的系统逐渐取代了以CPU为中心的结构。这种以内存为中心的结构要求不仅CPU可以访问主存，而且其他部件如IO设备也可不经CPU而直接与主存交换信息。这样，多个部件都可以与主存交换信息，使主存的访问次数明显增多。而传统的存储器在任一时刻只能进行一个读或写操作，不能被多个部件同时访问。为了进一步扩展主存的信息交换能力，提出了多口存储器结构。双端口存储器的逻辑结构双端口存储器由于同一个存储器具有两组相互独立的读写控制电路而得名。由于进行并行的独立操作，因而是一种高速工作的存储器，在科研和工程中非常有用。图为双端口存储器IDT的逻辑框图。这是一个存储容量为K字长位的SRAM，它提供了两个相互独立的端口，即左端口和右端口。它们分别具有各自的地址线AA、数据线IOIO和控制线RW、CE、OE、BUSY，因而可以对存储器中任何位置上的数据进行独立的存取操作。图中，字母符号下标中L表示左端口，R表示右端口，LB表示低位字节，UB表示高位字节。事实上双端口存储器也可以由DRAM构成。无冲突读写控制当两个端口的地址不相同时，在两个端口上进行读写操作，一定不会发生冲突。当任一端口被选中驱动时，就可对整个存储器进行存取，每一个端口都有自己的片选控制CE和输出驱动控制OE。读操作时，端口的OE低电平有效打开输出驱动器，由存储矩阵读出的数据就出现在IO线上。表列出了无冲突的读写条件，表中符号代表高电平，为低电平，为任意，Z为高阻态。有冲突的读写控制当两个端口同时存取存储器同一存储单元，而且至少有一个端口为写操作时，便发生读写冲突。为解决此问题，特设置了BUSY标志。在这种情况下，片上的判断逻辑可以决定对哪个端口优先进行写操作，而对另一个被延迟的端口置BUSY标志BUSY变为低电平，即暂时关闭此端口。换句话说，写操作对BUSY变为低电平的端口是不起作用的。一旦优先端口完成写操作，才将被延迟端口的BUSY标志复位BUSY变为高电平，开放此端口，允许延迟端口进行写操作。总之，当两个端口均为开放状态BUSY为高电平且存取地址相同时，发生写冲突。此时仲裁逻辑可以根据两个端口的地址匹配或片选使能信号有效的时间决定对哪个端口进行存取。判断方式有以下两种。如果地址匹配且在CE之前有效，片上的控制逻辑在CEL和CER之间进行判断来选择端口CE判断。如果CE在地址匹配之前变低，片上的控制逻辑在左、右地址间进行判断来选择端口地址有效判断。无论采用哪种判断方式，延迟端口的BUSY标志都将置位而关闭此端口，而当允许存取的端口完成操作时，延迟端口BUSY标志才进行复位而打开此端口。表列出了左、右端口进行读写操作时的功能判断。存储器的模块化组织一个由若干个模块组成的主存储器是线性编址的。这些地址在各模块中如何安排，有两种方式：一种是顺序方式，一种是交叉方式。在常规主存储器设计中，访问地址采用顺序方式，如图a所示。为了说明原理，设存储器容量为字，分成M、M、M、M四个模块，每个模块存储个字。访问地址按顺序分配给一个模块后，接着又按顺序为下一个模块分配访问地址。这样，存储器的个字可由位地址寄存器指示，其中高位选择个模块中的一个，低位选择每个模块中的个字。双端口存储器读写时序可以看出，在顺序方式中某个模块进行存取时，其他模块不工作。而某一模块出现故障时，其他模块可以照常工作。另外通过增添模块来扩充存储器容量也比较方便。但顺序方式的缺点是各模块一个接一个串行工作，因此存储器的带宽受到了限制。图b表示采用交叉方式寻址的存储器模块化组织示意图。存储器容量也是个字，也分成个模块，每个模块个字。但地址的分配方法与顺序方式不同：先将个线性地址、、、依次分配给M、M、M、M模块，再将线性地址、、、依次分配给M、M、M、M模块直到全部线性地址分配完毕为止。当存储器寻址时，用地址寄存器的低位选择个模块中的一个，而用高位选择模块中的个字。可以看出，用地址码的低位字段经过译码选择不同的模块，而高位字段指向相应模块内的存储字。这样，连续地址分布在相邻的不同模块内，而同一个模块内的地址都是不连续的。因此，从定性分析，对连续字的成块传送，交叉方式的存储器可以实现多模块流水式并行存取，大大提高存储器的带宽。由于CPU的速度比主存快，假如能同时从主存取出n条指令，这必然会提高机器的运行速度。多模块交叉存储器就是基于这种思想提出来的。多模块交叉存储器的基本结构图示出四模块交叉存储器结构框图。主存被分成个相互独立、容量相同的模块M、M、M、M，每个模块都有自己的读写控制电路、地址寄存器和数据寄存器，各自以等同的方式与CPU交换信息。在理想情况下，如果程序段或数据块都是连续地在主存中存取，那么将大大提高主存的访问速度。CPU同时访问四个模块，由存储器控制部件控制它们分时使用数据总线进行信息传递。这样，对每一个存储模块来说，从CPU给出访存命令直到读出信息仍然使用了一个存取周期时间；而对CPU来说，它可以在一个存取周期内连续访问四个模块。各模块的读写过程将重叠进行，所以多模块交叉存储器是一种并行存储器结构。下面进行定量分析。设模块字长等于数据总线宽度，又假设模块存取一个字的存储周期为T，总线传送周期为，存储器的交叉模块数为m，那么为了实现流水线方式存取，应当满足Tm即成块传送可按间隔流水方式进行，也就是每经时间延迟后启动下一个模块。图示出了m的流水线方式存取示意图。m的最小值mminT称为交叉存取度。交叉存储器要求其模块数必须大于或等于mmin，以保证启动某模块后经m时间再次启动该模块时，它的上次存取操作已经完成。这样，连续读取m个字所需的时间为tTm而顺序方式存储器连续读取m个字所需时间为tmT图四模块交叉存储器结构框图图流水线方式存取示意图从以上定量分析可知，由于tt，交叉存储器的带宽确实大大提高了。二模块交叉存储器举例图表示二模块交叉存储器方框图。每个模块的容量为MBK位，由片K位的DRAM芯片组成位扩展。二模块的总容量为MBK位。数据总线宽度为位，地址总线宽度为位。为简化，将片DRAM芯片用一个K位的长条框表示。DRAM有读周期、写周期和刷新周期。存储器读写周期时，在行选通信号RAS有效下输入行地址，在列选通信号CAS有效下输入列地址，于是芯片中行列矩阵中的某一位组被选中。如果是读周期，此位组内容被读出；如果是写周期，将总线上数据写入此位组。刷新周期是在RAS有效下输入刷新地址，此地址指示的一行所有存储元全部被再生。刷新周期比读写周期有高的优先权，当对同一行进行读写与刷新操作时，存储控制器对读写请求予以暂存，延迟到此行刷新结束后再进行。由图可看出：位的存储器物理地址指定的系统主存总容量可达MB，按“存储体块字”进行寻址。其中高位用于存储体选择字扩展，个存储体为MB，全系统有个MB存储体。AA的位地址用于模块中K个存储字的选择。读写周期时，它们分为行、列地址两部分送至芯片的位地址引脚。一个模块内所有芯片的RAS引脚连接到一起，模块由RAS驱动，模块由RAS驱动。在读写周期时，主存地址中A，RAS有效；A，RAS有效。因此A用于模块选择，连续的存储字位交错分布在两个模块上，偶字地址在模块，奇字地址在模块。CPU给出的主存地址中没有A和A位，替代的是字节允许信号BEBE，以允许对AA指定的存储字中的字节或字完成读写访问。当BEBE全有效时，即完成字存取。图中没给出译码逻辑，只暗示了BEBE与CASCAS的对应关系。DRAM需要逐行定时刷新，以使不因存储信息的电容漏电而造成信息丢失。另外，DRAM芯片的读出是一种破坏性读出，因此在读取之后要立即按读出信息予以充电再生。这样，若CPU先后两次读取的存储字使用同一RAS选通信号，CPU在接收到第一个存储字之后必须插入等待状态，直至前一存储字再生完毕才开始第二个存储字的读取。为避免这种情况，模块由RAS驱动，模块由RAS驱动。图是无等待状态成块存取示意图。由于采用m的交叉存取度的成块传送，两个连续地址字的读取之间不必插入等待状态，这称为零等待存取。cache的功能cache是一种高速缓冲存储器，是为了解决CPU和主存之间速度不匹配而采用的一项重要技术。其原理基于程序运行中具有的空间局部性和时间局部性特征。如图所示，cache是介于CPU和主存M之间的小容量存储器，但存取速度比主存快，容量远小于主存。cache能高速地向CPU提供指令和数据，从而加快了程序的执行速度。从功能上看，它是主存的缓冲存储器，由高速的SRAM组成。为追求高速，包括管理在内的全部功能由硬件实现，因而对程序员是透明的。当前，随着半导体器件集成度的进一步提高，可以将小容量的cache与CPU集成到同一芯片中，其工作速度接近于CPU的速度，从而组成两级以上的cache系统。cache的基本原理cache除包含SRAM外，还要有控制逻辑。若cache在CPU芯片外，它的控制逻辑一般与主存控制逻辑合成在一起，称为主存chace控制器；若cache在CPU内，则由CPU提供它的控制逻辑。CPU与cache之间的数据交换是以字为单位，而cache与主存之间的数据交换是以块为单位。一个块由若干字组成，是定长的。当CPU读取内存中一个字时，便发出此字的内存地址到cache和主存。此时cache控制逻辑依据地址判断此字当前是否在cache中：若是，则cache命中，此字立即传送给CPU；若非，则cache缺失未命中，用主存读周期把此字从主存读出送到CPU，与此同时，把含有这个字的整个数据块从主存读出送到cache中。图示出了cache的原理图。假设cache读出时间为ns，主存读出时间为ns。存储系统是模块化的，主存中每个K模块和容量字的cache相联系。cache分为行，每行个字W。分配给cache的地址存放在一个相联存储器CAM中，它是按内容寻址的存储器。当CPU执行访存指令时，就把所要访问的字的地址送到CAM；如果W不在cache中，则将W从主存传送到CPU。与此同时，把包含W的由前后相继的个字所组成的一行数据送入cache，替换原来cache中的一行数据。在这里，由始终管理cache使用情况的硬件逻辑电路来实现替换算法。cache的命中率从CPU来看，增加cache的目的，就是在性能上使主存的平均读出时间尽可能接近cache的读出时间。为了达到这个目的，在所有的存储器访问中由cache满足CPU需要的部分应占很高的比例，即cache的命中率应接近于。由于程序访问的局部性，实现这个目标是可能的。在一个程序执行期间，设Nc表示cache完成存取的总次数，Nm表示主存完成存取的总次数，h定义为命中率，则有若tc表示命中时的cache访问时间，tm表示未命中时的主存访问时间，h表示未命中率缺失率，则cache主存系统的平均访问时间ta为tahtchtm我们追求的目标是，以较小的硬件代价使cache主存系统的平均访问时间ta越接近tc越好。设rtmtc表示主存与cache的访问时间之比，e表示访问效率，则有由式看出，为提高访问效率，命中率h越接近越好。r值以为宜，不宜太大。命中率h与程序的行为、cache的容量、组织方式、块的大小有关。cache结构设计必须解决的问题从cache的基本工作原理可以看出，cache的设计需要遵循两个原则：一是希望cache的命中率尽可能高，实际应接近于；二是希望cache对CPU而言是透明的，即不论是否有cache，CPU访存的方法都是一样的，软件不需增加任何指令就可以访问cache。解决了命中率和透明性问题，就CPU访存的角度而言，内存将具有主存的容量和接近cache的速度。为此，必须增加一定的硬件电路完成控制功能，即cache控制器。在设计cache结构时，必须解决几个问题：主存的内容调入cache时如何存放？访存时如何找到cache中的信息？当cache空间不足时如何替换cache中已有的内容？需要写操作时如何改写cache的内容？其中，前两个问题是相互关联的，即如何将主存信息定位在cache中，如何将主存地址变换为cache地址。与主存容量相比，cache的容量很小，它保存的内容只是主存内容的一个子集，且cache与主存的数据交换是以块为单位。为了把主存块放到cache中，必须应用某种方法把主存地址定位到cache中，称为地址映射。“映射”一词的物理含义是确定位置的对应关系，并用硬件来实现。这样当CPU访问存储器时，它所给出的一个字的内存地址会自动变换成cache的地址，即cache地址变换。cache替换问题主要是选择和执行替换算法，以便在cache不命中时替换cache中的内容。最后一个问题涉及cache的写操作策略，重点是在更新时保持主存与cache的一致性。地址映射方式有全相联方式、直接方式和组相联方式三种，下面分别介绍。全相联映射方式cache的数据块大小称为行，用Li表示，其中im，共有mr行。主存的数据块大小称为块，用Bj表示，其中jn，共有ns块。行与块是等长的，每个块行由kw个连续的字组成，字是CPU每次访问存储器时可存取的最小单位。在全相联映射中，将主存中一个块的地址块号与块的内容字一起存于cache的行中，其中块地址存于cache行的标记tag部分中。这种带全部块地址一起保存的方法，可使主存的一个块直接复制到cache中的任意一行上，非常灵活。图a是全相联映射的多对一示意图，其中cache为行，主存为块，每块行中有同样多的字。图b表示全相联映射方式的检索过程。CPU访存指令指定了一个主存地址，为了快速检索，指令中的块号与cache中所有行的标记同时在比较器中进行比较。如果块号命中，则按字地址从cache中读取一个字；如果块号未命中，则按主存地址从主存中读取这个字。在全相联cache中，全部标记用一个相联存储器来实现，全部数据存储用一个普通RAM来实现。全相联方式的主要缺点是高速比较器电路难于设计和实现，因此只适合于小容量cache采用。直接映射方式直接映射方式也是一种多对一的映射关系，但一个主存块只能拷贝到cache的一个特定行位置上去。cache的行号i和主存的块号j有如下函数关系：ijmodm式中，m为cache中的总行数。显然，主存的第块，第m块，第m块，，第sm块只能映射到cache的第行；而主存的第块，第m块，第m块，，第sm块只能映射到cache的第行。图a表示直接映射方式的示意图，cache假设为行，主存假设为块，故以为模进行映射。这样，允许存于cache第L行的主存块号是BBBB共块。同样，映射到第L的主存块号也是块。此处s，Y，sY。为了理解方便，可以把主存首先分区，每个区的块数与cache的行数m相等。如图a所示。所有区的第块在调入cache时只能映射到cache的第行，所有区的第块在调入cache时只能映射到cache的第行所有区的第m块在调入cache时只能映射到cache的第m行。在直接映射方式中，将s位的主存块地址分成两部分：低r位主存区内块号作为cache的行地址，sr位区号作为标记tag与块数据一起保存在该行。当CPU以一个给定的内存地址访问cache时，首先用r位区内块号找到cache中的特定一行，然后用地址中的sr位区号部分与此行的标记在比较器中做比较。若相符即命中，在cache中找到了所要求的块，而后用地址中最低的w位读取所需求的字。若不符，则未命中，由主存读取所要求的字。直接映射方式的优点是硬件简单，成本低，地址变换速度快。缺点是每个主存块只有一个固定的行位置可存放。如果连续访问块号相距m整数倍的两个块，因两个块映射到同一cache行时，就会发生冲突。发生冲突时就要将原先存入的行换出去，但很可能过一段时间又要换入。频繁的置换会使cache效率下降。因此直接映射方式适合于需要大容量cache的场合，更多的行数可以减小冲突的机会。思考题可否将第区的所有页映射到cache第行？可否将第区的所有页映射到cache第行？请与上面的映射方式对比。组相联映射方式全相联映射和直接映射两种方式的优缺点正好相反。从存放位置的灵活性和命中率来看，前者为优；从比较器电路简单及硬件投资来说，后者为佳。而组相联映射方式是前两种方式的折中方案，它适度地兼顾了二者的优点又尽量避免二者的缺点，因此被普遍采用。如图a所示，所有区的第块在调入cache时只能映射到cache的第组，所有区的第块在调入cache时只能映射到cache的第组，所有区的第u块在调入cache时只能映射到cache的第u组。在直接映射方式中，每个区第i块只能映射到cache唯一的第i行，冲突的概率可能会很大。而在组相联映射方式中，每个区第i块可以映射到第i组的v行中图中v，而且在v行中可以自由选择空余的行。这种方式将cache分成u组，每组v行。主存块存放到哪个组是固定的，取决于主存块在主存区中是第几块。至于存到该组哪一行是灵活的，即有如下函数关系：内存地址中，s位块号划分成两部分：低d位du主存区内块号用于表示cache组号而不是cache行号，高sd位区号作为标记与块数据一起存于此组的某行中。图b表示组相联映射的示意图。例中cache划分u组，每组有v行，即muv。主存容量为块，其中BBBB共个主存块映射到cache第S组；BBBB共个主存块映射到cache的第S组；以此类推。图c表示组相联cache的检索过程。注意cache的每一小框代表的不是“字”而是“行”。当CPU给定一个内存地址访问cache时，首先用d位区内块号找到cache的相应组，然后将主存地址高sd位区号部分与该组v行中的所有标记同时进行比较。哪行的标记与之相符，哪行即命中。此后再以内存地址的w位字地址部分检索此行的具体字，并完成所需要求的存取操作。如果此组没有一行的标记与之相符，即cache未命中，此时需按主存地址访问主存。组相联映射方式中的每组行数v一般取值较小，典型值是、、、。这种规模的v路比较器容易设计和实现。而块在组中的排放又有一定的灵活性，使冲突减少。为强调比较器的规模和存放的灵活程度，常称之为v路组相联cache。cache工作原理要求它尽量保存最新数据。当一个新的主存块需要拷贝到cache，而允许存放此块的行位置都被其他主存块占满时，就要产生替换。替换问题与cache的组织方式紧密相关。对直接映射的cache来说，因一个主存块只有一个特定的行位置可存放，所以解决问题很简单，只要把此特定位置上的原主存块换出cache即可。对全相联和组相联cache来说，就要从允许存放新主存块的若干特定行中选取一行换出。如何选取就涉及替换策略，又称替换算法。硬件实现的常用算法主要有以下三种。最不经常使用LFU算法LFU算法认为应将一段时间内被访问次数最少的那行数据换出。为此，每行设置一个计数器。新行调入后从开始计数，每访问一次，被访行的计数器增。当需要替换时，对这些特定行的计数值进行比较，将计数值最小的行换出，同时将这些特定行的计数器都清零。这种算法将计数周期限定在两次替换之间的间隔时间内，因而不能严格反映近期访问情况。近期最少使用LRU算法LRU算法将近期内长久未被访问过的行换出。为此，每行也设置一个计数器，但它们是cache每命中一次，命中行计数器清零，其他各行计数器增。当需要替换时，比较各特定行的计数值，将计数值最大的行换出。这种算法保护了刚复制到cache中的新数据行，符合cache工作原理，因而使cache有较高的命中率。对路组相联的cache来说，LRU算法的硬件实现可以简化。因为一个主存块只能在一个特定组的两行中来做存放选择，二选一完全不需要计数器，只需一个二进制位即可。例如，规定一组中的A行复制进新数据可将此位置“”，B行复制进新数据可将此位置“”。当需要置换时，只需检查此二进制位状态即可：为换出A行，为换出B行，实现了保护新行的原则。奔腾CPU内的数据cache是一个路组相联结构，就采用这种简捷的LRU替换算法。随机替换随机替换策略实际上是不要什么算法，从特定的行位置中随机地选取一行换出即可。这种策略在硬件上容易实现，且速度也比前两种策略快。缺点是随意换出的数据很可能马上又要使用，从而降低命中率和cache工作效率。但这个不足随着cache容量增大而减小。研究表明，随机替换策略的性能只是稍逊于前两种策略。由于cache的内容只是主存部分内容的副本，它应当与主存内容保持一致。而CPU对cache的写入更改了cache的内容。如何与主存内容保持一致，可选用如下三种写操作策略。写回法writebackcopyback写回法要求：当CPU写cache命中时，只修改cache的内容，而不立即写入主存；只有当此行被换出时才写回主存。这种方法使cache真正在CPU主存之间读写两方面都起到高速缓存作用。对一个cache行的多次写命中都在cache中快速完成，只是需要替换时才写回速度较慢的主存，减少了访问主存的次数。实现这种方法时，每个cache行必须配置一个修改位，以反映此行是否被CPU修改过。当某行被换出时，根据此行修改位是还是，来决定将该行内容写回主存还是简单弃去。如果CPU写cache未命中，为了包含欲写字的主存块在cache分配一行，将此块整个复制到cache后对其进行修改。主存的写修改操作统一留到换出时再进行。显然，这种写cache与写主存异步进行的方式可显著减少写主存次数，但是存在不一致性的隐患。全写法writethrough全写法要求：当写cache命中时，cache与主存同时发生写修改，因而较好地维护了cache与主存的内容的一致性。当写cache未命中时，只能直接向主存进行写入。但此时是否将修改过的主存块取到cache，有两种选择方法：一种称为WTWA法，取主存块到cache并为它分配一个行位置；另一种称为WTNWA法，不取主存块到cache。全写法是写cache与写主存同步进行，优点是cache中每行无须设置一个修改位，以及相应的判断逻辑。缺点是，cache对CPU向主存的写操作无高速缓冲功能，降低了cache的性能。写一次法writeonce写一次法是基于写回法并结合全写法的写策略：写命中与写未命中的处理方法和写回法基本相同，只是第一次写命中时要同时写入主存。这是因为第一次写cache命中时，CPU要在总线上启动一个存储写周期，其他cache监听到此主存块地址及写信号后，即可复制该块或及时作废，以便维护系统全部cache的一致性。奔腾CPU的片内数据cache就采用了写一次法。我们可以从Intel微处理器的演变中清楚地看到cache组织的演变。不包含片内cache。包含KB的片内cache，它采用每行B的路组相联结构。所有的Pentium处理器包含两个片内Lcache，一个是Dcache数据cache，一个是Icache指令cache。Pentium还包含一个Lcache，其容量是KB，每行B，采用路组相联结构。Pentium增加了一个Lcache。到Pentium，Lcache已移到处理器芯片中。图示出了Pentium的三级cache的布局。Pentium处理器的核心由下列四个主要部件组成：取指译码单元按顺序从Lcache中取程序指令，将它们译成一系列的微指令，并存入L指令cache中。乱序执行逻辑依据数据相关性和资源可用性，调度微指令的执行，因而微指令可按不同于所取机器指令流的顺序被调度执行。执行单元它执行微指令，从L数据cache中取所需数据，并在寄存器组中暂存运算结果。存储器子系统这部分包括Lcache、Lcache和系统总线。当L、Lcache未命中时，使用系统总线访问主存。系统总线还用于访问IO资源。不同于所有先前Pentium模式和大多数处理器所采用的结构，Pentium的指令cache位于指令译码逻辑和执行部件之间。其设计理念是：Pentium将机器指令译成由微指令组成的简单RISC类指令，而使用简单定长的微指令可允许采用超标量流水线和调度技术，从而增强机器的性能。关于流水线技术，将留在第五章中讨论。思考题Pentium中为什么设置L、L、L三个cache？Lcache分成Icache和Dcache有什么好处？所有现代计算机都使用了cache。大多数情况下，这些cache和组成CPU的微处理器集成到一个芯片上。为进一步缩小现代处理器高时钟频率和访问DRAM相对较慢之间的差距，高性能微处理器可支持附加一级的cache。这种二级的cache，位于处理器芯片内或是位于处理器芯片外单独的一组SRAM，当访问主cache缺失后就会访问它。如果二级cache包含所请求的数据，缺失损失就是二级cache的访问时间，这要比主存的访问时间少得多。如果第一级cache、第二级cache都不包含这个数据，就需要访问主存储器，产生更大的缺失损失。使用二级cache能使性能提高多少？下面通过例子来说明。实地址与虚地址在早期的单用户单任务操作系统如DOS中，每台计算机只有一个用户，每次运行一计算机组成原理个程序，且程序不是很大，单个程序完全可以存放在实际内存中。这时虚拟存储器简称虚存并没有太大的用处。但随着程序占用存储器容量的增长和多用户多任务系统的出现，在程序设计时，程序所需的存储器容量与计算机系统实际配备的主存储器的容量之间往往存在着矛盾。例如，在某些低档的计算机中，物理内存的容量较小，而某些程序却需要很大的内存才能运行；而在多用户多任务系统中，多个用户或多个任务共享全部主存，要求同时执行多道程序。这些同时运行的程序到底占用实际内存中的哪一部分，在编制程序时是无法确定的，必须等到程序运行时才动态分配。为此，希望在编制程序时独立编址，既不考虑程序是否能在物理存储器中存放得下因为这与程序运行时的系统配置和当时其他程序的运行情况有关，在编程时一般无法确定，也不考虑程序应该存放在什么物理位置。而在程序运行时，则分配给每个程序一定的运行空间，由地址转换部件硬件或软件将编程时的地址转换成实际内存的物理地址。如果分配的内存不够，则只调入当前正在运行的或将要运行的程序块或数据块，其余部分暂时驻留在辅存中。这样，用户编制程序时使用的地址称为虚地址或逻辑地址，其对应的存储空间称为虚存空间或逻辑地址空间；而计算机物理内存的访问地址则称为实地址或物理地址，其对应的存储空间称为物理存储空间或主存空间。程序进行虚地址到实地址转换的过程称为程序的再定位。虚存的访问过程虚存空间的用户程序按照虚地址编程并存放在辅存中。程序运行时，由地址变换机构依据当时分配给该程序的实地址空间把程序的一部分调入实存。每次访存时，首先判断该虚地址所对应的部分是否在实存中：如果是，则进行地址转换并用实地址访问主存；否则按照某种算法将辅存中的部分程序调度进内存，再按同样的方法访问主存。由此可见，每个程序的虚地址空间可以远大于实地址空间，也可以远小于实地址空间。前一种情况以提高存储容量为目的，后一种情况则以地址变换为目的。后者通常出现在多用户或多任务系统中：实存空间较大，而单个任务并不需要很大的地址空间，较小的虚存空间则可以缩短指令中地址字段的长度。有了虚存机制后，应用程序就可以透明地使用整个虚存空间。对应用程序而言，如果主存的命中率很高，虚存的访问时间就接近于主存访问时间，而虚存的大小仅仅依赖于辅存的大小。这样，每个程序就可以拥有一个虚拟的存储器，它具有辅存的容量和接近主存的访问速度。但这个虚存是由主存和辅存以及辅存管理部件构成的概念模型，不是实际的物理存储器。虚存是在主存和辅存之外附加一些硬件和软件实现的。由于软件的介入，虚存对设计存储管理软件的系统程序员而言是不透明的，但对应用程序员而言仍然是透明的。cache与虚存的异同从虚存的概念可以看出，主存辅存的访问机制与cache主存的访问机制是类似的。这是由cache存储器、主存和辅存构成的三级存储体系中的两个层次。cache和主存之间以及主存和辅存之间分别有辅助硬件和辅助软硬件负责地址变换与管理，以便各级存储器能够组成有机的三级存储体系。cache和主存构成了系统的内存，而主存和辅存依靠辅助软硬件的支持支撑虚拟存储器工作。在三级存储体系中，cache主存和主存辅存这两个存储层次有许多相同点。出发点相同二者都是为了提高存储系统的性能价格比而构造的分层存储体系，都力图使存储系统的性能接近高速存储器，而价格和容量接近低速存储器。原理相同都是利用了程序运行时的局部性原理把最近常用的信息块从相对慢速而大容量的存储器调入相对高速而小容量的存储器。但cache主存和主存辅存这两个存储层次也有许多不同之处。侧重点不同cache主要解决主存与CPU的速度差异问题；而就性能价格比的提高而言，虚存主要是解决存储容量问题，另外还包括存储管理、主存分配和存储保护等方面。数据通路不同CPU与cache和主存之间均可以有直接访问通路，cache不命中时可直接访问主存；而虚存所依赖的辅存与CPU之间不存在直接的数据通路，当主存不命中时只能通过调页解决，CPU最终还是要访问主存。透明性不同cache的管理完全由硬件完成，对系统程序员和应用程序员均透明；而虚存管理由软件操作系统和硬件共同完成，由于软件的介入，虚存对实现存储管理的系统程序员不透明，而只对应用程序员透明段式和段页式管理对应用程序员“半透明”。未命中时的损失不同由于主存的存取时间是cache的存取时间的倍，而主存的存取速度通常比辅存的存取速度快上千倍，故主存未命中时系统的性能损失要远大于cache未命中时的损失。虚存机制要解决的关键问题虚存机制也要解决一些关键问题。调度问题决定哪些程序和数据应被调入主存。地址映射问题在访问主存时把虚地址变为主存物理地址这一过程称为内地址变换；在访问辅存时把虚地址变成辅存的物理地址这一过程称为外地址变换，以便换页。此外还要解决主存分配、存储保护与程序再定位等问题。替换问题决定哪些程序和数据应被调出主存。更新问题确保主存与辅存的一致性。在操作系统的控制下，硬件和系统软件为用户解决了上述问题，从而使应用程序的编程大大简化。页式虚存地址映射页式虚拟存储系统中，虚地址空间被分成等长的页，称为逻辑页；主存空间也被分成同样大小的页，称为物理页。相应地，虚地址分为两个字段：高字段为逻辑页号，低字段为页内地址偏移量；实存地址也分为两个字段：高字段为物理页号，低字段为页内地址。通过页表可以把虚地址逻辑地址转换成物理地址。在大多数系统中，每个进程对应一个页表。页表中对应每一个虚存页面有一个表项，表项的内容包含该虚存页面所在的主存页面的地址物理页号，以及指示该逻辑页是否已调入主存的有效位。地址变换时，用逻辑页号作为页表内的偏移地址索引页表将虚页号看作页表数组下标并找到相应物理页号，用物理页号作为实存地址的高字段，再与虚地址的页内偏移量拼接，就构成了完整的物理地址。现代的中央处理器通常有专门的硬件支持地址变换。图显示了页式虚拟存储器的地址映射过程。每个进程所需的页数并不固定，所以页表的长度是可变的，因此通常的实现方法是把页表的基地址保存在寄存器中，而页表本身则放在主存中。由于虚存地址空间可以很大，因而每个进程的页表有可能非常长。例如，如果一个进程的虚地址空间为GB，每页的大小为B，则总的虚页数为。为了节省页表本身占用的主存空间，一些系统把页表安排存储在虚存空间，因而页表本身也要进行分页。当一个进程运行时，其页表中一部分在主存中，另一部分则在辅存中保存。另一些系统采用二级页表结构。每个进程有一个页目录表，其中的每个表项指向一个页表。因此，若页目录表的长度表项数是m，每个页表的最大长度表项数为n，则一个进程最多可以有mn个页。在页表长度较大的系统中，还可以采用反向页表invertedpagetable实现物理页号到逻辑页号的反向映射。页表中对应每一个物理页号有一个表项，表项的内容包含该物理页所对应的逻辑页号。访存时，通过逻辑页号在反向页表中逐一查找。如果找到匹配的页，则用表项中的物理页号取代逻辑页号；如果没有匹配表项，则说明该页不在主存中。这种方式的优点是页表所占空间大大缩小，但代价是需要对反向页表进行检索，查表的时间很长。有些系统通过散列哈希表加以改进。内页表和外页表上面所说的页表是虚地址到主存物理地址的变换表，通常称为内页表。与内页表对应的还有外页表，用于虚地址与辅存地址之间的变换。当主存缺页时，调页操作首先要定位辅存，而外页表的结构与辅存的寻址机制密切相关。例如，对磁盘而言，辅存地址包括磁盘机号、磁头号、磁道号和扇区号等。外页表通常放在辅存中，在需要时可调入主存。当主存不命中时，由存储管理部件向CPU发出“缺页中断”，进行调页操作。转换后援缓冲器TLB由于页表通常在主存中，因而即使逻辑页已经在主存中，也至少要访问两次物理存储器才能实现一次访存，这将使虚拟存储器的存取时间加倍。为了避免对主存访问次数的增多，可以对页表本身实行二级缓存，把页表中最活跃的部分存放在高速存储器中。这个专用于页表缓存的高速存储部件通常称为转换后援缓冲器TLB，又称为快表。而保存在主存中的完整页表则称为慢表。快表的作用是加快地址变换。TLB的作用与主存和CPU之间的cache作用相似，通常由相联存储器实现，容量比慢表小得多，存储慢表中部分信息的副本，可以完成硬件高速检索操作。地址变换时，根据逻辑页号同时查快表和慢表，当在快表中有此逻辑页号时，就能很快地找到对应的物理页号。根据程序的局部性原理，多数虚拟存储器访问都将通过TLB进行，从而有效降低访存的时间延迟。图显示了TLB的地址映射过程。由于TLB的缓冲过程与cache的缓冲过程是独立的，所以在每次存储器访问过程中有可能要经历多次变换。存储管理部件首先用虚地址中的虚页号部分检索TLB：匹配成功时则通过实页号与偏移量拼接出物理地址；TLB匹配不成功则需查询主存中的页表，然后通过实页号与偏移量拼接出物理地址。而该物理地址所在的主存空间可能已经被调入cache中，也可能还在主存中，甚至还有可能在辅存中。对后一种情况，包含该地址的页必须被调入主存，并将其所在的块装入cache中，修改相应的页表和TLB表项。可见虚拟存储器的地址映射与地址变换过程是相当复杂的过程。虚拟存储器、TLB和cache的协同操作虚拟存储器和cache系统如同一个层次结构般一起工作。操作系统在管理该层次结构时起到关键作用，当它决定要把某一页移到磁盘上去时，就迫使该页的全部内容从cache中删除。同时，操作系统修改页表和TLB，而试图访问该页上的任何数据可能将导致缺页。在最好的情况下，虚拟地址由TLB进行转换，然后被送到cache，找到正确的数据并取回处理器。在最坏的情况下，一次访问会在存储器层次结构的三个组成部分都产生缺失：TLB、页表和cache。段式虚拟存储器页面是主存物理空间中划分出来的等长的固定区域。分页方式的优点是页长固定，因而便于构造页表、易于管理，且不存在外碎片。但分页方式的缺点是页长与程序的逻辑大小不相关。例如，某个时刻一个子程序可能有一部分在主存中，另一部分则在辅存中。这不利于编程时的独立性，并给换入换出处理、存储保护和存储共享等操作造成麻烦。另一种划分可寻址的存储空间的方法称为分段。段是按照程序的自然分界划分的长度可以动态改变的区域。通常，程序员把子程序、操作数和常数等不同类型的数据划分到不同的段中，并且每个程序可以有多个相同类型的段。在段式虚拟存储系统中，虚地址由段号和段内地址偏移量组成。虚地址到实主存地址的变换通过段表实现。每个程序设置一个段表，段表的每一个表项对应一个段。每个表项至少包含下面三个字段：有效位指明该段是否已经调入实存。段起址指明在该段已经调入实存的情况下，该段在实存中的首地址。段长记录该段的实际长度。设置段长字段的目的是保证访问某段的地址空间时，段内地址不会超出该段长度导致地址越界而破坏其他段。段表本身也是一个段，可以存在辅存中，但一般驻留在主存中。针对每个虚地址，存储管理部件首先以段号s为索引访问段表的第s个表项。若该表项的有效位为，则将虚地址的段内偏移量d与该表项的段长字段比较：若偏移量较大则说明地址越界，将产生地址越界中断；否则，将该表项的段起址与段内偏移量相加，求得主存实地址并访存。如果该表项的有效位为，则产生缺段中断，从辅存中调入该段，并修改段表。段式虚地址向实存地址的变换过程如图所示。分页对程序员而言是不可见的，而分段通常对程序员而言是可见的，因而分段为组织程序和数据提供了方便。与页式虚拟存储器相比，段式虚拟存储器有许多优点：段的逻辑独立性使其易于编译、管理、修改和保护，也便于多道程序共享。段长可以根据需要动态改变，允许自由调度，以便有效利用主存空间。因为段的长度不固定，段式虚拟存储器也有一些缺点：主存空间分配比较麻烦。容易在段间留下许多外碎片，造成存储空间利用率降低。由于段长不一定是的整数次幂，因而不能简单地像分页方式那样用虚地址和实地址的最低若干二进制位作为段内偏移量，并与段号进行直接拼接，必须用加法操作通过段起址与段内偏移量的求和运算求得物理地址。因此，段式存储管理比页式存储管理方式需要更多的硬件支持。段页式虚拟存储器段页式虚拟存储器是段式虚拟存储器和页式虚拟存储器的结合。实存被等分成页。每个程序先按逻辑结构分段，每段再按照实存的页大小分页，程序按页进行调入和调出操作，但可按段进行编程、保护和共享。在段页式虚拟存储系统中，每道程序均通过一个段表和多个页表进行两级再定位。段表中的每个表项对应一个段，每个表项有一个指针指向该段的页表。页表则指明该段各页在主存中的位置，以及是否已装入、是否已修改等状态信息。一个虚地址由段号、段内页号和页内偏移量构成。在多任务系统中，操作系统还会在每个虚地址前面增加一个表明该程序在系统中的序号的基号。一个虚地址可以看作由四个字段构成：基号N段号S段内逻辑页号P页内地址偏移量D在主存中，每道程序都有一张段表，A程序有段，C程序有段，每段应有一张页表，段表的每行就表示相应页表的起始位置，而页表内的每行即为相应的物理页号。请说明虚实地址变换过程。解地址变换过程如下：由存储管理部件根据基号C找到段表基址寄存器表第c个表项，获得程序C的段表基址SC。再根据段号S找到程序C段表的第S个表项，得到段S的页表起始地址b。根据段内逻辑页号P检索页表，得到物理页号图中为。物理页号与页内地址偏移量拼接即得物理地址。假如计算机系统中只有一个基址寄存器，则基号可不要。多道程序切换时，由操作系统修改基址寄存器内容。实际上，上述每个段表和页表的表项中都应设置一个有效位。只有在有效位为时才按照上述流程操作，否则需中断当前操作先进行建表或调页。可以看出，段页式虚拟存储器的缺点是在由虚地址向主存地址的映射过程中需要多次查表，因而实现复杂度较高。当从辅存调页至主存而主存已满时，也需要进行主存页面的替换。虚拟存储器的替换算法与cache的替换算法类似，有FIFO算法、LRU算法、LFU算法等。虚拟存储器的替换算法与cache的替换算法不同的是：cache的替换全部靠硬件实现，而虚拟存储器的替换有操作系统的支持。虚存缺页对系统性能的影响比cache未命中要大得多，因为调页需要访问辅存，并且要进行任务切换。虚存页面替换的选择余地很大，属于一个进程的页面都可替换。为支持虚存的替换，通常在页表或段表的每一表项中设置一个修改位，标识该表项所对应的主存页或段空间在被调入主存后是否被修改过。对于将被替换出去的空间，假如其内容没有被修改过，就不必进行额外处理；否则就需把该空间存储的内容重新写入辅存，以保证辅存中数据的正确性。在FIFO算法中，FIFO队列中的页面始终按照从a到c的顺序依次推进，页面从a位置进入队列，替换始终在页面c的位置进行。FIFOLRU算法是对FIFO算法的一种改进。但与FIFO算法不同的是，如果某个页面命中，则将该页面移动到FIFO队列入口位置页面a所在的位置。因为根据程序的局部性原理，刚被访问的页面在最近的将来被再次访问的概率较大，故将其被替换的时间延后。上面的例子说明FIFOLRU算法比FIFO算法的命中率高。存储管理部件MemoryManagementUnit，MMU是系统中进行虚实地址转换的核心部件。MMU的主要功能有：在TLB的协助下完成虚实地址转换；维护TLB的控制机制；负责存储保护；在TLB失效或非法访问时向处理器发起中断；维护一个TLB失效后的再填充机制tablewalking。MMU的工作流程大致如下：CPU发出访存的虚拟地址后，MMU通过页表查找机制访问主存页表，获得映射关系；如果主存命中，MMU将虚页号变换为物理页号，产生物理地址访存；如果主存缺页，CPU将转到操作系统的页面失效程序入口，由操作系统进行调页操作。基于英特尔IA体系结构的奔腾系列机为存储管理提供了硬件支持。目前广泛使用的奔腾处理机的存储管理机制与英特尔和基本相同。IA体系结构微处理机的存储管理硬件支持三种存储器模型，如图所示。平坦存储器模型flatmemorymodel内存被组织成单一的、连续的地址空间，称为“线性地址空间”。所有的代码、数据和堆栈均包含在该地址空间内，该空间的字节地址范围为。分段存储器模型segmentedmemorymodel每个程序均使用一组独立的地址空间，每个地址空间就是一个段，段的最大长度为B。逻辑地址由段选择器和偏移量组成，处理机将逻辑地址透明地转换为线性地址。实地址模式存储器模型realaddressmodememorymodel是为保持与早期的处理机兼容的存储器模式。线性地址空间被分为段，段的最大长度为KB。线性地址空间的最大长度为B。IA体系结构微处理机的虚拟存储器可以通过两种方式实现：分段和分页。存储管理部件包括分段部件SU和分页部件PU两部分。分段部件将程序中使用的虚地址转换成线性地址。而分页部件则将线性地址转换为物理地址。在分段部件和分页部件中，每一部分都可以独立地打开或关闭，因而可出现四种组合方式：不分段不分页模式程序中使用的逻辑地址与物理地址相同。分段不分页模式相当于段式虚拟存储器。程序中使用的逻辑地址由一个位段选择器和一个位偏移量组成。段选择器中的最低两位用于存储保护，其余位选择一个特定的段。因此，对于分段的存储器，用户的虚拟地址空间是TB。而物理地址空间使用位地址，最大GB。由分段部件将二维的虚拟地址转换为一维的线性地址。在分页部件不工作的情况下，线性地址也就是主存物理地址。不分段分页模式相当于页式虚拟存储器。程序中使用的是位线性地址，由分页部件将其转换成位物理地址。用户的虚拟地址空间是GB。分段分页模式在分段基础上增加分页存储管理的模式，即段页式虚拟存储器。程序中使用的逻辑地址由一个位段选择器和一个位偏移量组成，由分段部件将二维的虚拟地址转换为一维的线性地址，再由分页部件将其转换成位物理地址。用户的虚拟地址空间是TB。分页模式下的地址转换在分页模式下，有两种页大小，其地址映射方式不同：一种是兼容早期的和的KB的页大小，使用页目录表和页表两级结构进行地址转换；另一种是从奔腾处理机开始采用的MB页大小，使用单级页表结构。MB分页方式的地址转换如图所示。位线性地址分为高位的页号和低位的页内偏移量两个字段。系统中由一个有个表项的页表实现地址转换。控制寄存器CR指向页表，页表的每个表项为位。其中：I位指示页大小I为MB页大小；I为KB大小。P为出现位P表示此页已被装入主存；P时访问此页将引起缺页中断。A为已访问位若在装入主存后此页被访问过，则A被置为；否则置A为。D为脏位若该页在调入主存后被修改过，则D被置为，表示在该页被换出主存时应写回辅存。RW为读写控制位用于指明用户对该页的权限是只读还是可读写。US为用户管理员权限控制位指明该页是只能被操作系统访问还是同时允许操作系统和用户程序访问。本章小结对存储器的要求是容量大、速度快、成本低。为了解决这三方面的矛盾，计算机采用多级存储体系结构，即cache、主存和外存。CPU能直接访问内存cache、主存，但不能直接访问外存。存储器的技术指标有存储容量、存取时间、存储周期、存储器带宽。广泛使用的SRAM和DRAM都是半导体随机读写存储器，前者速度比后者快，但集成度不如后者高。二者的优点是体积小，可靠性高，价格低廉，缺点是断电后不能保存信息。只读存储器和闪速存储器正好弥补了SRAM和DRAM的缺点，即使断电也仍然保存原先写入的数据。特别是闪速存储器能提供高性能、低功耗、高可靠性以及移动性，是一种全新的存储器体系结构。双端口存储器和多模块交叉存储器属于并行存储器结构。前者采用空间并行技术，后者采用时间并行技术。这两种类型的存储器在科研和工程中大量使用。cache是一种高速缓冲存储器，是为了解决CPU和主存之间速度不匹配而采用的一项重要的硬件技术，并且发展为多级cache体系，指令cache与数据cache分设体系。要求cache的命中率接近于。主存与cache的地址映射有全相联、直接、组相联三种方式。其中组相联方式是前二者的折中方案，适度地兼顾了二者的优点又尽量避免其缺点，从灵活性、命中率、硬件投资来说较为理想，因而得到了普遍采用。用户程序按照虚地址逻辑地址编程并存放在辅存中。程序运行时，由地址变换机构依据当时分配给该程序的实地址空间把程序的一部分调入实存物理存储空间或主存空间。由操作系统在硬件的支持下对程序进行虚地址到实地址的变换，这一过程称为程序的再定位。每次访存时，首先判断该虚地址所对应的部分是否在实存中：如果是，则进行地址转换并用实地址访问主存；否则，按照某种算法将辅存中的部分程序调度进内存，再按同样的方法访问主存。对应用程序而言，如果主存的命中率很高，虚存的访问时间就接近于主存访问时间，而虚存的大小仅仅依赖于辅存的大小。虚存机制也要解决一些关键问题，包括调度问题、地址映射问题和替换问题等。在操作系统的控制下，硬件和系统软件为用户解决了上述问题，从而使应用程序的编程大大简化。页式虚拟存储系统中，虚地址空间和主存空间都被分成大小相等的页，通过页表可以把虚地址转换成物理地址。为了避免对主存访问次数增多，可以对页表本身实行二级缓存，把页表中的最活跃部分存放在转换后援缓冲器TLB中。分页方式的缺点是页长与程序的逻辑大小不相关，而分段方式则可按照程序的自然分界将内存空间划分为长度可以动态改变的存储区域。在段式虚拟存储系统中，虚地址由段号和段内地址偏移量组成。虚地址到实主存地址的变换通过段表实现。段页式虚拟存储器是段式虚拟存储器和页式虚拟存储器的结合，程序按页进行调入和调出操作，但可按段进行编程、保护和共享。虚拟存储器还解决了存储保护等问题。在虚拟存储系统中，通常采用页表保护、段表保护和键式保护方法实现存储区域保护。还可以结合对主存信息的使用方式实现访问方式保护。计算机的程序是由一系列的机器指令组成的。指令就是要计算机执行某种操作的命令。从计算机组成的层次结构来说，计算机的指令有微指令、机器指令和宏指令之分。微指令是微程序级的命令，它属于硬件；宏指令是由若干条机器指令组成的软件指令，它属于软件；而机器指令则介于微指令与宏指令之间，通常简称为指令，每一条指令可完成一个独立的算术运算或逻辑运算操作。本章所讨论的指令，是机器指令。一台计算机中所有机器指令的集合，称为这台计算机的指令系统指令集。指令系统是表征一台计算机性能的重要因素，它的格式与功能不仅影响到机器的硬件结构，而且影响到系统软件。因为指令是设计一台计算机的硬件与低层软件的接口。世纪年代，由于受器件限制，计算机的硬件结构比较简单，所支持的指令系统只有定点加减、逻辑运算、数据传送、转移等十几至几十条指令。年代后期，随着集成电路的出现，硬件功能不断增强，指令系统越来越丰富，除以上基本指令外，还设置了乘除运算、浮点运算、十进制运算、字符串处理等指令，指令数目多达一二百条，寻址方式也趋多样化。随着集成电路的发展和计算机应用领域的不断扩大，年代后期开始出现系列计算机。所谓系列计算机，是指基本指令系统相同、基本体系结构相同的一系列计算机，如Pentium系列就是曾经流行的一种个人机系列。一个系列往往有多种型号，但由于推出时间不同，采用器件不同，它们在结构和性能上有所差异。通常是新机种在性能和价格方面比旧机种优越。系列机解决了各机种的软件兼容问题，其必要条件是同一系列的各机种有共同的指令系统，而且新推出的机种指令系统一定包含所有旧机种的全部指令。因此旧机种上运行的各种软件可以不加任何修改便可在新机种上运行，大大减少了软件开发费用。年代末期，计算机硬件结构随着VLSI技术的飞速发展而越来越复杂化，大多数计算机的指令系统多达几百条。我们称这些计算机为复杂指令系统计算机，简称CISC。但是如此庞大的指令系统不但使计算机的研制周期变长，且由于采用了大量使用频率很低的复杂指令而造成硬件资源浪费，产生指令系统所谓百分比的规律，即最常使用的简单指令仅占指令总数的，但在程序中出现的频率却占。为此人们又提出了便于VLSI技术实现的精简指令系统计算机，简称RISC。指令系统的性能如何，决定了计算机的基本功能，因而指令系统的设计是计算机系统设计中的一个核心问题，它不仅与计算机的硬件结构紧密相关，而且直接关系到用户的使用需要。一个完善的指令系统应满足如下四方面的要求：完备性完备性是指用汇编语言编写各种程序时，指令系统直接提供的指令足够使用，而不必用软件来实现。完备性要求指令系统丰富、功能齐全、使用方便。一台计算机中最基本、必不可少的指令是不多的。许多指令可用最基本的指令编程来实现。例如，乘除运算指令、浮点运算指令可直接用硬件来实现，也可用基本指令编写的程序来实现。采用硬件指令的目的是提高程序执行速度，便于用户编写程序。有效性有效性是指利用该指令系统所编写的程序能够高效率地运行。高效率主要表现在程序占据存储空间小、执行速度快。一般来说，一个功能更强、更完善的指令系统，必定有更好的有效性。规整性规整性包括指令系统的对称性、匀齐性、指令格式和数据格式的一致性。对称性是指：在指令系统中所有的寄存器和存储器单元都可同等对待，所有的指令都可使用各种寻址方式；匀齐性是指：一种操作性质的指令可以支持各种数据类型，如算术运算指令可支持字节、字、双字整数的运算，十进制数运算和单、双精度浮点数运算等；指令格式和数据格式的一致性是指：指令长度和数据长度有一定的关系，以方便处理和存取。例如，指令长度和数据长度通常是字节长度的整数倍。兼容性系列机各机种之间具有相同的基本结构和共同的基本指令系统，因而指令系统是兼容的，即各机种上基本软件可以通用。但由于不同机种推出的时间不同，在结构和性能上有差异，做到所有软件都完全兼容是不可能的，只能做到“向上兼容”，即低档机上运行的软件可以在高档机上运行。计算机的程序，就是人们把需要用计算机解决的问题变换成计算机能够识别的一串指令或语句。编写程序的过程，称为程序设计，而程序设计所使用的工具则是计算机语言。计算机语言有高级语言和低级语言之分。高级语言如C，FORTRAN等，其语句和用法与具体机器的指令系统无关。低级语言分为机器语言二进制语言和汇编语言符号语言，这两种语言都是面向机器的语言，它们和具体机器的指令系统密切相关。机器语言用指令代码编写程序，而符号语言用指令助记符来编写程序。表列出了高级语言与低级语言的性能比较。计算机能够直接识别和执行的唯一语言是二进制机器语言，但人们用它来编写程序很不方便。另一方面，人们采用符号语言或高级语言编写程序，虽然对人提供了方便，但是机器却不懂这些语言。为此，必须借助汇编器汇编程序或编译器编译程序，把符号语言或高级语言翻译成二进制码组成的机器语言。汇编语言依赖于计算机的硬件结构和指令系统。不同的机器有不同的指令，所以用汇编语言编写的程序不能在其他类型的机器上运行。高级语言与计算机的硬件结构及指令系统无关，在编写程序方面比汇编语言优越。但是高级语言程序“看不见”机器的硬件结构，因而不能用它来编写直接访问机器硬件资源如某个寄存器或存储器单元的系统软件或设备控制软件。为了克服这一缺陷，一些高级语言如C，FORTRAN等提供了与汇编语言之间的调用接口。用汇编语言编写的程序，可作为高级语言的一个外部过程或函数，利用堆栈来传递参数或参数的地址。两者的源程序通过编译或汇编生成目标OBJ文件后，利用连接程序LINKER把它们连接成可执行文件便可运行。采用这种方法，用高级语言编写程序时，若用到硬件资源，则可用汇编程序来实现。机器语言程序员看到的计算机的属性就是指令系统体系结构，简称ISAInstructionSetArchitecture，是与程序设计有关的计算机架构。指令系统体系结构主要包括：寄存器组织，存储器的组织和寻址方式，IO系统结构，数据类型及其表示，指令系统，中断机制，机器工作状态的定义及切换，以及保护机制等。机器指令是用机器字来表示的。表示一条指令的机器字，就称为指令字，通常简称指令。指令格式，则是指令字用二进制代码表示的结构形式，通常由操作码字段和地址码字段组成。操作码字段表征指令的操作特性与功能，而地址码字段通常指定参与操作的操作数的地址。因此，一条指令的结构可用如下形式来表示：操作码字段OP地址码字段A设计计算机时，对指令系统的每一条指令都要规定一个操作码。指令的操作码OP表示该指令应进行什么性质的操作，如进行加法、减法、乘法、除法、取数、存数等。不同的指令用操作码字段的不同编码来表示，每一种编码代表一种指令。例如，操作码可以规定为加法操作；操作码可以规定为减法操作；而操作码可以规定为取数操作等。CPU中的专门电路用来解释每个操作码，因此机器就能执行操作码所表示的操作。组成操作码字段的位数一般取决于计算机指令系统的规模。较大的指令系统就需要更多的位数来表示每条特定的指令。例如，一个指令系统只有条指令，则有位操作码就够了。如果有条指令，那么就需要位操作码。一般来说，一个包含n位的操作码最多能够表示n条指令。对于一个机器的指令系统，在指令字中操作码字段和地址码字段长度通常是固定的。在单片机中，由于指令字较短，为了充分利用指令字长度，指令字的操作码字段和地址码字段是不固定的，即不同类型的指令有不同的划分，以便尽可能用较短的指令字长来表示越来越多的操作种类，并在越来越大的存储空间中寻址。根据一条指令中有几个操作数地址，可将该指令称为几操作数指令或几地址指令。一般的操作数有被操作数、操作数及操作结果这三种数，因而就形成了三地址指令格式，这是早期计算机指令的基本格式。在三地址指令格式的基础上，后来又发展成二地址格式、一地址格式和零地址格式。各种不同操作数的指令格式如下所示：零地址指令的指令字中只有操作码，而没有地址码。例如，停机指令就不需要地址码，因为停机操作不需要操作数。一地址指令只有一个地址码，它指定一个操作数，另一个操作数地址是隐含的。例如，以运算器中累加寄存器AC中的数据为隐含的被操作数，指令字的地址码字段所指明的数为操作数，操作结果又放回累加寄存器AC中，而累加寄存器中原来的数即被覆盖掉了，其数学含义为ACACOPA式中，OP表示操作性质，如加、减、乘、除等；AC表示累加寄存器AC中的数；A表示内存中地址为A的存储单元中的数，或者是运算器中地址为A的通用寄存器中的数；表示把操作运算结果传送到指定的地方。注意：地址码字段A指明的是操作数的地址，而不是操作数本身。二地址指令常称为双操作数指令，它有两个地址码字段A和A，分别指明参与操作的两个数在内存中或运算器中通用寄存器的地址，其中地址A兼作存放操作结果的地址。计算机组成原理其数学含义为AAOPA三地址指令字中有三个操作数地址A，A和A，其数学含义为AAOPA式中，A为被操作数地址，也称源操作数地址；A为操作数地址，也称终点操作数地址；A为存放操作结果的地址。三地址指令中A，A，A通常指定为运算器中通用寄存器的地址，这是为了加快指令执行速度。在二地址指令格式中，从操作数的物理位置来说，又可归结为三种类型：第一种是访问内存的指令格式，我们称这类指令为存储器存储器SS型指令。这种指令操作时都是涉及内存单元，即参与操作的数都放在内存里。从内存某单元中取操作数，操作结果存放至内存另一单元中，因此机器执行这种指令需要多次访问内存。第二种是访问寄存器的指令格式，我们称这类指令为寄存器寄存器RR型指令。机器执行这类指令过程中，需要多个通用寄存器或个别专用寄存器，从寄存器中取操作数，把操作结果放到另一寄存器。机器执行寄存器寄存器型指令的速度很快，因为执行这类指令，不需要访问内存。第三种类型为寄存器存储器RS型指令，执行此类指令时，既要访问内存单元，又要访问寄存器。在CISC计算机中，一个指令系统中指令字的长度和指令中的地址结构并不是单一的，往往采用多种格式混合使用，这样可以增强指令的功能。指令字长度一个指令字中包含二进制代码的位数，称为指令字长度。而机器字长是指计算机能直接处理的二进制数据的位数，它决定了计算机的运算精度。机器字长通常与主存单元的位数一致。指令字长度等于机器字长度的指令，称为单字长指令；指令字长度等于半个机器字长度的指令，称为半字长指令；指令字长度等于两个机器字长度的指令，称为双字长指令。例如，IBM系列，它的指令格式有位半字的，有位单字的，还有位一个半字的。在Pentium系列机中，指令格式也是可变的：有位、位、位、位不等。早期计算机使用多字长指令的目的，在于提供足够的地址位来解决访问内存任何单元的寻址问题。但是使用多字长指令的缺点是必须两次或三次访问内存以取出一整条指令，这就降低了CPU的运算速度，同时又占用了更多的存储空间。在一个指令系统中，如果各种指令字长度是相等的，称为等长指令字结构，它们可以都是单字长指令或半字长指令。这种指令字结构简单，且指令字长度是不变的。如果各种指令字长度随指令功能而异，如有的指令是单字长指令，有的指令是双字长指令，就称为变长指令字结构。这种指令字结构灵活，能充分利用指令长度，但指令的控制较复杂。随着技术发展，指令字长度逐渐变成多于位的固定长度。由于硬件只能识别和，所以采用二进制操作码是必要的，但是我们用二进制来书写程序却非常麻烦。为了便于书写和阅读程序，每条指令通常用个或个英文缩写字母来表示。这种缩写码称为指令助记符，如表所示。这里我们假定指令系统只有条指令，所以操作码只需位二进制。于一条存数指令，可以用助记符STO表示操作码。需要注意的是，在不同的计算机中，指令助记符的规定是不一样的。我们知道，硬件只能识别二进制语言。因此，指令助记符还必须转换成与它们相对应的二进制操作码。这种转换借助汇编器可以自动完成，汇编器的作用相当于一个“翻译”。八位微型计算机的指令格式早期的位微型机字长只有位。由于指令字较短，所以指令结构是一种可变字长形式。指令格式包含单字长指令、双字长指令、三字长指令等多种。指令格式如下：单字长指令只有操作码，没有操作数地址。双字长或三字长指令包含操作码和地址码。由于内存按字节编址，所以单字长指令每执行一条指令后，指令地址加。双字长指令或三字长指令每执行一条指令时，必须从内存连续读出字节或字节代码，所以，指令地址要加或加，可见多字长的指令格式不利于提高机器速度。MIPSR指令格式MIPSR是世纪年代后期推出的RISC系统，字长位，字节寻址。它的指令格式简单，指令数量少，通用寄存器个。其算术指令格式如下：指令格式中各个字段的含义如下：OP字段操作码，指定一条指令的基本操作。rs字段指定第个源操作数寄存器，最多有个寄存器。rt字段指定第个源操作数寄存器，最多有个寄存器。rd字段指定存放操作结果的目的数寄存器，最多有个寄存器。shamt字段移位值，用于移位指令。funct字段函数码，指定R型指令的特定操作。在MIPS中，所有的算术运算，数据必须放在通用寄存器中。此时的指令格式称为R型寄存器指令。R型指令格式就是上面所示的算术指令格式。在MIPS中，访问存储器取数或存数需要使用数据传送指令。此时的指令格式，称为I型立即数指令，其指令格式如下所示：位字段address地址提供取字指令IW，存字指令SW访问存储器的基值地址码也称位移量。保持指令格式基本一致可以降低硬件复杂程度。例如，R型和I型格式的前个字段长度相等，并且名称也一样；I型格式的第四个字段和R型后三个字段的长度相等。指令格式由第一个字段的值来区分：每种格式的第一个字段OP都被分配了一套不同的值，因此计算机硬件可以根据OP来确定指令的后半部分是三个字段R型还是一个字段I型。表给出了MIPS指令的每一字段的值十进制。表中，reg表示中间的一个寄存器号，address表示一个位地址，而表示该格式中这个字段没有出现。注意：加法add指令和减法sub指令的OP字段值相同；硬件根据funct字段来确定操作类型：加法或减法。ARM的指令格式ARM是字长位的嵌入式处理机，年生产了亿片，它具有世界上最流行的指令系统。下面是ARM指令系统的一种指令格式：各字段的含义如下：opcode指明指令的基本操作，称为操作码。Rd指明目标寄存器地址位，共个寄存器。Rn指明源寄存器地址位，共个寄存器。operand指明第个源操作数。I指明立即数，如果I，第个源操作数在寄存器中；如果I，第个源操作数是位的立即数。S设置状态，该字段涉及条件转移指令。cond指明条件，该字段涉及条件转移指令。F说明指令类型，当需要时该字段允许设置不同的指令。Pentium指令格式Pentium机的指令字长度是可变的：从B到B，B表示字节。指令格式如下所示。这种非固定长度的指令格式是典型的CISC结构特征。之所以如此，一是为了与它的前身保持兼容，二是希望能给编译程序写作者以更多灵活的编程支持。指令本身由操作码字段、ModRM字段、SIB字段、位移量字段、立即数字段组成。除操作码字段外，其他四个字段都是可选字段不选时取字节。ModRM字段规定了存储器操作数的寻址方式，给出了寄存器操作数的寄存器地址号。除少数预先规定寻址方式的指令外，绝大多数指令都包含这个字段。SIB字段由比例系数S、变址寄存器号I、基址寄存器号B组成。利用该字段，可和ModRM字段一起，对操作数来源进行完整的说明。显然，Pentium采用RS型指令，指令格式中只有一个存储器操作数。机器指令对数据进行操作，数据通常分以下四类：地址数据地址实际上也是一种形式的数据。多数情况下，对指令中操作数的引用必须完成某种计算，才能确定它们在主存中的有效地址。此时，地址将被看作无符号整数。数值数据计算机中普遍使用的三种类型的数值数据是：定点整数或定点小数；浮点数；压缩十进制数，字节用位BCD码表示。字符数据也称为文本数据或字符串，目前广泛使用ASCII码。以这种编码，每个字符被表示成唯一的位代码，共有个可表示字符，加上最高位b用作奇偶校验，因此每个字符总是以位的字节来存储和传送。逻辑数据一个单元由若干二进制位项组成，每个位的值可以是或。当数据以这种方式看待时，称为逻辑性数据，它创造了对某个具体位进行布尔逻辑运算的机会。Pentium能处理位字节、位字、位双字、位四字各种长度的数据类型。为求得数据结构最大的灵活性和最有效地使用存储器，单字不需要在偶数地址上对齐，双字也不需要在倍字节整数地址上对齐，四字不需要在倍字节整数地址上对齐。然而当经位数据总线存取数据时，数据传送是以双字为单位进行的，双字的起始地址是能被整除的。表列出了Pentium的数据类型。PowerPC是精简指令系统计算机，能处理位字节、位半字、位字和位双字各种长度的数据。处理器能识别如下数据类型：无符号字节用于逻辑和整数算术运算。它由存储器取出装入通用寄存器时，寄存器左端以填充。无符号半字同无符号字节，只是一个位的量。有符号半字用于位算术运算。由存储器取出装入通用寄存器时，要进行符号位扩展，即所有空出位用符号位填充。无符号字用于位逻辑运算，或作为地址指针。有符号字用于位算术运算。无符号双字用作位地址指针。字节串可从到字节长。浮点数支持IEEE中定义的单、双精度浮点数据类型。存储器既可用来存放数据，又可用来存放指令。因此，当某个操作数或某条指令存放在某个存储单元时，其存储单元的编号，就是该操作数或指令在存储器中的地址。在存储器中，操作数或指令字写入或读出的方式，有地址指定方式、相联存储方式和堆栈存取方式。几乎所有的计算机，在内存中都采用地址指定方式。当采用地址指定方式时，形成操作数或指令地址的方式，称为寻址方式。寻址方式分为两类，即指令寻址方式和数据寻址方式，前者比较简单，后者比较复杂。值得注意的是，在冯诺依曼型结构的计算机中，内存中指令的寻址与数据的寻址是交替进行的。而哈佛型计算机中指令寻址和数据寻址是独立进行的。指令的寻址方式有两种，一种是顺序寻址方式，另一种是跳跃寻址方式。顺序寻址方式由于指令地址在内存中按顺序安排，当执行一段程序时，通常是按一条指令接一条指令的顺序进行。就是说，从存储器取出第一条指令，然后执行这条指令；接着从存储器取出第二条指令，再执行第二条指令；接着再取出第三条指令这种程序顺序执行的过程，我们称为指令的顺序寻址方式。为此，必须使用程序计数器又称指令指针寄存器PC来计数指令的顺序号，该顺序号就是指令在内存中的地址。图a是指令顺序寻址方式的示意图。跳跃寻址方式当程序转移执行的顺序时，指令的寻址就采取跳跃寻址方式。所谓跳跃，是指下条指令的地址码不是由程序计数器给出的，而是由本条指令给出。图b画出了指令跳跃寻址方式的示意图。注意，程序跳跃后，按新的指令地址开始顺序执行。因此，指令计数器的内容也必须相应改变，以便及时跟踪新的指令地址。采用指令跳跃寻址方式，可以实现程序转移或构成循环程序，从而能缩短程序长度，或将某些程序作为公共程序引用。指令系统中的各种条件转移或无条件转移指令，就是为了实现指令的跳跃寻址而设置的。在指令执行过程中，操作数的来源一般有三个：由指令中的地址码部分直接给出操作数，虽然简便快捷，但是操作数是固定不变的；将操作数存放在CPU内的通用数据寄存器中，这样可以很快获取操作数，但是可以存储的操作数的数量有限；更一般化的方式是将操作数存放在内存的数据区中。而对于内存寻址，既可以在指令中直接给出操作数的实际访存地址称为有效地址，也可以在指令的地址字段给出所谓的形式地址，在指令执行时，将形式地址依据某种方式变换为有效地址再取操作数。形成操作数的有效地址的方法，称为操作数的寻址方式。例如，一种单地址指令的结构如下所示，其中用X、I、A各字段组成该指令的操作数地址。操作码OP变址X间址I形式地址A由于指令中操作数字段的地址码由形式地址和寻址方式特征位等组合形成，因此，一般来说，指令中所给出的地址码，并不是操作数的有效地址。形式地址A，也称偏移量，它是指令字结构中给定的地址量。寻址方式特征位，此处由间址位和变址位组成。如果这条指令无间址和变址的要求，那么形式地址就是操作数的有效地址。如果指令中指明要变址或间址变换，那么形式地址就不是操作数的有效地址，而要经过指定方式的变换，才能形成有效地址。因此，寻址过程就是把操作数的形式地址，变换为操作数的有效地址的过程。由于大型机、微型机和单片机结构不同，从而形成了各种不同的操作数寻址方式。表列出了比较典型而常用的寻址方式，而图画出了它们形成有效地址的示意图。隐含寻址这种类型的指令，不是明显地给出操作数的地址，而是在指令中隐含着操作数的地址，如图a所示。例如，单地址的指令格式，就不是明显地在地址字段中指出第二操作数的地址，而是规定累加寄存器AC作为第二操作数地址。指令格式明显指出的仅是第一操作数的地址D。因此，累加寄存器AC对单地址指令格式来说是隐含地址。立即寻址指令的地址字段指出的不是操作数的地址，而是操作数本身，这种寻址方式称为立即寻址，如图b所示。指令中的操作数称为立即数。立即寻址方式的特点是指令中包含的操作数立即可用，节省了访问内存的时间。直接寻址直接寻址是一种基本的寻址方法，其特点是：在指令格式的地址字段中直接指出操作数在内存的地址A。由于操作数的地址直接给出而不需要经过某种变换，所以称这种寻址方式为直接寻址方式。图c是直接寻址方式的示意图。采用直接寻址方式时，指令字中的形式地址A就是操作数的有效地址EA。因此通常把形式地址A又称为直接地址。此时，由寻址模式给予指示，如X。如果用D表示操作数，那么直接寻址的表达式为DA。间接寻址间接寻址是相对于直接寻址而言的，在间接寻址的情况下，指令地址字段中的形式地址A不是操作数D的真正地址，而是操作数地址的指示器。图d画出了间接寻址方式的示意图。通常，在间接寻址情况下，由寻址特征位给予指示。如果把直接寻址和间接寻址结合起来，指令有如下形式：操作码IA若寻址特征位I，表示直接寻址，这时有效地址EAA；若I，则表示间接寻址，这时有效地址EAA。间接寻址方式是早期计算机中经常采用的方式，但由于两次访存，影响指令执行速度，现在较少使用。寄存器寻址当操作数不在内存中，而是放在CPU的通用寄存器中时，可采用寄存器寻址方式，如图e所示。显然，此时指令中给出的操作数地址不是内存的地址单元号，而是通用寄存器的编号，EAR。指令结构中的RR型指令，就是采用寄存器寻址方式的例子。寄存器间接寻址寄存器间接寻址与寄存器寻址的区别在于：指令格式中的寄存器内容不是操作数，而是操作数的地址，该地址指明的操作数在内存中，如图f所示。此时EAR。偏移寻址一种强有力的寻址方式是直接寻址和寄存器间接寻址方式的结合，它有几种形式，我们称它为偏移寻址，如图g所示。有效地址计算公式为EAAR它要求指令中有两个地址字段，至少其中一个是显示的。容纳在一个地址字段中的形式地址A直接被使用；另一个地址字段，或基于操作码的一个隐含引用，指的是某个专用寄存器。此寄存器的内容加上形式地址A就产生有效地址EA。常用的三种偏移寻址是相对寻址、基址寻址、变址寻址。相对寻址隐含引用的专用寄存器是程序计数器PC，即EAAPC，它是当前PC的内容加上指令地址字段中A的值。一般来说，地址字段的值在这种操作下被看成的补码数的值。因此有效地址是对当前指令地址的一个上下范围的偏移，它基于程序的局部性原理。使用相对寻址可节省指令中的地址位数，也便于程序在内存中成块搬动。基址寻址被引用的专用寄存器含有一个存储器地址，地址字段含有一个相对于该地址的偏移量通常是无符号整数。寄存器的引用可以是显式的，也可以是隐式的。基址寻址也利用了存储器访问的局部性原理。后面讲到的段寻址方式中，就采用了段基址寄存器，它提供了一个范围很大的存储空间。变址寻址地址域引用一个主存地址，被引用的专用寄存器含有对那个地址的正偏移量。这意味着主存地址位数大于寄存器中的偏移量位数，与基址寻址刚好相反。但是二者有效地址的计算方法是相同的。变址的用途是为重复操作的完成提供一种高效机制。例如，主存位置A处开始放一个数值列表，打算为表的每个元素加。我们需要取每个数位，对它加，然后再存回，故需要的有效地址序列是AAA直到最后一个位置。此时值A存入指令地址字段，再用一个变址寄存器初始化为。每次操作之后，变址寄存器内容增。此时，EAAR，RR。段寻址微型机中采用了段寻址方式，例如，它们可以给定一个位的地址，从而有MB存储空间的直接寻址能力。为此将整个MB空间存储器按照最大长度KB划分成若干段。在寻址一个内存具体单元时，由一个基地址再加上某些寄存器提供的位偏移量来形成实际的位物理地址。这个基地址就是CPU中的段寄存器。在形成位物理地址时，段寄存器中的位数会自动左移位，然后与位偏移量相加，即可形成所需的内存地址，如图所示。这种寻址方式的实质还是基址寻址。思考题你能说出段寻址方式的创新点吗？堆栈寻址堆栈有寄存器堆栈和存储器堆栈两种形式，它们都以先进后出的原理存储数据，如图h所示。不论是寄存器堆栈，还是存储器堆栈，数据的存取都与栈顶地址打交通，为此需要一个隐式或显式的堆栈指示器寄存器。数据进栈时使用PUSH指令，将数据压入栈顶地址，堆栈指示器减；数据退栈时，使用POP指令，数据从栈顶地址弹出，堆栈指示器加。从而保证了堆栈中数据先进后出的存取顺序。不同的指令系统采用不同的方式指定寻址方式。一般而言，有些指令固定使用某种寻址方式；有些指令则允许使用多种寻址方式，或者在指令中加入寻址方式字段指明，或者对不同的寻址方式分配不同的操作码而把它们看作不同的指令。有些指令系统会把常见的寻址方式组合起来，构成更复杂的复合寻址方式。寻址方式举例Pentium的寻址方式Pentium的外部地址总线宽度是位，但它也支持位物理地址空间。在实地址模式下，逻辑地址形式为段寻址方式：将段名所指定的段寄存器内容位左移位，低位补全，得到位段基地址，再加上段内偏移，即得位物理地址。在保护模式下，位段基地址加上段内偏移得到位线性地址LA。由存储管理部件将其转换成位的物理地址，如图所示。这个转换过程对指令系统和程序员是透明的。有个用户可见的段寄存器，每个保存相应段的起始地址、段长和访问权限。图Pentium寻址方式的计算无论是实地址模式还是保护模式，段基地址的获取方式已是固定的方式。因此这里介绍的寻址方式主要是指有效地址的获取方式，用字母EA表示。表列出了Pentium机的种寻址方式。下面对位寻址方式作几点说明。立即寻址：立即数可以是位、位、位的操作数，包含在指令中。寄存器寻址：一般指令或使用位通用寄存器AH，AL，BH，BL，CH，CL，DH，DL，或使用位通用寄存器AX，BX，CX，DX，SI，DI，SP，BP，或使用位通用寄存器EAX，EBX，ECX，EDX，ESI，EDI，ESP，EBP。对位浮点数操作，要使用一对位寄存器。有些指令用段寄存器CS，DS，ES，SS，FS，GS来实施寄存器寻址方式。以下的寻址方式引用的是存储器位置，通过指定包含此位置的段和离段起点的位移来说明存储器位置。偏移量寻址：也称直接寻址，偏移量就是操作数距段起点的位移。偏移量长度达位，能用于访问全局。基址寻址：基址寄存器B可以是上述通用寄存器中任何一个。基址寄存器B的内容为有效地址。基址偏移量寻址：基址寄存器B是位通用寄存器中任何一个。比例变址偏移量寻址：也称为变址寻址方式，变址寄存器I是位通用寄存器中除ESP外的任何一个，而且可将此变址寄存器内容乘以、、或的比例因子S，然后再加上偏移量而得到有效地址。、两种寻址方式是、两种寻址方式的组合，此时偏移量可有可无。相对寻址：适用于转移控制类指令。用当前指令指针寄存器EIP或IP的内容下一条指令地址加上一个有符号的偏移量，形成CS段的段内偏移。PowerPC寻址方式不像Pentium和大多数CISC机器，PowerPC是RISC机器，它采用了相当简单的一组寻址方式。如表所示，这些寻址方式按指令类型来分类。不同机器的指令系统是各不相同的。从指令的操作码功能来考虑，一个较完善的指令系统，应当有数据处理、数据存储、数据传送、程序控制四大类指令，具体有数据传送类指令、算术运算类指令、逻辑运算类指令、程序控制类指令、输入输出类指令、字符串类指令、系统控制类指令。数据传送指令数据传送指令主要包括取数指令、存数指令、传送指令、成组传送指令、字节交换指令、清寄存器指令、堆栈操作指令等，这类指令主要用来实现主存和寄存器之间，或寄存器和寄存器之间的数据传送。例如，通用寄存器Ri中的数存入主存；通用寄存器Ri中的数送到另一通用寄存器Rj；从主存中取数至通用寄存器Ri；寄存器清零或主存单元清零等。算术运算指令这类指令包括二进制定点加、减、乘、除指令，浮点加、减、乘、除指令，求反、求补指令，算术移位指令，算术比较指令，十进制加、减运算指令等。这类指令主要用于定点或浮点的算术运算，大型机中有向量运算指令，直接对整个向量或矩阵进行求和、求积运算。逻辑运算指令这类指令包括逻辑加、逻辑乘、按位加、逻辑移位等指令，主要用于无符号数的位操作、代码的转换、判断及运算。移位指令用来对寄存器的内容实现左移、右移或循环移位。左移时，若寄存器的数看作算术数，符号位不动，其他位左移，低位补零，右移时则高位补零，这种移位称算术移位。移位时，若寄存器的数为逻辑数，则左移或右移时，所有位一起移位，这种移位称逻辑移位。程序控制指令程序控制指令也称转移指令。计算机在执行程序时，通常情况下按指令计数器的现行地址顺序取指令。但有时会遇到特殊情况：机器执行到某条指令时，出现了几种不同结果，这时机器必须执行一条转移指令，根据不同结果进行转移，从而改变程序原来执行的顺序。这种转移指令称为条件转移指令。转移条件有进位标志C、结果为零标志Z、结果为负标志N、结果溢出标志V和结果奇偶标志P等。除各种条件转移指令外，还有无条件转移指令、转子程序指令、返回主程序指令、中断返回指令等。转移指令的转移地址一般采用直接寻址和相对寻址方式来确定。若采用直接寻址方式，则称为绝对转移，转移地址由指令地址码部分直接给出。若采用相对寻址方式，则称为相对转移，转移地址为当前指令地址PC的值和指令地址部分给出的偏移量之和。输入输出指令输入输出指令主要用来启动外围设备，检查测试外围设备的工作状态，并实现外部设备和CPU之间，或外围设备与外围设备之间的信息传送。各种不同机器的输入输出指令差别很大。例如，有的机器指令系统中含有输入输出指令，而有的机器指令系统中没有设置输入输出指令。这是因为后一种情况下外部设备的寄存器和存储器单元统一编址，CPU可以和访问内存一样去访问外部设备。换句话说，可以使用取数、存数指令来代替输入输出指令。字符串处理指令字符串处理指令是一种非数值处理指令，一般包括字符串传送、字符串转换把一种编码的字符串转换成另一种编码的字符串、字符串比较、字符串查找查找字符串中某一子串、字符串抽取提取某一子串、字符串替换把某一字符串用另一字符串替换等。这类第章指令系统指令在文字编辑中对大量字符串进行处理。特权指令特权指令是指具有特殊权限的指令。由于指令的权限最大，若使用不当，会破坏系统和其他用户信息。因此这类指令只用于操作系统或其他系统软件，一般不直接提供给用户使用。在多用户、多任务的计算机系统中特权指令必不可少。它主要用于系统资源的分配和管理，包括改变系统工作方式，检测用户的访问权限，修改虚拟存储器管理的段表、页表，完成任务的创建和切换等。其他指令除以上各类指令外，还有状态寄存器置位、复位指令、测试指令、暂停指令、空操作指令，以及其他一些系统控制用的特殊指令。CISC的指令系统一般多达二三百条，如VAX计算机有条指令，种寻址方式。Pentium机也有条指令，种寻址方式。但是对CISC进行的测试表明，最常使用的是一些最简单最基本的指令，仅占指令总数的，但在程序中出现的频率却占。因此从教学目的考虑，下面给出一个基本指令系统的操作，如表所示。从应用角度考虑，这些指令的功能也具有普遍意义，几乎所有计算机的指令系统中都能找到这些指令。RISC指令系统的最大特点是：选取使用频率最高的一些简单指令，指令条数少；指令长度固定，指令格式种类少，寻址方式种类少；只有取数存数指令访问存储器，其余指令的操作都在寄存器之间进行。表列出了典型RISC指令系统的基本特征。表比较了RISC和CICS的性能。设高级语言程序经编译后在机器上运行的机器指令数为I，每条机器指令执行时所需要的平均机器周期数是C，每个机器周期的执行时间为T。表中I、T为比值，C为实际周期数。由计算机执行程序的时间P的计算公式可以看出两种类型的机器的性能差异：PICT下面以PowerPC机为例来说明，该机是一个位字长的计算机，共有条指令。图示出了它的指令类型与格式。PowerPC机有如下五种指令类型：整数算术、逻辑、移位旋转循环移位指令；浮点算术指令；取数存数指令；条件寄存器指令；转移指令。计算机组成原理所有的指令都是位长，并有规整的格式。指令的前位网点表示指定操作码部分。在某些情况下在其他部分有此操作码的扩展，用于指定操作的细节也用网点表示。所有的取数存数、算术、逻辑指令，在操作码之后是两个位的寄存器字段，这表示可以使用个通用寄存器。转移指令包括了一个链接L位，它指示此转移指令之后的那条指令的有效地址是否放入链接寄存器。两种转移指令格式还包含一个A位，它指示寻址方式是绝对寻址还是PC相对寻址。对于条件转移指令，CR位字段指定条件寄存器中被测试的位，选项字段指向转移发生的条件如无条件转移；计数转移；计数转移；条件是真转移；条件是假转移；等等。进行计算的大多数指令算术、逻辑、浮点算术都包含一个R位，它指示运算结果是否应记录在条件寄存器中。这个特征对于转移预测处理是很有用的。浮点指令有三个源寄存器字段。多数情况下只使用两个源寄存器，少数指令涉及两个源寄存器内容相乘，然后再加上或减去第三个源寄存器内容。这种复合指令经常用在矩阵运算中，使得一部分内部积用“乘加”来实现。思考题你能说出PowerPC机指令系统的特点吗？汇编语言是计算机机器语言二进制指令代码进行符号化的一种表示方式，每一个基本汇编语句对应一条机器指令。为了有一个完整概念，表列出了嵌入式处理机ARM的汇编语言。其中操作数使用个寄存器r，rr，SP，Ir，PC，个存储字字节编址，连续的字的地址之间相差。在进行汇编语言程序设计时，可直接使用英文单词或其缩写表示指令，使用标识符表示数据或地址，从而有效地避免了记忆二进制的指令代码，不再由程序设计人员为指令和数据分配内存地址，直接调用操作系统的某些程序段完成输入输出及读写文件等操作功能。用编辑程序建立好的汇编语言源程序，需要经过系统软件中的“汇编器”翻译为机器语言程序之后，才能交付给计算机硬件系统去执行。本章小结一台计算机中所有机器指令的集合，称为这台计算机的指令系统。指令系统是表征一台计算机性能的重要因素，它的格式与功能不仅直接影响到机器的硬件结构，而且影响到系统软件。指令格式是指令字用二进制代码表示的结构形式，通常由操作码字段和地址码字段组成。操作码字段表征指令的操作特性与功能，而地址码字段指示操作数的地址。目前多采用二地址、单地址、零地址混合方式的指令格式。指令字长度分为：单字长、半字长、双字长三种形式。高档微机采用位长度的单字长形式。形成指令地址的方式，称为指令寻址方式。有顺序寻址和跳跃寻址两种，由指令计数器来跟踪。形成操作数地址的方式，称为数据寻址方式。操作数可放在专用寄存器、通用寄存器、内存和指令中。数据寻址方式有隐含寻址、立即寻址、直接寻址、间接寻址、寄存器寻址、寄存器间接寻址、相对寻址、基值寻址、变址寻址、块寻址、段寻址等多种。按操作数的物理位置不同，有RR型和RS型。前者比后者执行的速度快。堆栈是一种特殊的数据寻址方式，采用“先进后出”原理。按结构不同，分为寄存器堆栈和存储器堆栈。不同机器有不同的指令系统。一个较完善的指令系统应当包含数据传送类指令、算术运算类指令、逻辑运算类指令、程序控制类指令、IO类指令、字符串类指令、系统控制类指令。RISC指令系统是目前计算机发展的主流，也是CISC指令系统的改进，它的最大特点是：指令条数少；指令长度固定，指令格式和寻址方式种类少；只有取数存数指令访问存储器，其余指令的操作均在寄存器之间进行。汇编语言与具体机器的依赖性很强。为了了解该语言的特点，列出了目前较流行的嵌入式处理机ARM的汇编语言，以举一反三。当用计算机解决某个问题时，我们首先必须为它编写程序。程序是一个指令序列，这个序列明确告诉计算机应该执行什么操作，在什么地方找到用来操作的数据。一旦把程序装入内存储器，就可以由计算机部件来自动完成取指令和执行指令的任务。专门用来完成此项工作的计算机部件称为中央处理器，通常简称CPU。CPU对整个计算机系统的运行是极其重要的，它具有如下四方面的基本功能。指令控制程序的顺序控制，称为指令控制。由于程序是一个指令序列，这些指令的相互顺序不能任意颠倒，必须严格按程序规定的顺序进行，因此，保证机器按顺序执行程序是CPU的首要任务。操作控制一条指令的功能往往是由若干个操作信号的组合来实现的，因此，CPU管理并产生由内存取出的每条指令的操作信号，把各种操作信号送往相应的部件，从而控制这些部件按指令的要求进行动作。时间控制对各种操作实施时间上的定时，称为时间控制。因为在计算机中，各种指令的操作信号均受到时间的严格定时。另外，一条指令的整个执行过程也受到时间的严格定时。只有这样，计算机才能有条不紊地自动工作。数据加工所谓数据加工，就是对数据进行算术运算和逻辑运算处理。完成数据的加工处理，是CPU的根本任务。因为，原始信息只有经过加工处理后才能对人们有用。运算器和控制器是组成CPU的两大核心部件。随着VLSI技术的发展，CPU芯片外部的一些逻辑功能部件，如浮点运算器、cache、总线仲裁器等往往集成到CPU芯片内部。从教学目的出发，本章以CPU执行指令为主线来组织教学内容。为便于读者建立计算机的整机概念，突出主要矛盾，给出图所示的CPU模型。控制器由程序计数器、指令寄存器、指令译码器、时序产生器和操作控制器组成，它是发布命令的“决策机构”，即完成协调和指挥整个计算机系统的操作。控制器的主要功能有：从指令cache中取出一条指令，并指出下一条指令在指令cache中的位置。对指令进行译码或测试，并产生相应的操作控制信号，以便启动规定的动作。比如，一次数据cache的读写操作，一个算术逻辑运算操作，或一个输入输出操作。指挥并控制CPU、数据cache和输入输出设备之间数据流动的方向。运算器由算术逻辑运算单元ALU、通用寄存器、数据缓冲寄存器DR和程序状态字寄存器状态条件寄存器，PSWR组成，它是数据加工处理部件。相对控制器而言，运算器接受控制器的命令而进行动作，即运算器所进行的全部操作都是由控制器发出的控制信号来指挥的，所以它是执行部件。运算器有两个主要功能：执行所有的算术运算。执行所有的逻辑运算，并进行逻辑测试，如零值测试或两个值的比较。通常，一个算术操作产生一个运算结果，而一个逻辑操作则产生一个判决。鉴于第、章中已经详细讨论了运算器和存储器，所以本章重点放在控制器上。各种计算机的CPU可能有这样或那样的不同，但是在CPU中至少要有六类寄存器，如图所示。这些寄存器是：数据缓冲寄存器DR，指令寄存器IR，程序计数器PC，数据地址寄存器AR，通用寄存器RR，程序状态字寄存器PSWR。上述这些寄存器用来暂存一个计算机字。根据需要，可以扩充其数目。下面详细介绍这些寄存器的功能与结构。数据缓冲寄存器DR数据缓冲寄存器用来暂时存放ALU的运算结果，或由数据存储器读出的一个数据字，或来自外部接口的一个数据字。缓冲寄存器的作用是：作为ALU运算结果和通用寄存器之间信息传送中时间上的缓冲；补偿CPU和内存、外围设备之间在操作速度上的差别。指令寄存器IR指令寄存器用来保存当前正在执行的一条指令。当执行一条指令时，先把它从指令存储器简称指存读出，然后再传送至指令寄存器。指令划分为操作码和地址码字段，由二进制数字组成。为了执行任何给定的指令，必须对操作码进行测试，以便识别所要求的操作。一个叫做指令译码器的部件就是做这项工作的。指令寄存器中操作码字段OP的输出就是指令译码器的输入。操作码一经译码后，即可向操作控制器发出具体操作的特定信号。程序计数器PC为了保证程序能够连续地执行下去，CPU必须具有某些手段来确定下一条指令的地址。而程序计数器PC正是起到这种作用，所以它又称为指令计数器。在程序开始执行前，必须将它的起始地址，即程序的第一条指令所在的指存单元地址送入PC，因此PC的内容即是从指存提取的第一条指令的地址。当执行指令时，CPU将自动修改PC的内容，以便使其保持的总是将要执行的下一条指令的地址。由于大多数指令都是按顺序来执行的，所以修改的过程通常只是简单的对PC加。但是，当遇到转移指令如JMP指令时，那么后继指令的地址即PC的内容必须从指令寄存器中的地址字段取得。在这种情况下，下一条从指存取出的指令将由转移指令来规定，而不是像通常一样按顺序来取得。因此程序计数器的结构应当是具有寄存器和计数两种功能的结构。数据地址寄存器AR数据地址寄存器用来保存当前CPU所访问的数据存储器简称数存单元的地址。由于要对存储器阵列进行地址译码，所以必须使用地址寄存器来保持地址信息，直到一次读写操作完成。地址寄存器的结构和数据缓冲寄存器、指令寄存器一样，通常使用单纯的寄存器结构。信息的存入一般采用电位脉冲方式，即电位输入端对应数据信息位，脉冲输入端对应控制信号，在控制信号作用下，瞬时将信息打入寄存器。通用寄存器在我们的模型中，通用寄存器有个RR，其功能是：当算术逻辑单元ALU执行算术或逻辑运算时，为ALU提供一个工作区。例如，在执行一次加法运算时，选择两个操作数分别放在两个寄存器相加，所得的结果送回其中一个寄存器如R中，而R中原有的内容随即被替换。目前CPU中的通用寄存器，可多达个，甚至更多。其中任何一个可存放源操作数，也可存放结果操作数。在这种情况下，需要在指令格式中对寄存器号加以编址。从硬件结构来讲，需要使用通用寄存器堆结构，以便选择输入信息源。通用寄存器还用作地址指示器、变址寄存器、堆栈指示器等。程序状态字寄存器PSWR程序状态字寄存器又称为状态条件寄存器，保存由算术运算指令和逻辑运算指令运算或测试结果建立的各种条件代码，如运算结果进位标志C，运算结果溢出标志V，运算结果为零标志Z，运算结果为负标志N，等等。这些标志位通常分别由位触发器保存。除此之外，状态条件寄存器还保存中断和系统工作状态等信息，以便使CPU和系统能及时了解机器运行状态和程序运行状态。因此，状态条件寄存器是一个由各种状态条件标志拼凑而成的寄存器。从上面叙述可知，CPU中的类主要寄存器，每一类完成一种特定的功能。然而信息怎样才能在各寄存器之间传送呢也就是说，数据的流动是由什么部件控制的呢通常把许多寄存器之间传送信息的通路，称为数据通路。信息从什么地方开始，中间经过哪个寄存器或三态门，最后传送到哪个寄存器，都要加以控制。在各寄存器之间建立数据通路的任务，是由称为操作控制器的部件来完成的。操作控制器的功能，就是根据指令操作码和时序信号，产生各种操作控制信号，以便正确地选择数据通路，把有关数据打入到一个寄存器，从而完成取指令和执行指令的控制。根据设计方法不同，操作控制器可分为时序逻辑型和存储逻辑型两种。第一种称为硬布线控制器，它是采用时序逻辑技术来实现的；第二种称为微程序控制器，它是采用存储逻辑来实现的。本书重点介绍微程序控制器。操作控制器产生的控制信号必须定时，为此必须有时序产生器。因为计算机高速地进行工作，每一个动作的时间是非常严格的，不能太早也不能太迟。时序产生器的作用，就是对各种操作信号实施时间上的控制。CPU中除了上述组成部分外，还有中断系统、总线接口等其他功能部件，这些内容将在以后各章中陆续展开。我们知道，指令和数据从形式上看都是二进制代码，所以人们很难区分出这些代码是指令还是数据。然而CPU却能识别这些二进制代码：它能准确地判别出哪些是指令字，哪些是数据字，并将它们送往相应的部件。本节我们将讨论在一些典型的指令周期中，CPU的各部分是怎样工作的，从而能加深对这一问题的理解和体验。计算机之所以能自动地工作，是因为CPU能从存放程序的内存里取出一条指令并执行这条指令；紧接着又是取指令，执行指令如此周而复始，构成了一个封闭的循环。除非遇到停机指令，否则这个循环将一直继续下去，其过程如图所示。CPU每取出一条指令并执行这条指令，都要完成一系列的操作，这一系列操作所需的时间通常叫做一个指令周期。换言之，指令周期是取出图取指令执行指令序列一条指令并执行这条指令的时间。由于各种指令的操作功能不同，因此各种指令的指令周期是不尽相同的。指令周期常常用若干个CPU周期数来表示，CPU周期又称为机器周期。CPU访问一次内存所花的时间较长，因此通常用内存中读取一个指令字的最短时间来规定CPU周期。这就是说，一条指令的取出阶段通常称为取指需要一个CPU周期时间。而一个CPU周期时间又包含有若干个时钟周期又称T周期或节拍脉冲，它是处理操作的最基本单位。这些Ti周期的总和规定了一个CPU周期的时间宽度。图示出了采用定长CPU周期的指令周期示意图。从这个例子知道，取出和执行任何一条指令所需的最短时间为两个CPU周期。需要说明的是，不同的计算机系统中定义的术语未必相同。例如，在不采用三级时序的系统中，机器周期就相当于时钟周期。单周期CPU和多周期CPU单周期CPU在一个时钟周期内完成从指令取出到得到结果的所有工作，指令系统中所有指令执行时间都以最长时间的指令为准，因而效率低，当前较少采用。多周期CPU把指令的执行分成多个阶段，每个阶段在一个时钟周期内完成，因而时钟周期短，不同指令所用周期数可以不同。以下仅讨论多周期CPU。表列出了由条指令组成的一个简单程序。这条指令是有意安排的，因为它们是非常典型的，既有RR型指令，又有RS型指令；既有算术逻辑指令，又有访存指令，还有程序转移指令。我们将在下面通过CPU取出一条指令并执行这条指令的分解动作，来具体认识每条指令的指令周期。MOV是一条RR型指令，其指令周期如图所示。它需要两个CPU周期，其中取指周期需要一个CPU周期，执行周期需要一个CPU周期。取指周期中CPU完成三件事：从指存取出指令；对程序计数器PC加，以便为取下一条指令做好准备；对指令操作码进行译码或测试，以便确定进行什么操作。执行周期中CPU根据对指令操作码的译码或测试，进行指令所要求的操作。对MOV指令来说，执行周期中完成到两个通用寄存器R、R之间的数据传送操作。由于时间充足，执行周期一般只需要一个CPU周期。取指周期第一条指令的取指周期示于图。假定表的程序已装入指存中，因而在此阶段内，CPU的动作如下：程序计数器PC中装入第一条指令地址八进制；PC的内容被放到指令地址总线ABUSI上，对指存进行译码，并启动读命令；从号地址读出的MOV指令通过指令总线IBUS装入指令寄存器IR；程序计数器内容加，变成，为取下一条指令做好准备；指令寄存器中的操作码OP被译码；CPU识别出是MOV指令。至此，取指周期结束。执行指令阶段执行周期MOV指令的执行周期示于图中，在此阶段，CPU的动作如下：操作控制器OC送出控制信号到通用寄存器，选择R作源寄存器，选择R作目标寄存器；OC送出控制信号到ALU，指定ALU做传送操作；OC送出控制信号，打开ALU输出三态门，将ALU输出送到数据总线DBUS上。注意，任何时候DBUS上只能有一个数据；OC送出控制信号，将DBUS上的数据打入到数据缓冲寄存器DR；OC送出控制信号，将DR中的数据打入到目标寄存器R，R的内容由变为。至此，MOV指令执行结束。LAD指令的指令周期LAD指令是RS型指令，它先从指令存储器取出指令，然后从数据存储器号单元取出数据装入通用寄存器R，原来R中存放的数据被更换成。由于一次访问指存，一次访问数存，LAD指令的指令周期需要个CPU周期，如图所示。LAD指令的取指周期在LAD指令的取指周期中，CPU的动作完全与MOV指令取指周期中一样图，只是PC提供的指令地址为，按此地址从指令存储器读出“LDAR”指令放入IR中，然后将PC，使PC内容变成，为取下条ADD指令做好准备。以下ADD、STO、JMP三条指令的取指周期中，CPU的动作完全与MOV指令一样，不再细述。LAD指令的执行周期LAD指令的执行周期如图所示。CPU执行的动作如下：操作控制器OC发出控制命令打开IR输出三态门，将指令中的直接地址码放到数据总线DBUS上；OC发出操作命令，将地址码装入数存地址寄存器AR；OC发出读命令，将数存号单元中的数读出到DBUS上；OC发出命令，将DBUS上的数据装入缓冲寄存器DR；OC发出命令，将DR中的数装入通用寄存器R，原来R中的数被冲掉。至此，LAD指令执行周期结束。注意，数据总线DBUS上分时进行了地址传送和数据传送，所以需要个CPU周期。ADD指令是RR型指令，在运算器中用两个寄存器R和R的数据进行加法运算。指令周期只需两个CPU周期，其中一个是取指周期，与图相同。下面只讲执行周期，CPU完成的动作如图所示。操作控制器OC送出控制命令到通用寄存器，选择R做源寄存器，R做目标寄存器；OC送出控制命令到ALU，指定ALU做R和R的加法操作；OC送出控制命令，打开ALU输出三态门，运算结果放到DBUS上；OC送出控制命令，将DBUS上数据打入缓冲寄存器DR；ALU产生的进位信号保存在状态字寄存器PSWR中；OC送出控制命令，将DR装入R，R中原来的内容被冲掉。至此，ADD指令执行周期结束。STO指令是RS型指令，它先访问指存取出STO指令，然后按R地址访问数存，将R写入到号单元。由于一次访问指存，一次访问数存，因此指令周期需个CPU周期，其中执行周期为个CPU周期，如图所示。下面也只讲执行周期，CPU完成的动作如图所示。操作控制器OC送出操作命令到通用寄存器，选择R做数据存储器的地址单元；OC发出操作命令，打开通用寄存器输出三态门不经ALU以节省时间，将地址放到DBUS上；OC发出操作命令，将地址打入AR，并进行数存地址译码；OC发出操作命令到通用寄存器，选择R，作为数存的写入数据；OC发出操作命令，打开通用寄存器输出三态门，将数据放到DBUS上；OC发出操作命令，将数据写入数存号单元，它原先的数据被冲掉。至此，STO指令执行周期结束。注意，DBUS是单总线结构，先送地址，后送数据，必须分时传送。JMP指令是一条无条件转移指令，用来改变程序的执行顺序。指令周期为两个CPU周期，其中取指周期为个CPU周期，执行周期为个CPU周期图。下面也只讲执行周期，CPU完成的动作如图所示。OC发生操作控制命令，打开指令寄存器IR的输出三态门，将IR中的地址码发送到DBUS上；OC发出操作控制命令，将DBUS上的地址码打入到程序计数器PC中，PC中的原先内容被更换。于是下一条指令不是从号单元取出，而是转移到号单元取出。至此，JMP指令执行周期结束。应当指出，执行“JMP”指令时，我们此处所给的五条指令组成的程序进入了死循环，除非人为停机，否则这个程序将无休止地运行下去。当然，我们此处所举的转移地址是随意的，仅仅用来说明转移指令能够改变程序的执行顺序而已。CPU取指令与执行指令的动态过程，请见CAI动画视频演示。在上面介绍了五条典型指令的指令周期，从而使我们对一条指令的取指过程和执行过程有了一个较深刻的印象。然而我们是通过画示意图或数据通路图来解释这些过程的。这样做的目的主要是为了教学。但是在进行计算机设计时，如果用这种办法来表示指令周期，那就显得过于烦琐，而且也没有必要。在进行计算机设计时，可以采用方框图语言来表示指令的指令周期。一个方框代表一个CPU周期，方框中的内容表示数据通路的操作或某种控制操作。除了方框，还需要一个菱形符号，它通常用来表示某种判别或测试，不过时间上它依附于紧接它的前面一个方框的CPU周期，而不单独占用一个CPU周期。我们把前面的五条典型指令加以归纳，用方框图语言表示的指令周期示于图。可以明显地看到，所有指令的取指周期是完全相同的，而且是一个CPU周期。但是指令的执行周期，由于各条指令的功能不同，所用的CPU周期是各不相同的，其中MOV、ADD、JMP指令是一个CPU周期；LAD和STO指令是两个CPU周期。框图中DBUS代表数据总线，ABUSD代表数存地址总线，ABUSI代表指存地址总线，RDD代表数存读命令，WED代表数存写命令，RDI代表指存读命令。图中，还有一个“”符号，我们称它为公操作符号。这个符号表示一条指令已经执行完毕，转入公操作。所谓公操作，就是一条指令执行完毕后，CPU所开始进行的一些操作，这些操作主要是CPU对外围设备请求的处理，如中断处理、通道处理等。如果外围设备没有向CPU请求交换数据，那么CPU又转向指存取下一条指令。由于所有指令的取指周期是完全一样的，因此，取指令也可认为是公操作。这是因为，一条指令执行结束后，如果没有外设请求，CPU一定转入“取指令”操作。在日常生活中，人们学习、工作和休息都有一个严格的作息时间。比如，早晨起床；上课，午休，每个教师和学生都必须严格遵守这一规定，在规定的时间里上课，在规定的时间里休息，不得各行其是，否则就难以保证正常的教学秩序。CPU中也有一个类似“作息时间”的东西，它称为时序信号。计算机所以能够准确、迅速、有条不紊地工作，正是因为在CPU中有一个时序信号产生器。机器一旦被启动，即CPU开始取指令并执行指令时，操作控制器就利用定时脉冲的顺序和不同的脉冲间隔，有条理、有节奏地指挥机器的动作，规定在这个脉冲到来时做什么，在那个脉冲到来时又做什么，给计算机各部分提供工作所需的时间标志。为此，需要采用多级时序体制。再来考虑节中提出的一个问题：用二进制码表示的指令和数据都放在内存里，那么CPU是怎样识别出它们是数据还是指令呢事实上，通过节讲述指令周期后，就自然会得出如下结论：从时间上来说，取指令事件发生在指令周期的第一个CPU周期中，即发生在“取指令”阶段，而取数据事件发生在“执行指令”阶段。从空间上来说，如果取出的代码是指令，那么一定送往指令寄存器，如果取出的代码是数据，那么一定送往运算器。由此可见，时间控制对计算机来说太重要了。不仅如此，在一个CPU周期中，又把时间分为若干个小段，以便规定在这一小段时间中CPU干什么，在那一小段时间中CPU又干什么，这种时间约束对CPU来说是非常必要的，否则就可能造成丢失信息或导致错误的结果。因为时间的约束是如此严格，以至于时间进度既不能来得太早，也不能来得太晚。总之，计算机的协调动作需要时间标志，而时间标志则是用时序信号来体现的。一般来说，操作控制器发出的各种控制信号都是时间因素时序信号和空间因素部件位置的函数。如果忽略了时间因素，那么我们学习计算机硬件时往往就会感到困难，这一点务请读者加以注意。组成计算机硬件的器件特性决定了时序信号最基本的体制是电位脉冲制。这种体制最明显的一个例子，就是当实现寄存器之间的数据传送时，数据加在触发器的电位输入端，而打入数据的控制信号加在触发器的时钟输入端。电位的高低，表示数据是还是，而且要求打入数据的控制信号到来之前，电位信号必须已稳定。这是因为，只有电位信号先建立，打入到寄存器中的数据才是可靠的。当然，计算机中有些部件，如算术逻辑运算单元ALU只用电位信号工作就可以了。但尽管如此，运算结果还是要送入通用寄存器，所以最终还是需要脉冲信号来配合。硬布线控制器中，时序信号往往采用主状态周期节拍电位节拍脉冲三级体制。一个节拍电位表示一个CPU周期的时间，它表示了一个较大的时间单位；在一个节拍电位中又包含若干个节拍脉冲，以表示较小的时间单位；而主状态周期可包含若干个节拍电位，所以它是最大的时间单位。主状态周期可以用一个触发器的状态持续时间来表示。在微程序控制器中，时序信号比较简单，一般采用节拍电位节拍脉冲二级体制。就是说，它只有一个节拍电位，在节拍电位中又包含若干个节拍脉冲T周期。节拍电位表示一个CPU周期的时间，而节拍脉冲把一个CPU周期划分成几个较小的时间间隔。根据需要，这些时间间隔可以相等，也可以不相等。前面已分析了指令周期中需要的一些典型时序。时序信号产生器的功能是用逻辑电路来实现这些时序。各种计算机的时序信号产生电路是不尽相同的。一般来说，大型计算机的时序电路比较复杂，而微型机的时序电路比较简单，这是因为前者涉及的操作动作较多，后者涉及的操作动作较少。另一方面，从设计操作控制器的方法来讲，硬布线控制器的时序电路比较复杂，而微程序控制器的时序电路比较简单。然而不管是哪一类，时序信号产生器最基本的构成是一样的。图示出了微程序控制器中使用的时序信号产生器的结构图，它由时钟源、环形脉冲发生器、节拍脉冲和读写时序译码、启停控制逻辑等部分组成。时钟源时钟源用来为环形脉冲发生器提供频率稳定且电平匹配的方波时钟脉冲信号。它通常由石英晶体振荡器和与非门组成的正反馈振荡电路组成，其输出送至环形脉冲发生器。环形脉冲发生器环形脉冲发生器的作用是产生一组有序的间隔相等或不等的脉冲序列，以便通过译码电路来产生最后所需的节拍脉冲，其电路参见动画视频。节拍脉冲和存储器读写时序我们假定在一个CPU周期中产生四个等间隔的节拍脉冲TT，每个节拍脉冲的脉冲宽度均为ns，因此一个CPU周期便是ns，在下一个CPU周期中，它们又按固定的时间关系重复。不过注意，图中画出的节拍脉冲信号是TT，它们在逻辑关系上与TT是完全一致的，是后者经过启停控制逻辑中与门以后的输出，图中忽略了一级与门的时间延迟细节。存储器读写时序信号RD、WE用来进行存储器的读写操作。在硬布线控制器中，节拍电位信号是由时序产生器本身通过逻辑电路产生的，一个节拍电位持续时间正好包容若干个节拍脉冲。然而在微程序设计的计算机中，节拍电位信号可由微程序控制器提供。一个节拍电位持续时间，通常也是一个CPU周期时间。例如，图中的RD，WE信号持续时间均为ns，而一个CPU周期也正好是ns。关于微程序控制器如何产生节拍电位信号，将留在节介绍。启停控制逻辑机器一旦接通电源，就会自动产生原始的节拍脉冲信号TT，然而，只有在启动机器运行的情况下，才允许时序产生器发出CPU工作所需的节拍脉冲TT。为此需要由启停控制逻辑来控制TT的发送。同样，对读写时序信号也需要由启停逻辑加以控制。图给出作者发明的启停控制逻辑，它是一个实用有效的工具性电路。启停控制逻辑的核心是一个运行标志触发器Cr。当运行触发器为“”时，原始节拍脉冲TT和读写时序信号RD，WE通过门电路发送出去，变成CPU真正需要的节拍脉冲信号TT和读写时序RD，WE。反之，当运行触发器“”时，就关闭时序产生器。由于启动计算机是随机的，停机也是随机的，为此必须要求：当计算机启动时，一定要从第个节拍脉冲前沿开始工作，而在停机时一定要在第个节拍脉冲结束后关闭时序产生器。只有这样，才能使发送出去的脉冲都是完整的脉冲。图中，在CrD触发器下面加上一个SR触发器，且用T信号作Cr触发器的时钟控制端，那么就可以保证在T的前沿开启时序产生器，而在T的后沿关闭时序产生器。从节知道，机器指令的指令周期是由数目不等的CPU周期数组成，CPU周期数的多少反映了指令动作的复杂程度，即操作控制信号的多少。对一个CPU周期而言，也有操作控制信号的多少与出现的先后问题。这两种情况综合在一起，说明每条指令和每个操作控制信号所需的时间各不相同。控制不同操作序列时序信号的方法，称为控制器的控制方式。常用的有同步控制、异步控制、联合控制三种方式，其实质反映了时序信号的定时方式。同步控制方式在任何情况下，已定的指令在执行时所需的机器周期数和时钟周期数都是固定不变的，称为同步控制方式。根据不同情况，同步控制方式可选取如下方案。采用完全统一的机器周期执行各种不同的指令。这意味着所有指令周期具有相同的节拍电位数和相同的节拍脉冲数。显然，对简单指令和简单的操作来说，将造成时间浪费。采用不定长机器周期。将大多数操作安排在一个较短的机器周期内完成，对某些时间紧张的操作，则采取延长机器周期的办法来解决。中央控制与局部控制结合。将大部分指令安排在固定的机器周期完成，称为中央控制，对少数复杂指令乘、除、浮点运算采用另外的时序进行定时，称为局部控制。异步控制方式异步控制方式的特点是：每条指令、每个操作控制信号需要多少时间就占用多少时间。这意味着每条指令的指令周期可由多少不等的机器周期数组成；也可以是当控制器发出某一操作控制信号后，等待执行部件完成操作后发回“回答”信号，再开始新的操作。显然，用这种方式形成的操作控制序列没有固定的CPU周期数节拍电位或严格的时钟周期节拍脉冲与之同步。联合控制方式此为同步控制和异步控制相结合的方式。一种情况是，大部分操作序列安排在固定的机器周期中，对某些时间难以确定的操作则以执行部件的“回答”信号作为本次操作的结束标志。例如，CPU访问主存时，依靠其送来的“READY”信号作为读写周期的结束标志半同步方式。另一种情况是，机器周期的节拍脉冲数固定，但是各条指令周期的机器周期数不固定。例如，节所讲的微程序控制就是这样。微程序控制器同硬布线控制器相比较，具有规整性、灵活性、可维护性等一系列优点，因而在计算机设计中逐渐取代了早期采用的硬布线控制器，并已广泛地应用。在计算机系统中，微程序设计技术是利用软件方法来设计硬件的一门技术。微程序控制的基本思想，就是仿照通常的解题程序的方法，把操作控制信号编成所谓的“微指令”，存放到一个只读存储器里。当机器运行时，一条又一条地读出这些微指令，从而产生全机所需要的各种操作控制信号，使相应部件执行所规定的操作。微命令和微操作一台数字计算机基本上可以划分为两大部分控制部件和执行部件。控制器就是控制部件，而运算器、存储器、外围设备相对控制器来讲，就是执行部件。那么两者之间是怎样进行联系的呢控制部件与执行部件的一种联系，就是通过控制线。控制部件通过控制线向执行部件发出各种控制命令，通常把这种控制命令称为微命令，而执行部件接受微命令后所进行的操作，称为微操作。控制部件与执行部件之间的另一种联系是反馈信息。执行部件通过反馈线向控制部件反映操作情况，以便使控制部件根据执行部件的“状态”来下达新的微命令，这也称为“状态测试”。微操作在执行部件中是最基本的操作。由于数据通路的结构关系，微操作可分为相容性和相斥性两种。所谓相容性的微操作，是指在同时或同一个CPU周期内可以并行执行的微操作。所谓相斥性的微操作，是指不能在同时或不能在同一个CPU周期内并行执行的微操作。图示出了一个简单运算器模型，其中ALU为算术逻辑单元，R、R、R为三个寄存器。三个寄存器的内容都可以通过多路开关从ALU的X输入端或Y输入端送至ALU，而ALU的输出可以送往任何一个寄存器或同时送往R，R，R三个寄存器。在我们给定的数据通路中，多路开关的每个控制门仅是一个常闭的开关，它的一个输入端代表来自寄存器的信息，而另一个输入端则作为操作控制端。一旦两个输入端都有输入信号时，它才产生一个输出信号，从而在控制线能起作用的一个时间宽度中来控制信息在部件中流动。图中每个开关门由控制器中相应的微命令来控制，例如，开关门由控制器中编号为的微命令控制，开关门由编号为的微命令控制，如此等等。三个寄存器R、R、R的时钟输入端、、也需要加以控制，以便在ALU运算完毕而输出公共总线上电平稳定时，将结果打入到某一寄存器。另外，我们假定ALU只有，，M传送三种操作。Cy为最高进位触发器，有进位时该触发器状态为“”。ALU的操作加、减、传送在同一个CPU周期中只能选择一种，不能并行，所以，，M传送三个微操作是相斥性的微操作。类似地，、、三个微操作是相斥性的，、、三个微操作也是相斥性的。ALU的X输入微操作、、与Y输入的、、这两组信号中，任意两个微操作也都是相容性的。微指令和微程序在机器的一个CPU周期中，一组实现一定操作功能的微命令的组合，构成一条微指令。图表示一个具体的微指令结构，微指令字长为位，它由操作控制和顺序控制两大部分组成。操作控制部分用来发出管理和指挥全机工作的控制信号。为了形象直观，在我们的例子中，该字段为位，每一位表示一个微命令。每个微命令的编号同图所示的数据通路相对应，具体功能示于微指令格式的左上部。当操作控制字段某一位信息为“”时，表示发出微命令；而某一位信息为“”时，表示不发出微命令。例如，当微指令字第位信息为“”时，表示发出LDR的微命令，那么运算器将执行ALUR的微操作，把公共总线上的信息打入到寄存器R。同样，当微指令第位信息为“”时，表示向ALU发出进行“”的微命令，因而ALU就执行“”的微操作。注意，图中微指令给出的控制信号都是节拍电位信号，它们的持续时间都是一个CPU周期。如果要用来控制图所示的运算器数据通路，势必会出现问题，因为前面的这些微命令信号还要加入时间控制，例如同节拍脉冲T相与而得到LDRLDR信号，如图a所示。在这种情况下，控制器最后发给运算器的个控制信号中，个是节拍脉冲信号LDR，LDR，LDR，其他个都是节拍电位信号，从而保证运算器在前ns时间内进行运算。ns后运算完毕，公共总线上输出稳定的运算结果，由LDR或LDR，LDR信号打入到相应的寄存器，其时间关系如图所示。微指令格式中的顺序控制部分用来决定产生下一条微指令的地址。下面我们将会知道，一条机器指令的功能是用许多条微指令组成的序列来实现的，这个微指令序列通常称为微程序。既然微程序是由微指令组成的，那么当执行当前一条微指令时，必须指出后继微指令的地址，以便当前一条微指令执行完毕后，取出下一条微指令。决定后继微指令地址的方法不只一种。在我们所举的例子中，由微指令顺序控制字段的位信息来决定。其中位用来直接给出下一条微指令的地址。第、两位作为判别测试标志。当此两位为“”时，表示不进行测试，直接按顺序控制字段第位给出的地址取下一条微指令；当第位或第位为“”时，表示要进行P或P的判别测试，根据测试结果，需要对第位的某一位或几位进行修改，然后按修改后的地址取下一条微指令。微程序控制器原理框图微程序控制器原理框图如图所示。它主要由控制存储器、微指令寄存器和地址转移逻辑三大部分组成，其中微指令寄存器分为微地址寄存器和微命令寄存器两部分。控制存储器控制存储器用来存放实现全部指令系统的微程序，它是一种只读型存储器。一旦微程序固化，机器运行时则只读不写。其工作过程是：每读出一条微指令，则执行这条微指令；接着又读出下一条微指令，又执行这一条微指令读出一条微指令并执行微指令的时间总和称为一个微指令周期。通常，在串行方式的微程序控制器中，微指令周期就是只读存储器的工作周期。控制存储器的字长就是微指令字的长度，其存储容量视机器指令系统而定，即取决于微程序的数量。对控制存储器的要求是速度快，读出周期要短。微指令寄存器微指令寄存器用来存放由控制存储器读出的一条微指令信息。其中微地址寄存器决定将要访问的下一条微指令的地址，而微命令寄存器则保存一条微指令的操作控制字段和判别测试字段的信息。地址转移逻辑在一般情况下，微指令由控制存储器读出后直接给出下一条微指令的地址，通常我们简称微地址，这个微地址信息就存放在微地址寄存器中。如果微程序不出现分支，那么下一条微指令的地址就直接由微地址寄存器给出。当微程序出现分支时，意味着微程序出现条件转移。在这种情况下，通过判别测试字段P和执行部件的“状态条件”反馈信息，去修改微地址寄存器的内容，并按改好的内容去读下一条微指令。地址转移逻辑就承担自动完成修改微地址的任务。微程序举例一条机器指令是由若干条微指令组成的序列来实现的。因此，一条机器指令对应着一个微程序，而微程序的总和便可实现整个的指令系统。现在我们举“十进制加法”指令为例，具体看一看微程序控制的过程。“十进制加法”指令的功能是用BCD码来完成十进制数的加法运算。在十进制运算时，当相加两数之和大于时，便产生进位。可是用BCD码完成十进制数运算时，当和数大于时，必须对和数进行加修正。这是因为，采用BCD码后，在两数相加的和数小于等于时，十进制运算的结果是正确的；而当两数相加的和数大于时，结果不正确，必须加修正后才能得出正确结果。假定指令存放在指存中，数据a、b及常数已存放在图中的R、R、R三寄存器中，因此，完成十进制加法的微程序流程图示于图中。执行周期要求先进行ab运算，然后判断结果有无进位：当进位标志Cy，不减；当Cy，减去，从而获得正确结果。可以看到，十进制加法微程序流程图由四条微指令组成，每一条微指令用一个长方框表示。第一条微指令为“取指”微指令，它是一条专门用来取机器指令的微指令，任务有三：从内存取出一条机器指令，并将指令放到指令寄存器IR。在我们的例子中，取出的是“十进制加法”指令。对程序计数器加，做好取下一条机器指令的准备。对机器指令的操作码用P进行判别测试，然后修改微地址寄存器内容，给出下一条微指令的地址。在微程序流程图中，每一条微指令的地址用数字示于长方框的右上角。注意，菱形符号代表判别测试，它的动作在时间上依附于第一条微指令。第二条微指令完成ab运算。第三条微指令完成ab运算，同时又进行判别测试。不过这一次的判别标志不是P而是P，P用来测试进位标志Cy。根据测试结果，微程序或者转向公操作，或者转向第四条微指令。当微程序转向公操作用符号表示时，如果没有外围设备请求服务，那么又转向取下一条机器指令。与此相对应，第三条微指令和第四条微指令的下一个微地址就又指向第一条微指令，即“取指”微指令。假设我们已经按微程序流程图编好了微程序，并已事先存放到控制存储器中。同时假定用图所示的运算器做执行部件。机器启动时，只要给出控制存储器的首地址，就可以调出所需要的微程序。为此，首先给出第一条微指令的地址，经地址译码，控制存储器选中所对应的“取指”微指令，并将其读到微指令寄存器中。第一条微指令的二进制编码是在这条微指令中，操作控制字段有五个微命令：第位发出PCABUSI，将PC内容送到指存地址总线ABUSI；第位发出指存读命令RDI，于是指存执行读操作，从指存单元取出“十进制加法”指令放到指令总线IBUS上，其数据通路可参阅图。第位发出LDIR，将IBUS上的“十进制加法”指令打入到指令寄存器IR。假定“十进制加法”指令的操作码为，那么指令寄存器的OP字段现在是。第位发出PC微命令，使程序计数器加，做好取下一条机器指令的准备。另一方面，微指令的顺序控制字段指明下一条微指令的地址是，但是由于判别字段中第位为，表明是P测试，因此不是下一条微指令的真正的地址。P测试的“状态条件”是指令寄存器的操作码字段，即用OP字段作为形成下一条微指令的地址，于是微地址寄存器的内容修改成。在第二个CPU周期开始时，按照这个微地址读出第二条微指令，它的二进制编码是在这条微指令中，操作控制部分发出如下四个微命令：RX，RY，，LDR，于是运算器完成RRR的操作，其数据通路如图所示。与此同时，这条微指令的顺序控制部分由于判别测试字段P和P均为，表示不进行测试，于是直接给出下一条微指令的地址为。在第三个CPU周期开始时，按照这个微地址读出第三条微指令，它的二进制编码是这条微指令的操作控制部分发出RX，RY，，LDR的四个微命令，运算器完成RRR的操作。顺序控制部分由于判别字段中P为，表明进行P测试，测试的“状态条件”为进位标志Cy。换句话说，此时微地址需要进行修改，我们假定用Cy的状态来修改微地址寄存器的最后一位：当Cy时，下一条微指令的地址为；当Cy时，下一条微指令的地址为。显然，在测试一个状态时，有两条微指令作为要执行的下一条微指令的“候选”微指令。现在假设Cy，则要执行的下一条微指令地址为。在第四个CPU周期开始时，按微地址读出第四条微指令，其编码是微指令发出RX，RY，，LDR的微命令，运算器完成了RRR的操作功能。顺序控制部分直接给出下一条微指令的地址为，按该地址取出的微指令是“取指”微指令。如果第三条微指令进行测试时Cy，那么微地址仍保持为，将不执行第四条微指令而直接由第三条微指令转向公操作。当下一个CPU周期开始时，“取指”微指令又从内存读出第二条机器指令。如果这条机器指令是STO指令，那么经过P测试，就转向执行STO指令的微程序。以上是由四条微指令序列组成的简单微程序。从这个简单的控制模型中，我们就可以看到微程序控制的主要思想及大概过程。CPU周期与微指令周期的关系在串行方式的微程序控制器中，微指令周期等于读出微指令的时间加上执行该条微指令的时间。为了保证整个机器控制信号的同步，可以将一个微指令周期时间设计得恰好和CPU周期时间相等。图示出了某计算机中CPU周期与微指令周期的时间关系。一个CPU周期为s，它包含四个等间隔的节拍脉冲TT，每个脉冲宽度为ns。用T作为读取微指令的时间，用TTT时间作为执行微指令的时间。例如，在前ns时间内运算器进行运算，在ns时间的末尾运算器已经运算完毕，可用T上升沿将运算结果打入某个寄存器。与此同时可用T间隔读取下条微指令，经ns时间延迟，下条微指令又从只读存储器读出，并用T上升沿打入到微指令寄存器。如忽略触发器的翻转延迟，那么下条微指令的微命令信号就从T上升沿起开始有效，直到下一条微指令读出后打入微指令寄存器为止。因此一条微指令的保持时间恰好是s，也就是一个CPU周期的时间。机器指令与微指令的关系经过上面的讲述，应该说，我们能够透彻地了解机器指令与微指令的关系。也许读者会问：一会儿取机器指令，一会儿取微指令，它们之间到底是什么关系现在让我们把前面内容归纳一下，作为对此问题的问答。一条机器指令对应一个微程序，这个微程序是由若干条微指令序列组成的。因此，一条机器指令的功能是由若干条微指令组成的序列来实现的。简言之，一条机器指令所完成的操作划分成若干条微指令来完成，由微指令进行解释和执行。从指令与微指令，程序与微程序，地址与微地址的一一对应关系来看，前者与内存储器有关，后者与控制存储器有关。与此相关，也有相对应的硬设备，如图所示。我们在讲述本章节时，曾讲述了指令与机器周期概念，并归纳了五条典型指令的指令周期参见图。现在我们看到，图就是这五条指令的微程序流程图，每一个CPU周期就对应一条微指令。这就告诉我们如何设计微程序，也将使我们进一步体验到机器指令与微指令的关系。已经了解了微程序控制器的基本原理。这使我们认识到，如何确定微指令的结构，乃是微程序设计的关键。设计微指令结构应当追求的目标是：有利于缩短微指令字长度；有利于减小控制存储器的容量；有利于提高微程序的执行速度；有利于对微指令的修改；有利于提高微程序设计的灵活性。微命令编码微命令编码，就是对微指令中的操作控制字段采用的表示方法。通常有以下三种方法。直接表示法采用直接表示法的微指令结构如图所示，其特点是操作控制字段中的每一位代表一个微命令。这种方法的优点是简单直观，其输出直接用于控制。缺点是微指令字较长，因而使控制存储器容量较大。编码表示法编码表示法是把一组相斥性的微命令信号组成一个小组即一个字段，然后通过小组字段译码器对每一个微命令信号进行译码，译码输出作为操作控制信号，其微指令结构如图所示。采用字段译码的编码方法，可以用较小的二进制信息位表示较多的微命令信号。例如，位二进制位译码后可表示个微命令，位二进制位译码后可表示个微命令。与直接控制法相比，字段译码控制法可使微指令字大大缩短，但由于增加译码电路，使微程序的执行速度稍稍减慢。目前在微程序控制器设计中，字段直接译码法使用较普遍。混合表示法这种方法是把直接表示法与字段编码法混合使用，以便能综合考虑微指令字长、灵活性、执行微程序速度等方面的要求。另外，在微指令中还可附设一个常数字段。该常数可作为操作数送入ALU运算，也可作为计数器初值用来控制微程序循环次数。微地址的形成方法微指令执行的顺序控制问题，实际上是如何确定下一条微指令的地址问题。通常，产生后继微地址有两种方法。计数器方式这种方法同用程序器计数来产生机器指令地址的方法相类似。在顺序执行微指令时，后继微地址由现行微地址加上一个增量来产生；在非顺序执行微指令时，必须通过转移方式，使现行微指令执行后，转去执行指定后继微地址的下一条微指令。在这种方法中，微地址寄存器通常改为计数器。为此，顺序执行的微指令序列就必须安排在控制存储器的连续单元中。计数器方式的基本特点是：微指令的顺序控制字段较短，微地址产生机构简单。但是多路并行转移功能较弱，速度较慢，灵活性较差。多路转移方式一条微指令具有多个转移分支的能力称为多路转移。例如，“取指”微指令根据操作码OP产生多路微程序分支而形成多个微地址。在多路转移方式中，当微程序不产生分支时，后继微地址直接由微指令的顺序控制字段给出；当微程序出现分支时，有若干“后选”微地址可供选择：即按顺序控制字段的“判别测试”标志和“状态条件”信息来选择其中一个微地址，其原理如图所示。“状态条件”有位标志，可实现微程序两路转移，涉及微地址寄存器的一位；“状态条件”有位标志，可实现微程序路转移，涉及微地址寄存器的两位。以此类推，“状态条件”有n位标志，可实现微程序n路转移，涉及微地址寄存器的n位。因此执行转移微指令时，根据状态条件可转移到n个微地址中的一个。多路转移方式的特点是，能以较短的顺序控制字段配合，实现多路并行转移，灵活性好，速度较快，但转移地址逻辑需要用组合逻辑方法设计。微指令格式微指令的编译方法是决定微指令格式的主要因素。考虑到速度、成本等原因，在设计计算机时采用不同的编译法。因此微指令的格式大体分成两类：水平型微指令和垂直型微指令。水平型微指令一次能定义并执行多个并行操作微命令的微指令，称为水平型微指令。例如节中所讲的微指令即为水平型微指令。水平型微指令的一般格式如下：按照控制字段的编码方法不同，水平型微指令又分为三种：第一种是全水平型不译码法微指令，第二种是字段译码法水平型微指令，第三种是直接和译码相混合的水平型微指令。垂直型微指令微指令中设置微操作码字段，采用微操作码编译法，由微操作码规定微指令的功能，称为垂直型微指令。垂直型微指令的结构类似于机器指令的结构。它有微操作码，在一条微指令中只有个微操作命令，每条微指令的功能简单，因此，实现一条机器指令的微程序要比水平型微指令编写的微程序长得多。它是采用较长的微程序结构去换取较短的微指令结构。下面用条垂直型微指令的微指令格式加以说明。设微指令字长为位，微操作码位。寄存器寄存器传送型微指令。其功能是把源寄存器数据送目标寄存器。位为微操作码，源寄存器和目标寄存器编址各位，可指定个寄存器。运算控制型微指令。其功能是选择ALU的左、右两输入源信息，按ALU字段所指定的运算功能种操作进行处理，并将结果送入暂存器中。左、右输入源编址可指定种信息源之一。访问主存微指令。其功能是将主存中一个单元的信息送入寄存器或者将寄存器的数据送往主存。存储器编址是指按规定的寻址方式进行编址。第、位指定读操作或写操作取其之一。条件转移微指令。其功能是根据测试对象的状态决定是转移到D所指定的微地址单元，还是顺序执行下一条微指令。位D字段不足以表示一个完整的微地址，但可以用来替代现行PC的低位地址。测试条件字段有位，可规定种测试条件。水平型微指令与垂直型微指令的比较水平型微指令并行操作能力强，效率高，灵活性强，垂直型微指令则较差。在一条水平型微指令中，设置有控制信息传送通路门以及进行所有操作的微命令，因此在进行微程序设计时，可以同时定义比较多的并行操作的微命令，来控制尽可能多的并行信息传送，从而使水平型微指令具有效率高及灵活性强的优点。在一条垂直型微指令中，一般只能完成一个操作，控制一两个信息传送通路，因此微指令的并行操作能力低，效率低。水平型微指令执行一条指令的时间短，垂直型微指令执行时间长。因为水平型微指令的并行操作能力强，所以与垂直型微指令相比，可以用较少的微指令数来实现一条指令的功能，从而缩短了指令的执行时间。而且当执行一条微指令时，水平型微指令的微命令一般直接控制对象，而垂直型微指令要经过译码，会影响速度。由水平型微指令解释指令的微程序，有微指令字较长而微程序短的特点。垂直型微指令则相反，微指令字较短而微程序长。水平型微指令用户难以掌握，而垂直型微指令与指令比较相似，相对来说，比较容易掌握。水平型微指令与机器指令差别很大，一般需要对机器的结构、数据通路、时序系统以及微命令很精通才能设计。垂直型微指令的设计思想在Pentium、安腾系列机中得到了应用。动态微程序设计微程序设计技术还有静态微程序设计和动态微程序设计之分。对应于一台计算机的机器指令只有一组微程序，而且这一组微程序设计好之后，一般无须改变而且也不好改变，这种微程序设计技术称为静态微程序设计。本节前面讲述的内容基本上属于静态微程序设计的概念。当采用EPROM作为控制存储器时，还可以通过改变微指令和微程序来改变机器的指令系统，这种微程序设计技术称为动态微程序设计。采用动态微程序设计时，微指令和微程序可以根据需要加以改变，因而可在一台机器上实现不同类型的指令系统。这种技术又可用于仿真其他机器指令系统，以便扩大机器的功能。基本思想硬布线控制器是早期设计计算机的一种方法。这种方法是把控制部件看作产生专门固定时序控制信号的逻辑电路，而此逻辑电路以使用最少元件和取得最高操作速度为设计目标。一旦控制部件构成后，除非重新设计和物理上对它重新布线，否则要想增加新的控制功能是不可能的。这种逻辑电路是一种由门电路和触发器构成的复杂树形逻辑网络，故称之为硬布线控制器。硬布线控制器是计算机中最复杂的逻辑部件之一。当执行不同的机器指令时，通过激活一系列彼此很不相同的控制信号来实现对指令的解释，其结果使得控制器往往很少有明确的结构而变得杂乱无章。结构上的这种缺陷使得硬布线控制器的设计和调试非常复杂且代价很大。正因为如此，硬布线控制器被微程序控制器所取代。但是随着新一代机器及VLSI技术的发展，硬布线逻辑设计思想又得到了重视。图示出了硬布线控制器的结构方框图。逻辑网络的输入信号来源有三个：来自指令操作码译码器的输出Im；来自执行部件的反馈信息Bj；来自时序产生器的时序信号，包括节拍电位信号M和节拍脉冲信号T。其中节拍电位信号就是节规定的机器周期CPU周期信号，节拍脉冲信号是时钟周期信号。逻辑网络N的输出信号就是微操作控制信号，它用来对执行部件进行控制。另有一些信号则根据条件变量来改变时序发生器的计数顺序，以便跳过某些状态，从而可以缩短指令周期。显然，硬布线控制器的基本原理，归纳起来可叙述为：某一微操作控制信号C是指令操作码译码器输出Im、时序信号节拍电位Mi，节拍脉冲Tk和状态条件信号Bj的逻辑函数，即CfImMiTkBj这个控制信号是用门电路、触发器等许多器件采用布尔代数方法来设计实现的。当机器加电工作时，某一操作控制信号C在某条特定指令和状态条件下，在某一序号的特定节拍电位和节拍脉冲时间间隔中起作用，从而激活这条控制信号线，对执行部件实施控制。显然，从指令流程图出发，就可以一个不漏地确定在指令周期中各个时刻必须激活的所有操作控制信号。例如，对引起一次主存读操作的控制信号C来说，当节拍电位M，取指令时被激活；而节拍电位M，三条指令LAD，ADD，AND取操作数时也被激活，此时指令译码器的LAD，ADD，AND输出均为，因此C的逻辑表达式可由下式确定：CMMLADADDAND一般来说，还要考虑节拍脉冲和状态条件的约束，所以每一控制信号Cn可以由以下形式的布尔代数表达式来确定：与微程序控制相比，硬布线控制的速度较快。其原因是微程序控制中每条微指令都要从控存中读取一次，影响了速度，而硬布线控制主要取决于电路延迟。因此在某些超高速新型计算机结构中，又选用了硬布线控制器，或与微程序控制器混合使用。指令执行流程前面在介绍微程序控制器时曾提到，一个机器指令对应一个微程序，而一个微指令周期则对应一个节拍电位时间。一条机器指令用多少条微指令来实现，则该条指令的指令周期就包含了多少个节拍电位时间，因而对时间的利用是十分经济的。由于节拍电位是用微指令周期来体现的，因而时序信号比较简单，时序计数器及其译码电路只需产生若干节拍脉冲信号即可。在用硬布线实现的操作控制器中，通常，时序产生器除了产生节拍脉冲信号外，还应当产生节拍电位信号。这是因为，在一个指令周期中要顺序执行一系列微操作，需要设置若干节拍电位来定时。如图所示五条指令的指令周期，其指令流程可用图来表示。由图可知，所有指令的取指周期放在M节拍。在此节拍中，操作控制器发出微操作控制信号，完成从指令存储器取出一条机器指令。指令的执行周期由M、M两个节拍来完成。MOV、ADD和JMP指令只需一个节拍M即可完成。LAD和STO指令需要两个节拍M、M。为了简化节拍控制，指令的执行过程可采用同步工作方式，即各条指令的执行阶段均用最长节拍数M来考虑。这样，对MOV、ADD、JMP三条指令来讲，在M节拍中没有什么操作。显然，由于采用同步工作方式，长指令和短指令对节拍时间的利用都是一样的。这对短指令来讲，在时间的利用上是浪费的，因而也降低了CPU的指令执行速度，影响到机器的速度指标。为了改变这种情况，在设计短指令流程时可以跳过某些节拍，如MOV指令、ADD指令和JMP指令执行M节拍后跳过M节拍而返回M节拍。当然在这种情况下，节拍信号发生器的电路相应就要复杂一些。节拍电位信号的产生电路与节拍脉冲产生电路十分类似，它可以在节拍脉冲信号时序器的基础上产生，运行中以循环方式工作，并与节拍脉冲保持同步。微操作控制信号的产生在微程序控制器中，微操作控制信号由微指令产生，并且可以重复使用。在硬布线控制器中，某一微操作控制信号由布尔代数表达式描述的输出函数产生。设计微操作控制信号的方法和过程是，根据所有的机器指令流程图，寻找出产生同一个微操作信号的所有条件，并与适当的节拍电位和节拍脉冲组合，从而写出其布尔代数表达式并进行简化，然后用门电路或可编程器件来实现。为了防止遗漏，设计时可按信号出现在指令流程图中的先后次序来书写，然后进行归纳和简化。要特别注意控制信号是电位有效还是脉冲有效，如果是脉冲有效，必须加入节拍脉冲信号进行相“与”。计算机自诞生到现在，人们追求的目标之一是很高的运算速度，因此并行处理技术便成为计算机发展的主流。早期的计算机基于冯诺伊曼的体系结构，采用的是串行处理。这种计算机的主要特征是：计算机的各个操作如读写存储器，算术或逻辑运算，IO操作只能串行地完成，即任一时刻只能进行一个操作。而并行处理则使得以上各个操作能同时进行，从而大大提高了计算机的速度。广义地讲，并行性有着两种含义：一是同时性，指两个以上事件在同一时刻发生；二是并发性，指两个以上事件在同一时间间隔内发生。计算机的并行处理技术可贯穿于信息加工的各个步骤和阶段，概括起来，主要有三种形式：时间并行；空间并行；时间并行空间并行。时间并行指时间重叠，在并行性概念中引入时间因素，让多个处理过程在时间上相互错开，轮流重叠地使用同一套硬件设备的各个部分，以加快硬件周转而赢得速度。时间并行性概念的实现方式就是采用流水处理部件。这是一种非常经济而实用的并行技术，能保证计算机系统具有较高的性能价格比。目前的高性能微型机几乎无一例外地使用了流水技术。空间并行指资源重复，在并行性概念中引入空间因素，以“数量取胜”为原则来大幅度提高计算机的处理速度。大规模和超大规模集成电路的迅速发展为空间并行技术带来了巨大生机，因而成为目前实现并行处理的一个主要途径。空间并行技术主要体现在多处理器系统和多计算机系统。但是在单处理器系统中也得到了广泛应用。时间并行空间并行指时间重叠和资源重复的综合应用，既采用时间并行性又采用空间并行性。例如，奔腾CPU采用了超标量流水技术，在一个机器周期中同时执行两条指令，因而既具有时间并行性，又具有空间并行性。显然，第三种并行技术带来的高速效益是最好的。图为现代流水计算机的系统组成原理示意图。其中CPU按流水线方式组织，通常由三大部分组成：指令部件、指令队列、执行部件。这三个功能部件可以组成一个级流水线。程序和数据存储在主存中，主存通常采用多体交叉存储器，以提高访问速度。cache是一个高速缓冲存储器，用以弥补主存和CPU速度上的差异。指令部件本身又构成一个流水线，即指令流水线，它由取指令、指令译码、计算操作数地址、取操作数等几个过程段组成。指令队列是一个先进先出FIFO的寄存器栈，用于存放经过译码的指令和取来的操作数。它也是由若干个过程段组成的流水线。执行部件可以具有多个算术逻辑运算部件，这些部件本身又用流水线方式构成。由图可见，当执行部件正在执行第I条指令时，指令队列中存放着IIIk条指令，而与此同时，指令部件正在取第Ik条指令。为了使存储器的存取时间能与流水线的其他各过程段的速度相匹配，一般都采用多体交叉存储器。例如，IBM计算机，根据一个机器周期输出一条指令的要求、存储器的存取周期、CPU访问存储器的频率，采用了模交叉存储器。在现有的流水线计算机中，存储器几乎都是采用交叉存取的方式工作。执行段的速度匹配问题，通常采用并行的运算部件以及部件流水线的工作方式来解决。一般采用的方法包括：将执行部件分为定点执行部件和浮点执行部件两个可并行执行的部分，分别处理定点运算指令和浮点运算指令；在浮点执行部件中，又有浮点加法部件和浮点乘除部件，它们也可以同时执行不同的指令；浮点运算部件都以流水线方式工作。流水CPU的时空图计算机的流水处理过程非常类似于工厂中的流水装配线。为了实现流水，首先把输入的任务或过程分割为一系列子任务，并使各子任务能在流水线的各个阶段并发地执行。当任务连续不断地输入流水线时，在流水线的输出端便连续不断地吐出执行结果，从而实现了子任务级的并行性。下面通过时空图来证明这个结论。图a表示流水CPU中一个指令周期的任务分解。假设指令周期包含四个子过程：取指令IF、指令译码ID、执行运算EX、结果写回WB，每个子过程称为过程段Si，这样，一个流水线由一系列串联的过程段组成。各个过程段之间设有高速缓冲寄存器，以暂时保存上一过程段子任务处理的结果。在统一的时钟信号控制下，数据从一个过程段流向相邻的过程段。图b表示非流水计算机的时空图。对非流水计算机来说，上一条指令的四个子过程全部执行完毕后才能开始下一条指令。因此，每隔个机器时钟周期才有一个输出结果。图c表示流水计算机的时空图。对流水计算机来说，上一条指令与下一条指令的四个子过程在时间上可以重叠执行。因此，当流水线满载时，每一个时钟周期就可以输出一个结果。图d表示超标量流水计算机的时空图。一般的流水计算机因只有一条指令流水线，所以称为标量流水计算机。所谓超标量流水，是指它具有两条以上的指令流水线。如图所示，当流水线满载时，每一个时钟周期可以执行条指令。显然，超标量流水计算机是时间并行技术和空间并行技术的综合应用。Pentium微型机就是一个超标量流水计算机。直观比较后发现：标量流水计算机在个单位时间中执行了条指令，超标量流水计算机在个单位时间中执行了条指令，而非流水计算机在个单位时间中仅执行了条指令。显然，流水技术的应用，使计算机的速度大大提高了。流水线分类一个计算机系统可以在不同的并行等级上采用流水线技术。常见的流水线形式有：指令流水线指指令步骤的并行。将指令流的处理过程划分为取指令、译码、取操作数、执行、写回等几个并行处理的过程段。目前，几乎所有的高性能计算机都采用了指令流水线。算术流水线指运算操作步骤的并行。如流水加法器、流水乘法器、流水除法器等。现代计算机中已广泛采用了流水的算术运算器。例如，STAR为级流水运算器，TIASC为级流水运算器，CRAY为级流水运算器，等等。处理机流水线又称为宏流水线，是指程序步骤的并行。由一串级联的处理机构成流水线的各个过程段，每台处理机负责某一特定的任务。数据流从第一台处理机输入，经处理后被送入与第二台处理机相联的缓冲存储器中。第二台处理机从该存储器中取出数据进行处理，然后传送给第三台处理机，如此串联下去。随着高档微处理器芯片的出现，构造处理机流水线将变得容易了。处理机流水线应用在多机系统中。要使流水线具有良好的性能，必须使流水线畅通流动，不发生断流。但由于流水过程中会出现以下三种相关冲突，实现流水线的不断流是困难的，这三种相关是资源相关、数据相关和控制相关。资源相关所谓资源相关，是指多条指令进入流水线后在同一机器时钟周期内争用同一个功能部件所发生的冲突。假定一条指令流水线由五段组成，分别为取指令IF、指令译码ID、计算有效地址或执行EX、访存取数MEM、结果写寄存器堆WB。由表看出，在时钟时，第I条的MEM段与第I条的IF段都要访问存储器。当数据和指令放在同一个存储器且只有一个访问口时，便发生两条指令争用存储器资源的相关冲突。解决冲突的办法，一是第I条指令停顿一拍后再启动，二是增设一个存储器，将指令和数据分别放在两个存储器中。数据相关在一个程序中，如果必须等前一条指令执行完毕后，才能执行后一条指令，那么这两条指令就是数据相关的。第章中央处理器在流水计算机中，指令的处理是重叠进行的，前一条指令还没有结束，第二、三条指令就陆续地开始工作。由于多条指令的重叠处理，当后继指令所需的操作数，刚好是前一指令的运算结果时，便发生“先读后写”的数据相关冲突。例如：ADDRRR；RRRSUBRRR；RRRANDRRR；RRR如表所示，ADD指令在时钟时将运算结果写入寄存器堆R，但SUB指令在时钟时读寄存器堆R到ALU运算，AND指令在时钟时读寄存器堆R到ALU运算。本来ADD指令应该先写R，SUB指令后读R，结果变成SUB指令先读R，ADD指令后写R。因而发生了SUB、ADD两条指令间先读后写的数据相关冲突；AND、ADD两条指令间发生了同时读写数据的相关冲突。为了解决数据相关冲突，流水CPU的运算器中特意设置若干运算结果缓冲寄存器，暂时保留运算结果，以便于后继指令直接使用，这称为“向前”或定向传送技术。控制相关控制相关冲突是由转移指令引起的。当执行转移指令时，依据转移条件的产生结果，可能为顺序取下条指令；也可能转移到新的目标地址取指令，从而使流水线发生断流。为了减小转移指令对流水线性能的影响，常用以下两种转移处理技术。延迟转移法由编译程序重排指令序列来实现。基本思想是“先执行再转移”，即发生转移取时并不排空指令流水线，而是让紧跟在转移指令Ib之后已进入流水线的少数几条指令继续完成。如果这些指令是与Ib结果无关的有用指令，那么延迟损失时间片正好得到了有效的利用。转移预测法硬件方法来实现，依据指令过去的行为来预测将来的行为。通过使用转移取和顺序取两路指令预取队列器以及目标指令cache，可将转移预测提前到取指阶段进行，以获得良好的效果。第一台RISC精简指令系统计算机于年在美国加州大学伯克利分校问世。它是在继承了CISC复杂指令系统计算机的成功技术，并在克服了CISC机器缺点的基础上发展起来的。尽管众多厂家生产的RISC处理器实现手段有所不同，但是RISC概括的三个基本要素是普遍认同的。这三个要素是：一个有限的简单的指令系统；CPU配备大量的通用寄存器；强调对指令流水线的优化。RISC的目标绝不是简单的缩减指令系统，而是使处理器的结构更简单，更合理，具有更高的性能和执行效率，并降低处理器的开发成本。基于三要素的RISC机器的特征如下。使用等长指令，目前的典型长度是B。寻址方式少且简单，一般为二三种，最多不超过种，绝不出现存储器间接寻址方式。只有取数指令、存数指令访问存储器。指令中最多出现RS型指令，绝不出现SS型指令。指令系统中的指令数目一般少于种，指令格式一般少于种。指令功能简单，控制器多采用硬布线方式，以期更快的执行速度。平均而言，所有指令的执行时间为一个处理时钟周期。指令格式中，用于指派整数寄存器的个数不少于个，用于指派浮点数寄存器的个数不少于个。强调通用寄存器资源的优化使用。支持指令流水并强调指令流水的优化使用。RISC技术的复杂性在它的编译程序，因此软件系统开发时间比CISC机器长。表中列出了RISC与CISC的主要特征对比。MCCPU结构框图MCCPU是Motorola公司的产品，其目标是以较好的性能价格比作为PC和工作站的通用微处理器。它是一个RISC处理器。处理器有个执行功能部件，三个cache和一个控制部件。其结构框图如图所示。在三个cache中，一个是指令cache，一个是数据cache，它们能同时完成取指令和取数据，还有一个是目标指令cacheTIC，它用于保存转移目标指令。两个寄存器堆：一个是通用寄存器堆，用于整数和地址指针，其中有RR共个寄存器位长；另一个是扩展寄存器堆，用于浮点数，其中有XX共个寄存器长度可以是位、位或位。个执行功能部件是：取数存数读写部件、整数运算部件个、浮点加法部件、乘法部件、除法部件、图形处理部件个、位处理部件、用于管理流水线的超标量指令派遣转移部件。所有这些cache、寄存器堆、功能部件，在处理器中通过六条位宽的内部总线相连接。其中条源总线，条源总线，条目标总线。MC的指令流水线由于MC是超标量流水CPU，所以指令流水线在每个机器时钟周期完成两条指令。流水线分为三段：取指和译码FD段、执行EX段、写回WB段，如图所示。FD段需要一个时钟周期，完成由指令cache取一对指令并译码，并从寄存器堆取操作数，然后判断是否把指令发射到EX段。如果所要求的资源操作数寄存器、目标寄存器、功能部件发生资源使用冲突，或与先前指令发生数据相关冲突，或转移指令将转向新的目标指令地址，则FD段不再向EX段发射指令，或不发射紧接转移指令之后的指令。EX段对于大多数指令只需一个时钟周期，某些指令可能多于一个时钟周期。EX段执行的结果在WB段写回寄存器堆，WB段只需时钟周期的一半。为了解决数据相关冲突，EX段执行的结果一方面在WB段写回寄存器堆，另一方面经定向传送电路提前传送到ALU，可直接被当前进入EX的指令所使用。图a表示MCCPU超标量流水线正常运行情况。指令动态调度策略采用按序发射、按序完成的指令动态调度策略。指令派遣单元总是发出单一地址，然后从指令cache取出此地址及下一地址的两条指令。译码后总是力图同一时间发射这两条指令到EX段。若这对指令的第一条指令由于资源冲突或数据相关冲突，则这一对指令都不发射，两条指令在FD段停顿，等待资源的可用或数据相关的消除。若第一条指令能发射而第二条指令不能发射，则只发射第一条指令，而第二条指令停顿并与新取的指令之一进行配对等待发射，此时原第二条指令作为配对的第一条指令对待。可见，这样实现的方式是按序发射，图b示出了指令配对情况。为了判定能否发射指令，使用了计分牌方法。计分牌是一个位向量，寄存器堆中每个寄存器都有一个相应位。每当一条指令发射时，它预约的目的寄存器在位向量中的相应位上置“”，表示该寄存器“忙”。当指令执行完毕并将结果写回此目的寄存器时，该位被清除。于是，每当判定是否发射一条指令STO存数指令和转移指令除外时，一个必须满足的条件是：该指令的所有目的寄存器、源寄存器在位向量中的相应位都已被清除。否则，指令必须停顿等待这些位被清除。为了减少经常出现的数据相关，流水线采用了如前面所述的定向传送技术，将前面指令执行的结果直接送给后面指令所需此源操作数的功能部件，并同时将位向量中的相应位清除。因此，指令发射和定向传送是同时进行的。如何实现按序完成呢因为执行段有多个功能部件，很可能出现无序完成的情况。为此，提供了一个FIFO指令执行队列，称为历史缓冲器。每当一条指令发射出去，它的副本就被送到FIFO队尾。队列最多能保存条指令。只有前面的所有指令执行完，这条指令才到达队首。当它到达队首并执行完毕后才离开队列。对于转移处理，使用了延迟转移法和目标指令cacheTIC法。延迟转移是个选项n。如果采用这个选项指令如bcndn，则跟随在转移指令后的指令将被发射。如果不采用这个选项，则在转移指令发射之后的转移延迟时间片内没有任何指令被发射。延迟转移通过编译程序来调度。TIC是一个项的全相联cache，每项能保存转移目标路径的前两条指令。当一条转移指令译码并命中cache时，能同时由TIC取来它的目标路径的前面两条指令。所谓动态流水线调度，是对指令进行重新排序以避免处理器阻塞的硬件支持。图描述了动态流水线调度模型。通常流水线分为个主要单元：一个取指令发射单元，多个功能单元个或更多，一个指令完成单元。第一个单元用于取指令，将指令译码，并将它们送到相应的功能单元执行。每个功能单元都有自己的缓冲器，称为保留站，它用于暂存操作数和操作指令。当缓冲器中包含了所有的操作数，并且功能单元已经就绪，结果就被计算出来。当完成结果时，它就被发送到等待特殊结果的储存站及指令完成单元。而指令完成单元确定何时能够安全地将结果放入到寄存器堆或内存中。指令完成单元中的缓冲器通常称为重排序缓冲器，它也可以用来提供操作数，其工作方式类似于旁路逻辑在静态调度流水线中的工作方式。一且结果写回寄存器堆，便可以从寄存器堆中直接取得操作数，就像一般流水线取得操作数的方式一样。本章小结CPU是计算机的中央处理部件，具有指令控制、操作控制、时间控制、数据加工等基本功能。早期的CPU由运算器和控制器组成。随着集成电路技术的发展，当今的CPU芯片变成运算器、cache和控制器三大部分，CPU中至少有六类寄存器：指令寄存器、程序计数器、地址寄存器、数据缓冲寄存器、通用寄存器、状态条件寄存器。CPU从存储器取出一条指令并执行这条指令的时间和称为指令周期。CISC中，由于各种指令的操作功能不同，各种指令的指令周期是不尽相同的。划分指令周期，是设计操作控制器的重要依据。RISC中，由于流水执行，大部分指令在一个机器周期完成。时序信号产生器提供CPU周期也称机器周期所需的时序信号。操作控制器利用这些时序信号进行定时，有条不紊地取出一条指令并执行这条指令。微程序设计技术是利用软件方法设计操作控制器的一门技术，具有规整性、灵活性、可维护性等一系列优点，因而在计算机设计中得到了广泛应用。但是随着ULSI技术的发展和对机器速度的要求，硬布线逻辑设计思想又得到了重视。硬布线控制器的基本思想是：某一微操作控制信号是指令操作码译码输出、时序信号和状态条件信号的逻辑函数，即用布尔代数写出逻辑表达式，然后用门电路、触发器等器件实现。从简单到复杂，举出一个CPU模型，目的在于使读者由浅入深地理解教学内容，这对于建立整机概念是十分重要的。不论微型机还是超级计算机，并行处理技术已成为计算机技术发展的主流。并行处理技术可贯穿于信息加工的各个步骤和阶段。概括起来，主要有三种形式：时间并行；空间并行；时间并行空间并行。流水CPU是以时间并行性为原理构造的处理机，是一种非常经济而实用的并行技术。目前的高性能微处理机几乎无一例外地使用了流水技术。流水技术中的主要问题是资源相关、数据相关和控制相关，为此需要采取相应的技术对策，才能保证流水线畅通而不断流。RISCCPU是继承CISC的成功技术，并在克服CISC机器缺点的基础上发展起来的。RISC机器的三个基本要素是：一个有限的简单指令系统；CPU配备大量的通用寄存器；强调指令流水线的优化。RISC机器一定是流水CPU，但流水CPU不一定是RISC机器。如奔腾CPU是流水CPU，但奔腾机是CISC机器。数字计算机是由若干系统功能部件构成的，这些系统功能部件在一起工作才能形成一个完整的计算机系统。总线是构成计算机系统的互联机构，是多个系统功能部件之间进行数据传送的公共通路。借助于总线连接，计算机在各系统功能部件之间实现地址、数据和控制信息的交换，并在争用资源的基础上进行工作。一个单处理器系统中的总线，大致分为三类：CPU内部连接各寄存器及运算部件之间的总线，称为内部总线。CPU同计算机系统的其他高速功能部件，如存储器、通道等互相连接的总线，称为系统总线。中、低速IO设备之间互相连接的总线，称为IO总线。总线的特性物理特性总线的物理特性是指总线的物理连接方式，包括总线的根数，总线的插头、插座的形状，引脚线的排列方式等。功能特性功能特性描述总线中每一根线的功能。如地址总线的宽度指明了总线能够直接访问存储器的地址空间范围；数据总线的宽度指明了访问一次存储器或外设时能够交换数据的位数；控制总线包括CPU发出的各种控制命令如存储器读写、IO读写，请求信号与仲裁信号，外设与CPU的时序同步信号，中断信号，DMA控制信号等。电气特性电气特性定义每一根线上信号的传递方向及有效电平范围。一般规定送入CPU的信号叫输入IN信号，从CPU发出的信号叫输出OUT信号。例如，地址总线是输出线，数据总线是双向传送的信号线，这两类信号线都是高电平有效。控制总线中各条线一般是单向的，有CPU发出的，也有进入CPU的，有高电平有效的，也有低电平有效的。总线的电平都符合相应电平规范的定义。时间特性时间特性定义了每根线在什么时间有效。也就是说，只有规定了总线上各信号有效的时序关系，CPU才能正确无误地使用。总线的标准化相同的指令系统，相同的功能，不同厂家生产的各功能部件在实现方法上几乎没有相同的，但各厂家生产的相同功能部件却可以互换使用，其原因何在呢就是因为它们都遵守了相同的系统总线的要求，这就是系统总线的标准化问题。例如，微型计算机系统中采用的标准总线，从ISA总线位，带宽MBs发展到EISA总线位，带宽MBs，又发展到VESA总线位，带宽MBs，而PCI总线又进一步过渡到位，MHz。衡量总线性能的重要指标是总线带宽，它定义为总线本身所能达到的最高传输速率，单位是兆字节每秒MBs。实际带宽会受到总线布线长度、总线驱动器接收器性能、连接在总线上的模块数等因素的影响。这些因素将造成信号在总线上的畸变和延时，使总线最高传输速率受到限制。任何数字计算机的用途很大程度上取决于它所能连接的外围设备的范围。遗憾的是，由于外围设备种类繁多，速度各异，不可能简单地把外围设备直接连接在CPU上。因此必须寻找一种方法，以便将外围设备同某种计算机连接起来，使它们在一起可以正常工作。通常，这项任务用适配器部件来完成。通过适配器可以实现高速CPU与低速外设之间工作速度上的匹配和同步，并完成计算机和外设之间的所有数据传送和控制。适配器通常简称为接口。大多数总线都是以相同方式构成的，其不同之处仅在于总线中数据线和地址线的宽度，以及控制线的多少及其功能。然而，总线的排列布置与其他各类部件的连接方式对计算机系统的性能来说，将起着十分重要的作用。根据连接方式不同，单机系统中采用的总线结构有两种基本类型：单总线结构；多总线结构。单总线结构在许多单处理器的计算机中，使用单一的系统总线来连接CPU、主存和IO设备，称为单总线结构，如图所示。在单总线结构中，要求连接到总线上的逻辑部件必须高速运行，以便在某些设备需要使用总线时，能迅速获得总线控制权；而当不再使用总线时，能迅速放弃总线控制权。否则，由于一条总线由多种功能部件共用，可能导致很大的时间延迟。在单总线系统中，当CPU取一条指令时，首先把程序计数器PC中的地址同控制信息一起送至总线上。该地址不仅加至主存，同时也加至总线上的所有外围设备。然而，只有与出现在总线上的地址相对应的设备，才执行数据传送操作。我们知道，在“取指令”情况下的地址是主存地址，所以，此时该地址所指定的主存单元的内容一定是一条指令，而且将被传送给CPU。取出指令之后，CPU将检查操作码。操作码规定了对数据要执行什么操作，以及数据是流进CPU还是流出CPU。在单总线系统中，对输入输出设备的操作，完全和主存的操作方法一样来处理。这样，当CPU把指令的地址字段送到总线上时：如果该地址字段对应的地址是主存地址，则主存予以响应，从而在CPU和主存之间发生数据传送，而数据传送的方向由指令操作码决定。如果该指令地址字段对应的是外围设备地址，则外围设备译码器予以响应，从而在CPU和与该地址相对应的外围设备之间发生数据传送，而数据传送的方向由指令操作码决定。在单总线系统中，某些外围设备也可以指定地址。此时，外围设备通过与CPU中的总线控制部件交换控制信号的方式占有总线。一旦外围设备得到总线控制权后，就可向总线发送地址信号，使总线上的地址线置为适当的代码状态，以便指定它将要与哪一个设备进行信息交换。如果一个由外围设备指定的地址对应于一个主存单元，则主存予以响应，于是在主存和外设之间将进行直接存储器传送。我们发现，单总线结构容易扩展成多CPU系统。多总线结构单总线系统中，由于所有的高速设备和低速设备都挂在同一总线上，且总线只能分时工作，即某一时间只能允许在一对儿设备之间传送数据，这就使信息传送的效率和吞吐量受到极大限制。为此出现了图所示的多总线系统结构。图中，CPU、存储器控制器和两个PCIE桥通过接口与高速的前端总线FSB相连。总线桥是一种具有缓冲、转换、控制功能的逻辑电路。不同类型的桥扩展出不同层次的总线，并分别连接高速、中速和低速设备。图中的两个PCIE桥分别连接图形处理器GPU和其他高速IO设备。连接IO设备的PCIE总线又分别连接以太网设备控制器接口DCI、USB主机控制器接口、SATA串行高级技术附件桥、VGA视频图形阵列桥、DMA控制器和PCI总线扩展桥。SATA总线用于与SATA硬盘和光盘驱动器连接，PCI总线上连接的第二个USB主机控制器接口用于与USB键盘和USB鼠标相连。多总线结构确保高速、中速、低速设备连接到不同的总线上同时工作，以提高总线的效率和吞吐量，而且处理器结构的变化不影响高速总线。思考题你能说出多总线结构比单总线结构的创新点吗？早期总线的内部结构如图所示，它实际上是处理器芯片引脚的延伸，是处理器与IO设备适配器的通道。这种简单的总线一般也由条信号线组成，这些信号线按其功能可分为三类：地址线、数据线和控制线。地址线是单向的，用来传送主存与设备的地址；数据线是双向的，用来传送数据；控制线一般而言对每一根线是单向的CPU发向接口，或接口发向CPU，用来指明数据传送的方向存储器读、存储器写、IO读、IO写、中断控制请求、识别和定时控制等。早期总线结构的不足之处在于：CPU是总线上唯一的主控者。即使后来增加了具有简单仲裁逻辑的DMA控制器以支持DMA传送，但仍不能满足多CPU环境的要求。总线信号是CPU引脚信号的延伸，故总线结构紧密与CPU相关，通用性较差。图示出了当代流行的总线内部结构，它是一些标准总线，追求与结构、CPU、技术无关的开发标准，并满足包括多个CPU在内的主控者环境需求。在当代总线结构中，CPU和它私有的cache一起作为一个模块与总线相连。系统中允许有多个这样的处理器模块。而总线控制器完成多个总线请求者之间的协调与仲裁。整个总线分成如下四部分。数据传送总线由地址线、数据线、控制线组成。其结构与图中的简单总线相似，但一般信号条数较多，如条地址线，或条数据线。为了减少引脚数量，位数据的低位数据线常常和地址线采用多路复用方式。仲裁总线包括总线请求线和总线授权线。中断和同步总线用于处理带优先级的中断操作，包括中断请求线和中断认可线。公用线包括时钟信号线、电源线、地线、系统复位线以及加电或断电的时序信号线等。大多数计算机采用了分层次的多总线结构。在这种结构中，速度差异较大的设备模块使用不同速度的总线，而速度相近的设备模块使用同一类总线。显然，这种结构的优点在于不仅解决了总线负载过重的问题，而且使总线设计简单，并能充分发挥每类总线的效能。图是Pentium计算机主板的总线结构框图。可以看出，它是一个三层次的多总线结构，即有CPU总线、PCI总线和ISA总线。CPU总线也称CPU存储器总线，它是包含位数据线和位地址线的同步总线。总线时钟频率为MHz或MHz，CPU内部时钟是此时钟频率的倍频。此总线可连接MB的主存。主存扩充容量是以内存条形式插入主板有关插座来实现的。CPU总线还接有L级cache。主存控制器和cache控制器芯片用来管理CPU对主存和cache的存取操作。CPU是这条总线的主控者，但必要时可放弃总线控制权。从传统的观点看，可以把CPU总线看成是CPU引脚信号的延伸。PCI总线用于连接高速的IO设备模块，如图形显示器适配器、网络接口控制器、硬盘控制器等。通过“桥”芯片，上面与更高速的CPU总线相连，下面与低速的ISA总线相接。PCI总线是一个或位的同步总线，位或位数据地址线是同一组线，分时复用。总线时钟频率为MHz，总线带宽是MBs。PCI总线采用集中式仲裁方式，有专用的PCI总线仲裁器。主板上一般有个PCI总线扩充槽。ISA总线Pentium机使用该总线与低速IO设备连接。主板上一般留有个ISA总线扩充槽，以便使用各种位位适配器卡。该总线支持个DMA通道和级可屏蔽硬件中断。另外，ISA总线控制逻辑还通过主板上的片级总线与实时钟日历、ROM、键盘和鼠标控制器微处理器等芯片相连接。我们看到，CPU总线、PCI总线、ISA总线通过两个“桥”芯片连成整体。桥芯片在此起到了信号速度缓冲、电平转换和控制协议的转换作用。有的资料将CPU总线PCI总线的桥称为北桥，将PCI总线ISA总线的桥称为南桥。通过桥将两类不同的总线“粘合”在一起的技术特别适合于系统的升级换代。这样，每当CPU芯片升级时只需改变CPU总线和北桥芯片，全部原有的外围设备可自动继续工作。Pentium机总线系统中有一个核心逻辑芯片组，简称PCI芯片组，它包括主存控制器和cache控制器芯片、北桥芯片和南桥芯片。数字计算机使用二进制数，它们或用电位的高、低来表示，或用脉冲的有、无来表示。在前一种情况下，如果电位高时表示数字“”，那么电位低时则表示数字“”。在后一种情况下，如果有脉冲时表示数字“”，那么无脉冲时就表示数字“”。计算机系统中，传输信息一般采用串行传送或并行传送两种方式之一。但是出于速度和效率上的考虑，系统总线上传送的信息必须采用并行传送方式。串行传送当信息以串行方式传送时，只有一条传输线，且采用脉冲传送。在串行传送时，按顺序来传送表示一个数码的所有二进制位bit的脉冲信号，每次一位，通常以第一个脉冲信号表示数码的最低有效位，最后一个脉冲信号表示数码的最高有效位。图a示出了串行传送的示意图。当串行传送时，有可能按顺序连续传送若干个“”或若干个“”。如果在编码时用有脉冲表示二进制数“”，无脉冲表示二进制数“”，那么当连续出现几个“”时，表示某段时间间隔内传输线上没有脉冲信号。为了要确定传送了多少个“”，必须采用某种时序格式，以便使接收设备能加以识别。通常采用的方法是指定位时间，即指定一个二进制位在传输线上占用的时间长度。显然，位时间是由同步脉冲来体现的。假定串行数据是由位时间组成的，那么传送比特需要个位时间。例如，如果接收设备在第一个位时间和第三个位时间接收到一个脉冲，而其余的个位时间没有收到脉冲，那么就会知道所收到的二进制信息是。注意，串行传送时低位在前，高位在后。在串行传送时，被传送的数据需要在发送部件进行并串变换，这称为拆卸；而在接收部件又需要进行串并变换，这称为装配。串行传送的主要优点是只需要一条传输线，这一点对长距离传输显得特别重要，不管传送的数据量有多少，只需要一条传输线，成本比较低廉。并行传送用并行方式传送二进制信息时，对每个数据位都需要单独一条传输线。信息由多少二进制位组成，就需要多少条传输线，从而使得二进制数“”或“”在不同的线上同时进行传送。并行传送的过程示于图b。如果要传送的数据由位二进制位组成字节，那么就使用条线组成的扁平电缆。每一条线分别代表了二进制数的不同位值。例如，最上面的线代表最高有效位，最下面的线代表最低有效位，因而图中正在传送的二进制数是。并行传送一般采用电位传送。由于所有的位同时被传送，所以并行数据传送比串行数据传送快得多，例如，使用条单独的地址线，可以从CPU的地址寄存器同时传送位地址信息给主存。IO功能模块通常简称为IO接口，也叫适配器。广义地讲，IO接口是指CPU、主存和外围设备之间通过系统总线进行连接的标准化逻辑部件。IO接口在它动态连接的两个部件之间起着“转换器”的作用，以便实现彼此之间的信息传送。图示出了CPU、IO接口和外围设备之间的连接关系。外围设备本身带有自己的设备控制器，它是控制外围设备进行操作的控制部件。它通过IO接口接收来自CPU传送的各种信息，并根据设备的不同要求把这些信息传送到设备，或者从设备中读出信息传送到IO接口，然后送给CPU。由于外围设备种类繁多且速度不同，因而每种设备都有适应它自己工作特点的设备控制器。图中将外围设备本体与它自己的控制电路画在一起，统称为外围设备。为了使所有的外围设备能在一起正确地工作，CPU规定了不同的信息传送控制方法。不管什么样的外围设备，只要选用某种数据传送控制方法，并按它的规定通过总线和主机连接，就可进行信息交换。通常在总线和每个外围设备的设备控制器之间使用一个适配器接口电路来解决这个问题，以保证外围设备用计算机系统特性所要求的形式发送和接收信息。因此接口逻辑必须标准化。一个标准IO接口可能连接一个设备，也可能连接多个设备。图是IO接口模块的一般结构框图。它通常具有如下功能。控制接口模块靠指令信息来控制外围设备的动作，如启动、关闭设备等。缓冲接口模块在外围设备和计算机系统其他部件之间用作为一个缓冲器，以补偿各种设备在速度上的差异。状态接口模块监视外围设备的工作状态并保存状态信息。状态信息包括数据“准备就绪”“忙”“错误”等，供CPU询问外围设备时进行分析之用。转换接口模块可以完成任何要求的数据转换，如并串转换或串并转换，因此数据能在外围设备和CPU之间正确地进行传送。整理接口模块可以完成一些特别的功能，例如，在需要时可以修改字计数器或当前内存地址寄存器。程序中断每当外围设备向CPU请求某种动作时，接口模块即发生一个中断请求信号到CPU。例如，如果设备完成了一个操作或设备中存在着一个错误状态，接口即发出中断。事实上，一个IO接口模块有两个接口：一是和系统总线的接口。CPU和IO接口模块的数据交换一定是并行方式；二是和外设的接口。IO接口模块和外设的数据交换可能是并行方式，也可能是串行方式。因此，根据外围设备供求串行数据或并行数据的方式不同，IO接口模块分为串行数据接口和并行数据接口两大类。连接到总线上的功能模块有主动和被动两种形态。如CPU模块，它在不同的时间可以用作主方，也可用作从方；而存储器模块只能用作从方。主方主设备可以启动一个总线周期，而从方从设备只能响应主方的请求。每次总线操作，只能有一个主方占用总线控制权，但同一时间里可以有一个或多个从方。我们知道，除CPU模块外，IO模块也可提出总线请求。为了解决多个主设备同时竞争总线控制权的问题，必须具有总线仲裁部件，以某种方式选择其中一个主设备作为总线的下一次主方。对多个主设备提出的占用总线请求，一般采用优先级或公平策略进行仲裁。例如，在多处理器系统中对各CPU模块的总线请求采用公平的原则来处理，而对IO模块的总线请求采用优先级策略。被授权的主方在当前总线业务一结束，即接管总线控制权，开始新的信息传送。主方持续控制总线的时间称为总线占用期。按照总线仲裁电路的位置不同，仲裁方式分为集中式仲裁和分布式仲裁两类。集中式仲裁中每个功能模块有两条线连到总线控制器：一条是送往仲裁器的总线请求信号线BR，一条是仲裁器送出的总线授权信号线BG。链式查询方式为减少总线授权线数量，采用了图a所示的菊花链查询方式，其中A表示地址线，D表示数据线。BS线为，表示总线正被某外设使用。链式查询方式的主要特点是，总线授权信号BG串行地从一个IO接口传送到下一个IO接口。假如BG到达的接口无总线请求，则继续往下查询；假如BG到达的接口有总线请求，BG信号便不再往下查询。这意味着该IO接口就获得了总线控制权。作为思考题，读者不妨画出链式查询电路的逻辑结构图。显然，在查询链中离总线仲裁器最近的设备具有最高优先级，离总线仲裁器越远，优先级越低。因此，链式查询是通过接口的优先级排队电路来实现的。链式查询方式的优点是，只用很少几根线就能按一定优先次序实现总线仲裁，并且这种链式结构很容易扩充设备。链式查询方式的缺点是对询问链的电路故障很敏感，如果第i个设备的接口中有关链的电路有故障，那么第i个以后的设备都不能进行工作。另外查询链的优先级是固定的，如果优先级高的设备出现频繁的请求，那么优先级较低的设备可能长期不能使用总线。计数器定时查询方式计数器定时查询方式原理示于图b。总线上的任一设备要求使用总线时，通过BR线发出总线请求。总线仲裁器接到请求信号以后，在BS线为“”的情况下让计数器开始计数，计数值通过一组地址线发向各设备。每个设备接口都有一个设备地址判别电路，当地址线上的计数值与请求总线的设备地址相一致时，该设备置“”BS线，获得了总线使用权，此时中止计数查询。每次计数可以从“”开始，也可以从中止点开始。如果从“”开始，各设备的优先次序与链式查询法相同，优先级的顺序是固定的。如果从中止点开始，则每个设备使用总线的优先级相等。计数器的初值也可用程序来设置，这就可以方便地改变优先次序，显然这种灵活性是以增加线数为代价的。独立请求方式独立请求方式原理示于图c。在独立请求方式中，每一个共享总线的设备均有一对总线请求线BRi和总线授权线BGi。当设备要求使用总线时，便发出该设备的请求信号。总线仲裁器中有一个排队电路，它根据一定的优先次序决定首先响应哪个设备的请求，给设备以授权信号BGi。独立请求方式的一个优点是响应时间快，即确定优先响应的设备所花费的时间少，用不着一个设备接一个设备地查询。另一个优点是对优先次序的控制相当灵活。它可以预先固定，如BR优先级最高，BR次之BRn最低；也可以通过程序来改变优先次序；还可以用屏蔽禁止某个请求的办法，不响应来自无效设备的请求。因此当代总线标准普遍采用独立请求方式。对于单处理器系统总线而言，总线仲裁器又称为总线控制器，它是CPU的一部分，一般是一个单独的功能模块，如图所示。思考题三种集中式仲裁方式中，哪种方式效率最高？为什么？分布式仲裁不需要集中的总线仲裁器，每个潜在的主方功能模块都有自己的仲裁号和仲裁器。当它们有总线请求时，把它们唯一的仲裁号发送到共享的仲裁总线上，每个仲裁器将仲裁总线上得到的号与自己的号进行比较。如果仲裁总线上的号大，则它的总线请求不予响应，并撤销它的仲裁号。最后，获胜者的仲裁号保留在仲裁总线上。显然，分布式仲裁是以优先级仲裁策略为基础的。所有参与本次竞争的各主设备本例中共个将设备竞争号CN取反后打到仲裁总线AB上，以实现“线或”逻辑。AB线低电平时表示至少有一个主设备的CNi为，AB线高电平时表示所有主设备的CNi为。竞争时CN与AB逐位比较，从最高位b至最低位b以一维菊花链方式进行，只有上一位竞争得胜者Wi位为。当CNi，或CNi且ABi为高电平时，才使Wi位为。若Wi时，将一直向下传递，使其竞争号后面的低位不能送上AB线。竞争不到的设备自动撤除其竞争号。在竞争期间，由于W位输入的作用，各设备在其内部的CN线上保留其竞争号并不破坏AB线上的信息。由于参加竞争的各设备速度不一致，这个比较过程反复自动进行，才有最后稳定的结果。竞争期的时间要足够，保证最慢的设备也能参与竞争。总线的一次信息传送过程，大致可分为如下五个阶段：请求总线，总线仲裁，寻址目的地址，信息传送，状态返回或错误报告。为了同步主方、从方的操作，必须制订定时协定。所谓定时，是指事件出现在总线上的时序关系。下面介绍数据传送过程中采用的几种定时协定：同步定时协定、异步定时协定、半同步定时协定和周期分裂式总线协定。同步总线定时协定在同步定时协议中，事件出现在总线上的时刻由总线时钟信号来确定，所以总线中包含时钟信号线。一次IO传送被称为时钟周期或总线周期。图表示读数据的同步时序例子，所有事件都出现在时钟信号的前沿，大多数事件只占据单一时钟周期。例如，在总线读周期，CPU首先将存储器地址放到地址线上，它亦可发出一个启动信号，指明控制信息和地址信息已出现在总线上。第个时钟周期发出一个读命令。存储器模块识别地址码，经一个时钟周期延迟存取时间后，将数据和认可信息放到总线上，被CPU读取。如果是总线写周期，CPU在第个时钟周期开始将数据放到数据线上，待数据稳定后CPU发出一个写命令，存储器模块在第个时钟周期存入数据。由于采用了公共时钟，每个功能模块什么时候发送或接收信息都由统一时钟规定，因此，同步定时具有较高的传输频率。同步定时适用于总线长度较短、各功能模块存取时间比较接近的情况。这是因为同步方式对任何两个功能模块的通信都给予同样的时间安排。由于同步总线必须按最慢的模块来设计公共时钟，当各功能模块存取时间相差很大时，会大大损失总线效率。异步总线定时协定在异步定时协议中，后一事件出现在总线上的时刻取决于前一事件的出现时刻，即建立在应答式或互锁机制基础上。在这种系统中，不需要统一的公共时钟信号。总线周期的长度是可变的。图a表示系统总线读周期时序图。CPU发送地址信号和读状态信号到总线上。待这些信号稳定后，它发出读命令，指示有效地址和控制信号的出现。存储器模块进行地址译码并将数据放到数据线上。一旦数据线上的信号稳定，则存储器模块使确认线有效，通知CPU数据可用。CPU由数据线上读取数据后，立即撤销读状态信号，从而引起存储器模块撤销数据和确认信号。最后，确认信号的撤销又使CPU撤销地址信息。图b表示系统总线写周期时序图。CPU将数据放到数据线上，与此同时启动状态线和地址线。存储器模块接受写命令从数据线上写入数据，并使确认线上信号有效。然后，CPU撤销写命令，存储器模块撤销确认信号。异步定时的优点是总线周期长度可变，不把响应时间强加到功能模块上，因而允许快速和慢速的功能模块都能连接到同一总线上。但这以增加总线的复杂性和成本为代价。思考题你能说出同步定时与异步定时各自的应用环境吗？半同步总线定时协定同步总线的优点是控制简单，传输速率通常较高，但不适用于速度差异较大的设备。如果在总线上传输的大部分设备的速度相当，仅有很少的设备需要较长的传输时间，则可以在同步总线定时协定的基础上稍加改动，扩展为半同步总线定时协定。半同步总线整体上仍然采用同步操作方式，其总线周期是时钟周期的整数倍。不同之处在于增加一根联络信号线，如高电平有效的准备好信号READY或者低电平有效的等待信号nWAIT，由此信号决定是否需要增加时钟周期。图为某种半同步总线的操作时序图。从图中可以看出，基本的总线传输周期由T到T四个时钟周期构成，但如果某个设备来不及在四个时钟周期内完成总线操作，可以使READY信号无效或者nWAIT信号有效以增加时钟周期数。总线控制逻辑在T的前沿检测READY引脚是否有效：如果READY有效，则在T时钟周期后进入T时钟周期；如果READY无效，则在T和T之间插入一个等待周期Tw，并在Tw前沿再次检测READY引脚是否有效，直到READY有效后才进入T时钟周期。半同步总线协定在同步总线协定的基础上仅仅增加了一点点成本，但适应能力却大大提升。因此，现代的许多同步总线都已扩展为半同步总线。周期分裂式总线定时协定分析图中的同步总线读操作时序可以看出，在第一个时钟周期CPU送出地址信息和最后一个时钟周期存储器送出数据之间，通常有若干个时钟周期的延迟时间。这是存储器内部准备数据的操作时间，占用的时钟周期数取决于存储器自身的速度。但是这部分时间实际上并不需要占用总线传输数据，因而宝贵的总线资源被浪费了。故在对总线性能要求非常高的系统中，可以将每个读周期分为三步：主方通过总线向从方发送地址和读命令；从方根据命令进行内部读操作，这是从方执行读命令的数据准备时间；从方通过数据总线向主方提供数据。相应地，将一个读周期分解成两个分离的传输子周期：第一个子周期，主方发送地址和命令及有关信息后，立即和总线断开，供其他设备使用；第二个子周期，被读出的设备重新申请总线使用权后将数据通过总线发向请求数据的设备。而写周期只需要第一个子周期即可完成。在分离式总线定时协定中，由于每个设备都要申请总线使用权，故读数据的双方都是总线主方。分离式总线定时协定以硬件复杂度的提高换取总线性能的提升。当代的总线标准大都能支持以下四类模式的数据传送，如图所示。读、写操作读操作是由从方到主方的数据传送；写操作是由主方到从方的数据传送。一般，主方先以一个总线周期发出命令和从方地址，经过一定的延时再开始数据传送总线周期。为了提高总线利用率，减少延时损失，主方完成寻址总线周期后可让出总线控制权，以使其他主方完成更紧迫的操作。然后再重新竞争总线，完成数据传送总线周期。块传送操作只需给出块的起始地址，然后对固定块长度的数据一个接一个地读出或写入。对于CPU主方存储器从方而言的块传送，常称为突发猝发式传送，其块长一般固定为数据线宽度存储器字长的倍。例如，一个位数据线的总线，一次猝发式传送可达位。这在超标量流水中十分有用。写后读、读修改写操作这是两种组合操作。只给出地址一次表示同一地址，或进行先写后读操作，或进行先读后写操作。前者用于校验目的，后者用于多道程序系统中对共享存储资源的保护。这两种操作和猝发式操作一样，主方掌管总线直到整个操作完成。广播、广集操作一般而言，数据传送只在一个主方和一个从方之间进行。但有的总线允许一个主方对多个从方进行写操作，这种操作称为广播。与广播相反的操作称为广集，它将选定的多个从方数据在总线上完成AND或OR操作，用以检测多个中断源。图示出了典型的多总线结构框图。实际上，这也是PC机和服务器的主板总线的经典结构。如图所示，整个系统有如下三种不同的总线。HOST总线该总线有CPU总线、系统总线、主存总线、前端总线等多种名称，各自反映了总线功能的一个方面。这里称“宿主”总线，也许更全面，因为HOST总线不仅连接主存，还可以连接多个CPU。HOST总线是连接“北桥”芯片与CPU之间的信息通路，它是一个位数据线和位地址线的同步总线。位的地址线可支持处理器GB的存储寻址空间。总线上还接有L级cache，主存与cache控制器芯片。后者用来管理CPU对主存和cache的存取操作。CPU拥有HOST总线的控制权，但在必要情况下可放弃总线控制权。PCI总线连接各种高速的PCI设备。PCI是一个与处理器无关的高速外围总线，又是至关重要的层间总线。它采用同步时序协议和集中式仲裁策略，并具有自动配置能力。PCI设备可以是主设备，也可以是从设备，或兼而有之。在PCI设备中不存在DMA直接存储器传送的概念，这是因为PCI总线支持无限的猝发式传送。这样，传统总线上用DMA方式工作的设备移植到PCI总线上时，采用主设备工作方式即可。系统中允许有多条PCI总线，它们可以使用HOST桥与HOST总线相连，也可使用PCIPCI桥与已和HOST总线相连的PCI总线相连，从而得以扩充整个系统的PCI总线负载能力。LEGACY总线可以是ISA、EISA、MCA等这类性能较低的传统总线，以便充分利用市场上丰富的适配器卡，支持中、低速IO设备。在PCI总线体系结构中有三种桥。其中HOST桥又是PCI总线控制器，含有中央仲裁器。桥起着重要的作用，它连接两条总线，使彼此间相互通信。桥又是一个总线转换部件，可以把一条总线的地址空间映射到另一条总线的地址空间上，从而使系统中任意一个总线主设备都能看到同样的一份地址表。桥本身的结构可以十分简单，如只有信号缓冲能力和信号电平转换逻辑，也可以相当复杂，如有规程转换、数据快存、装拆数据等。PCI总线的基本传输机制是猝发式传送，利用桥可以实现总线间的猝发式传送。写操作时，桥把上层总线的写周期先缓存起来，以后的时间再在下层总线上生成写周期，即延迟写。读操作时，桥可早于上层总线，直接在下层总线上进行预读。无论延迟写和预读，桥的作用可使所有的存取都按CPU的需要出现在总线上。由上可见，以桥连接实现的PCI总线结构具有很好的扩充性和兼容性，允许多条总线并行工作。它与处理器无关，不论HOST总线上是单CPU还是多CPU，也不论CPU是什么型号，只要有相应的HOST桥芯片组，就可与PCI总线相连。思考题多总线结构中“桥”起着何种作用？你怎样看待北桥和南桥？表列出了PCI标准版的必有类信号名称及其功能描述。它采用位数据线和位地址线，数据线和地址线是一组线，分时复用。使用同步时序协议，总线时钟为方波信号，频率为MHz。总线所有事件都出现在时钟信号的下跳沿，正好是时钟周期的中间。采样发生在时钟信号的上跳沿。PCI采用集中式仲裁方式，每个PCI主设备都有总线请求REQ和授权GNT两条信号线与中央仲裁器相连。符号表示信号低电平有效，in表示输入线，out表示输出线，ts表示双向三态信号线，sts表示一次只被一个拥有者驱动的抑制三态信号线，od表示开路驱动，允许多个设备以线或方式共享此线。总线周期类型由CnBE线上的总线命令给出。总线周期长度由周期类型和nFRAME帧、nIRDY主就绪、nTRDY目标就绪、nSTOP停止等信号控制。一个总线周期由一个地址期和一个或多个数据期组成。启动此总线周期的主设备，在地址期送出总线命令和目标设备地址，而目标设备以nDEVSEL设备选择信号予以响应。还有一个IDSEL初始化设备选择信号，用以配置读写期间的芯片选择。除必有类信号外，还有种可选类信号线。除一组信号线用于扩充到位传送外，其他三组信号分别用于cache一致性支持、中断请求、测试与边界扫描。其中，中断请求信号线是开路驱动，允许多个设备共享一条中断请求信号线。有关中断的概念留在第章介绍。电源线和地线未列入表中。版定义了V和V两种信号环境，更新的版本均使用V工作电压。PCI总线周期由当前被授权的主设备发起。PCI支持任何主设备和从设备之间点到点的对等访问，也支持某些主设备的广播读写。PCI总线周期类型由主设备在CBE线上送出的位总线命令代码指明，被目标设备译码确认，然后主从双方协调配合完成指定的总线周期操作。位代码组合可指定种总线命令，但实际给出种。PCI总线命令类型如表所示。存储器读写总线周期以猝发式传送为基本机制，一次猝发式传送总线周期通常由一个地址期和一个或几个数据周期组成。存储器读写周期的解释，取决于PCI总线上的存储器控制器是否支持存储器cache之间的PCI传输协议。如果支持，则存储器读写一般是通过cache来进行；否则，是以数据块非缓存方式来传输。存储器写和使无效周期与存储器写周期的区别在于，前者不仅保证一个完整的cache行被写入，而且在总线上广播“无效”信息，命令其他cache中的同一行地址变为无效。关于存储器读的三个总线周期的说明示于表中。特殊周期用于主设备将其信息如状态信息广播到多个目标方。它是一个特殊的写操作，不需要目标方以nDEVSEL信号响应。但各目标方须立即使用此信息，无权中止此写操作过程。配置读写周期是PCI具有自动配置能力的体现。PCI有三个相互独立的物理地址空间，即存储器、IO、配置空间。所有PCI设备必须提供配置空间，而多功能设备要为每一实现功能提供一个配置空间。配置空间是个内部寄存器，用于保存系统初始化期间设置的配置参数。CPU通过HOST桥的两个位专用寄存器配置地址、配置数据来访问PCI设备的配置空间。即HOST桥根据CPU提供给这两个寄存器的值，生成PCI总线的配置读写周期，完成配置数据的读出或写入操作。双地址周期用于主方指示它正在使用位地址。下面以数据传送类的总线周期为代表，说明PCI总线周期的操作过程。为了深化概念，图中给出了一个读操作总线周期时序示例。图中的环形箭头符号表示某信号线由一个设备驱动转换成另一设备驱动的过渡期，以此过渡期避免两个设备同时驱动一条信号线的冲突。我们看到，PCI总线周期的操作过程有如下特点。采用同步时序协议。总线时钟周期以上跳沿开始，半个周期高电平，半个周期低电平。总线上所有事件，即信号电平转换出现在时钟信号的下跳沿时刻，而对信号的采样出现在时钟信号的上跳沿时刻。总线周期由被授权的主方启动，以帧nFRAME信号变为有效来指示一个总线周期的开始。一个总线周期由一个地址期和一个或多个数据期组成。在地址期内除给出目标地址外，还在CBE线上给出总线命令以指明总线周期类型。地址期为一个总线时钟周期，一个数据期在没有等待状态下也是一个时钟周期。一次数据传送是在挂钩信号nIRDY和nTRDY都有效情况下完成，任一信号无效在时钟上跳沿被对方采样到，都将加入等待状态。总线周期长度由主方确定。在总线周期期间nFRAME持续有效，但在最后一个数据期开始前撤除。即以nFRAME无效后，nIRDY也变为无效的时刻表明一个总线周期结束。由此可见，PCI的数据传送以猝发式传送为基本机制，单一数据传送反而成为猝发式传送的一个特例。并且PCI具有无限制的猝发能力，猝发长度由主方确定，没有对猝发长度加以固定限制。主方启动一个总线周期时要求目标方确认。即在nFRAME变为有效和目标地址送上AD线后，目标方在延迟一个时钟周期后必须以nDEVSEL信号有效予以响应。否则，主设备中止总线周期。主方结束一个总线周期时不要求目标方确认。目标方采样到nFRAME信号已变为无效时，即知道下一数据传送是最后一个数据期。目标方传输速度跟不上主方速度，可用nTRDY无效通知主方加入等待状态时钟周期。当目标方出现故障不能进行传输时，以nSTOP信号有效通知主方中止总线周期。PCI总线采用集中式仲裁方式，每个PCI主设备都有独立的nREQ总线请求和nGNT总线授权两条信号线与中央仲裁器相连。由中央仲裁器根据一定的算法对各主设备的申请进行仲裁，决定把总线使用权授予谁。但PCI标准并没有规定仲裁算法。中央仲裁器不仅采样每个设备的nREQ信号线，而且采样公共的nFRAME和nIRDY信号线。因此，仲裁器清楚当前总线的使用状态：是处于空闲状态还是一个有效的总线周期。PCI总线支持隐藏式仲裁。即在主设备A正在占用总线期间，中央仲裁器根据指定的算法裁决下一次总线的主方应为主设备B时，它可以使nGNTA无效而使nGNTB有效。此时，设备A应在数据传送完成后立即释放nFRAME和nIRDY信号线，由设备B掌管后开始一个新的总线周期。隐藏式仲裁使裁决过程或在总线空闲期进行或在当前总线周期内进行，不需要单独的仲裁总线周期，提高了总线利用率。中央仲裁器使nGNTA无效与nGNTB有效之间至少有个时钟周期的延迟，以保证信号线由A驱动变为B驱动时在临界情况下也不产生冲突，即上述的交换期。一个提出申请并被授权的主设备，应在nFRAME、nIRDY线已释放的条件下尽快开始新的总线周期操作。自nFRAME、nIRDY信号变为无效开始，个时钟周期内信号仍不变为有效，中央仲裁器认为被授权的主设备为“死设备”，并收回授权，以后也不再授权给该设备。相比早期的ISA和EISA等第一代总线，PCI总线的传输速度有明显提升。但是计算机系统对传输性能的要求仍在不断提升中，PCI总线逐渐难以满足高速显卡等高性能传输模块的性能要求。于是，第三代的PCIe总线逐渐取代了PCI总线。PCIe总线全称为PCIExpress，是基于PCI总线技术发展起来的总线标准，对PCI总线有良好的继承性，在软件和应用上兼容PCI总线。与PCI总线相比，PCIe总线的主要改进有如下几点。高速差分传输。与PCI总线使用的单端信号对地传输方式相比，PCIe总线改用差分信号进行数据传送，一个信号由D和D两根信号线传输，信号接收端通过比较这两个信号的差值判断发送端发送的是逻辑“”还是逻辑“”。由于外部干扰噪声将同时附加到D和D两根信号上，因而在理论上并不影响二者的差值，对外界的电磁干扰也比较小。因此差分信号抗干扰的能力更强，可以使用更高的总线频率。PCIe总线还引入了嵌入时钟技术，发送端不向接收端传输时钟信号，而是通过bb或bb编码将时钟信息嵌入数据信号中，接收端可以从数据中恢复出时钟。串行传输。由于并行传输方式使用更多的信号线进行传输，因而理论上并行传输的速率比串行传输更高。但是并行总线通常需要在系统底板上进行复杂的走线，随着信号传输速度的提高，不同长度或在PCB板不同层布放的导线引起的定时偏差的影响和并行导线之间存在的相互干扰变得越来越严重，限制了信号传输的最高速率。而串行传输方式在每个方向只有一个差分信号，且时钟信息嵌入在数据信号中，故不会出现定时偏移。因此，串行信号在有些情况下传输速度反而更高。与USB总线和SATA接口类似，PCIe总线也采用串行传输方式替代PCI总线的并行传输方式。全双工端到端连接。与PCI的共享总线模式不同，PCIe链路使用端到端的数据传送方式，每一通道Lane只能连接两个设备，设备之间通过双向的链路相连接，每个传输通道独享带宽。如图所示，PCIe总线的物理链路的一个通道由两组差分信号组成，发送端的发送器与接收端的接收器通过一对儿差分信号连接，接收端的发送器与发送端的接收器通过另外一对儿差分信号连接。PCIe支持全双工通信，允许在同一时刻同时进行数据发送和接收。基于多通道的数据传递方式。一个PCIe链路可以由多条通道组成，目前可支持、、、、、和宽度的PCIe链路。不同的PCIe总线规范所定义的总线频率和链路编码方式并不相同，PCIe规范中，单通道单向传输带宽可达到MBs。多通道设计增加了灵活性，较慢的设备可以分配较少的通道。基于数据包的传输。作为串行通信总线，PCIe所有的数据都是以数据包为单位进行传输的。一个完整的PCIe体系结构由上到下包括应用层、事务层、数据链路层和物理层，如图所示。图为PCIe总线的拓扑结构实例。可以看出，PCIe总线上包括四类实体：根复合体、交换器、PCIe桥和端点。根复合体RootComplex是PCIe的根控制器，将处理器内存子系统连接到PCIe交换结构。一个根复合体可能包含多个PCIe端口，可将多个交换器连接到根复合体或级联的端口。PCIe总线采用基于交换的技术，交换器Switch可以扩展PCIe总线，PCIe总线系统可以通过交换器连接多个PCIe设备。PCIe桥PCIebrige负责PCIe和其他总线之间的转换，PCIe总线系统可以通过PCIe桥扩展出传统的PCI总线或PCIX总线。在PCIe总线中，基于PCIe总线的设备称为端点Endpoint，如PCIe接口网卡、串口卡、存储卡等。端点处于PCIe总线系统拓扑结构中的最末端，一般作为总线操作的发起者或者终结者，老旧端点LegacyEndpoint则是指那些原本准备设计用于PCIX总线但却被改为PCIe接口的设备。此外，电源管理、服务质量QoS、热插拔支持、数据完整性、错误处理机制等也是PCIe总线所支持的高级特征。本章小结总线是构成计算机系统的互联机构，是多个系统功能部件之间进行数据传送的公共通道，并在争用资源的基础上进行工作。总线有物理特性、功能特性、电气特性、机械特性，因此必须标准化。微型计算机系统的标准总线从ISA总线位，带宽MBs发展到EISA总线位，带宽MBs和VESA总线位，带宽MBs，又进一步发展到PCI总线位，带宽MBs。衡量总线性能的重要指标是总线带宽，它定义为总线本身所能达到的最高传输速率。当代流行的标准总线追求与结构、CPU、技术无关的开发标准。其总线内部结构包含：数据传送总线由地址线、数据线、控制线组成；仲裁总线；中断和同步总线；公用线电源、地线、时钟、复位等信号线。计算机系统中，根据应用条件和硬件资源不同，信息的传输方式可采用：并行传送；串行传送；复用传送。各种外围设备必须通过IO接口与总线相连。IO接口是指CPU、主存、外围设备之间通过总线进行连接的逻辑部件。接口部件在它动态联结的两个功能部件间起着缓冲器和转换器的作用，以便实现彼此之间的信息传送。InfiniBand标准InfiniBand通信协议栈总线仲裁是总线系统的核心问题之一。为了解决多个主设备同时竞争总线控制权的问题，必须具有总线仲裁部件。它通过采用优先级策略或公平策略，选择其中一个主设备作为总线的下一次主方，接管总线控制权。按照总线仲裁电路的位置不同，总线仲裁分为集中式仲裁和分布式仲裁。集中式仲裁方式必有一个中央仲裁器，它受理所有功能模块的总线请求，按优先原则或公平原则进行排队，然后仅给一个功能模块发出授权信号。分布式仲裁不需要中央仲裁器，每个功能模块都有自己的仲裁号和仲裁器。总线定时是总线系统的核心问题之一。为了同步主方、从方的操作，必须制订定时协议，通常采用同步定时与异步定时两种方式。在同步定时协议中，事件出现在总线上的时刻由总线时钟信号来确定，总线周期的长度是固定的。在异步定时协议中，后一事件出现在总线上的时刻取决于前一事件的出现时刻，即建立在应答式或互锁机制基础上，不需要统一的公共时钟信号。在异步定时中，总线周期的长度是可变的。当代的总线标准大都能支持以下数据传送模式：读写操作；块传送操作；写后读、读修改写操作；广播、广集操作。PCI总线是当前实用的总线，是一个高带宽且与处理器无关的标准总线，又是重要的层次总线。它采用同步定时协议和集中式仲裁策略，并具有自动配置能力。PCI适合于低成本的小系统，因此在微型机系统中得到了广泛的应用。PCI总线的升级版PCIe总线在许多方面进行了改进，其性能得到大幅度提升。外围设备这个术语涉及相当广泛的计算机部件。事实上，除了CPU和主存外，计算机系统的每一部分都可作为一个外围设备来看待。世纪末，主机与外围设备的价格比为。这种情况表明：一方面，在计算机的发展中，外围设备的发展占有重要地位；另一方面，外围设备的发展同主机的发展还不相适应。尽管如此，外围设备还是得到了较快的发展。在指标上，外围设备不断采用新技术，向低成本、小体积、高速、大容量、低功耗等方面发展。在结构上，由初级的串行操作输入输出方式，发展到有通道连接的多种外设并行操作方式。在种类上，由简单的输入输出装置，发展到多种输入输出装置、随机存取大容量外存、多种终端设备，等等。在性能上，信息交换速度大大提高，输入输出形态不仅有数字形式，还有直观的图像和声音等形式。外围设备的功能是在计算机和其他机器之间，以及计算机与用户之间提供联系。没有外围设备的计算机就像缺乏五官四肢的人一样，既不能从外界接收信息，又不能对处理的结果做出表达和反应。随着计算机系统的飞速发展和应用的扩大，系统要求外围设备类型越来越多，外围设备智能化的趋势越来越明显，特别是出现多媒体技术以后。毫无疑问，随着科学技术的发展，提供人机联系的外围设备将会变成计算机真正的“五官四肢”。一般说来，外围设备由三个基本部分组成。存储介质，具有保存信息的物理特征。例如，磁盘，用记录在盘上的磁化元表示信息。驱动装置，用于移动存储介质。例如，磁盘设备中，驱动装置用于转动磁盘并进行定位。控制电路，向存储介质发送数据或从存储介质接收数据。例如，磁盘读出时，控制电路把盘上用磁化元形式表示的信息转换成计算机所需要的电信号，并把这些信号用电缆一个计算机系统配备什么样的外围设备，是根据实际需要来决定的。图示出了计算机的五大类外围设备，这只是一个典型化了的计算机环境。如图所示，中央部分是CPU和主存，通过系统总线与第二层的适配器接口部件相连，第三层是各种外围设备控制器，最外层则是外围设备。外围设备可分为输入设备、输出设备、外存设备、数据通信设备和过程控制设备几大类。表列出了各种IO设备名称、功能及数据传输速率。每一种外围设备，都是在它自己的设备控制器控制下进行工作的，而设备控制器则通过IO接口和主机连接，并受主机控制。计算机的外存储器又称磁表面存储设备。所谓磁表面存储，是用某些磁性材料薄薄地涂在金属铝或塑料表面作载磁体来存储信息。磁盘存储器、磁带存储器均属于磁表面存储器。磁表面存储器的优点：存储容量大，位价格低；记录介质可以重复使用；记录信息可以长期保存而不丢失，甚至可以脱机存档；非破坏性读出，读出时不需要再生信息。当然，磁表面存储器也有缺点，主要是存取速度较慢，机械结构复杂，对工作环境要求较高。磁表面存储器由于存储容量大，位成本低，在计算机系统中作为辅助大容量存储器使用，用以存放系统软件、大型文件、数据库等大量程序与数据信息。磁性材料的物理特性在计算机中，用于存储设备的磁性材料，是一种具有矩形磁滞回线的磁性材料。这种磁性材料在外加磁场的作用下，其磁感应强度B与外加磁场H的关系，可用矩形磁滞回线来描述，如图所示。从磁滞回线可以看出，磁性材料被磁化以后，工作点总是在磁滞回线上。只要外加的正向脉冲电流即外加磁场幅度足够大，那么在电流消失后磁感应强度B并不等于零，而是处在Br状态正剩磁状态。反之，当外加负向脉冲电流时，磁感应强度B将处在Br状态负剩磁状态。这就是说，当磁性材料被磁化后，会形成两个稳定的剩磁状态，就像触发器电路有两个稳定的状态一样。利用这两个稳定的剩磁状态，可以表示二进制代码和。如果规定用Br状态表示代码“”，Br状态表示代码“”，那么要使磁性材料记忆“”，就要加正向脉冲电流，使磁性材料正向磁化；要使磁性材料记忆“”，则要加负向脉冲电流，使磁性材料反向磁化。磁性材料上呈现剩磁状态的地方形成了一个磁化元或存储元，它是记录一个二进制信息位的最小单位。磁表面存储器的读写原理在磁表面存储器中，利用一种称为“磁头”的装置来形成和判别磁层中的不同磁化状态。换句话说，写入时，利用磁头使载磁体盘片具有不同的磁化状态，而在读出时又利用磁头来判别这些不同的磁化状态。磁头实际上是由软磁材料做铁芯绕有读写线圈的电磁铁，如图所示。写操作当写线圈中通过一定方向的脉冲电流时，铁芯内就产生一定方向的磁通。由于铁芯是高导磁率材料，而铁芯空隙处为非磁性材料，故在铁芯空隙处集中很强的磁场。如图所示，在这个磁场作用下，载磁体就被磁化成相应极性的磁化位或磁化元。若在写线圈里通入相反方向的脉冲电流，就可得到相反极性的磁化元。如果我们规定按图中所示电流方向为写“”，那么写线圈里通以相反方向的电流时即为写“”。上述过程称为“写入”。显然，一个磁化元就是一个存储元，一个磁化元中存储一位二进制信息。当载磁体相对于磁头运动时，就可以连续写入一连串的二进制信息。读操作如何读出记录在磁表面上的二进制代码信息呢也就是说，如何判断载磁体上信息的不同剩磁状态呢当磁头经过载磁体的磁化元时，由于磁头铁芯是良好的导磁材料，磁化元的磁力线很容易通过磁头而形成闭合磁通回路。不同极性的磁化元在铁芯里的方向是不同的。当磁头对载磁体作相对运动时，由于磁头铁芯中磁通的变化，使读出线圈中感应出相应的电动势e，其值为ddekt负号表示感应电势的方向与磁通的变化方向相反。不同的磁化状态，所产生的感应电势方向不同。这样，不同方向的感应电势经读出放大器放大鉴别，就可判知读出的信息是“”还是“”。图示出了记录方式的写读过程波形图。归纳起来，通过电磁变换，利用磁头写线圈中的脉冲电流，可把一位二进制代码转换成载磁体存储元的不同剩磁状态；反之，通过磁电变换，利用磁头读出线圈，可将由存储元的不同剩磁状态表示的二进制代码转换成电信号输出。这就是磁表面存储器存取信息的原理。磁层上的存储元被磁化后，它可以供多次读出而不被破坏。当不需要这批信息时，可通过磁头把磁层上所记录的信息全部抹去，称为写“”。通常，写入和读出是合用一个磁头，故称为读写磁头。每个读写磁头对应着一个信息记录磁道。硬磁盘是指记录介质为硬质圆形盘片的磁表面存储器。其逻辑结构如图所示。此图中未反映出寻址机构，而仅仅表示了存取功能的逻辑结构，它主要由磁记录介质、磁盘控制器、磁盘驱动器三大部分组成。磁盘控制器包括控制逻辑与时序、数据并串变换电路和串并变换电路。磁盘驱动器包括写入电路与读出电路、读写转换开关、读写磁头与磁头定位伺服系统等。写入时，将计算机并行送来的数据取至并串变换寄存器，变为串行数据，然后一位一位地由写电流驱动器作功率放大并加到写磁头线圈上产生电流，从而在盘片磁层上形成按位的磁化存储元。读出时，当记录介质相对磁头运动时，位磁化存储元形成的空间磁场在读磁头线圈中产生感应电势，此读出信息经放大检测就可还原成原来存入的数据。由于数据是一位一位串行读出的，故要送至串并变换寄存器变换为并行数据，再并行送至计算机。硬磁盘按盘片结构，分成可换盘片式与固定盘片式两种；磁头也分为可移动磁头和固定磁头两种。可移动磁头固定盘片的磁盘机特点是一片或一组盘片固定在主轴上，盘片不可更换。盘片每面只有一个磁头，存取数据时磁头沿盘面径向移动。固定磁头磁盘机特点是磁头位置固定，磁盘的每一个磁道对应一个磁头，盘片不可更换。优点是存取速度快，省去磁头找道时间，缺点是结构复杂。可移动磁头可换盘片的磁盘机盘片可以更换，磁头可沿盘面径向移动。优点是盘片可以脱机保存，同种型号的盘片具有互换性。温彻斯特磁盘机温彻斯特磁盘简称温盘，是一种采用先进技术研制的可移动磁头固定盘片的磁盘机。它是一种密封组合式的硬磁盘，即磁头、盘片、电机等驱动部件乃至读写电路等组装成一个不可随意拆卸的整体。工作时，高速旋转在盘面上形成的气垫将磁头平稳浮起。优点是防尘性能好，可靠性高，对使用环境要求不高，成为最有代表性的硬磁盘存储器。而普通的硬磁盘要求具有超净环境，只能用于大型计算机中。常用的温盘盘片直径有英寸、英寸、英寸、英寸等几种。思考题温盘的发明具有划时代意义，你能说说为什么吗？磁盘驱动器它是一种精密的电子和机械装置，因此各部件的加工安装有严格的技术要求。对温盘驱动器，还要求在超净环境下组装。各类磁盘驱动器的具体结构虽然有差别，但基本结构相同，主要由定位驱动系统、主轴系统和数据转换系统组成。图是磁盘驱动器外形和结构示意图。在可移动磁头的磁盘驱动器中，驱动磁头沿盘面径向位置运动以寻找目标磁道位置的机构称为磁头定位驱动系统，它由驱动部件、传动部件、运载部件磁头小车组成。当磁盘存取数据时，磁头小车的平移运动驱动磁头进入指定磁道的中心位置，并精确地跟踪该磁道。目前磁头小车的驱动方式主要采用步进电机和音圈电机两种。步进电机靠脉冲信号驱动，控制简单，整个驱动定位系统是开环控制，因此定位精度较低，一般用于道密度不高的硬磁盘驱动器。音圈电机是线性电机，可以直接驱动磁头作直线运动，整个驱动定位系统是一个带有速度和位置反馈的闭环控制系统，驱动速度快，定位精度高，因此用于较先进的磁盘驱动器。主轴系统的作用是安装盘片，并驱动它们以额定转速稳定旋转。其主要部件是主轴电机和有关控制电路。数据转换系统的作用是控制数据的写入和读出，包括磁头、磁头选择电路、读写电路以及索引、区标电路等。磁盘控制器它是主机与磁盘驱动器之间的接口，电路板实物如图a所示。由于磁盘存储器是高速外存设备，故与主机之间采用成批交换数据方式。作为主机与驱动器之间的控制器，它需要有两个方面的接口：一个是与主机的接口，控制外存与主机总线之间交换数据；另一个是与设备的接口，根据主机命令控制设备的操作。前者称为系统级接口，后者称为设备级接口。主机与磁盘驱动器交换数据的控制逻辑见图b。磁盘上的信息经读磁头读出以后送读出放大器，然后进行数据与时钟的分离，再进行串并变换、格式变换，最后送入数据缓冲器，经DMA直接存储器传送控制将数据传送到主机总线。我们看到，磁盘控制器的功能全部转移到设备中，主机与设备之间采用标准的通用接口，如SCSI接口小型计算机系统接口，从而使设备相对独立。盘片的上下两面都能记录信息，通常把磁盘片表面称为记录面。记录面上一系列同心圆称为磁道。每个盘片表面通常有几百到几千个磁道，每个磁道又分为若干个扇区，如图所示。从图中看出，外面扇区比里面扇区面积要大。磁盘上的这种磁道和扇区的排列称为格式。磁道的编址是从外向内依次编号，最外一个同心圆称为磁道，最里面的一个同心圆称为n磁道，n磁道里面的圆面积并不用来记录信息。扇区的编号有多种方法，可以连续编号，也可间隔编号。磁盘记录面经这样编址后，就可用n磁道m扇区的磁盘地址找到实际磁盘上与之相对应的记录区。除了磁道号和扇区号，还有记录面的面号，以说明本次处理是在哪一个记录面上。例如，对活动头磁盘组来说，磁盘地址是由记录面号也称磁头号、磁道号和扇区号三部分组成的。在磁道上，信息是按区存放的，每个区中存放一定数量的字或字节，各个区存放的字或字节数是相同的。为进行读写操作，要求定出磁道的起始位置，这个起始位置称为索引。索引标志在传感器检索下可产生脉冲信号，再通过磁盘控制器处理，便可定出磁道起始位置。磁盘存储器的每个扇区记录定长的数据，因此读写操作是以扇区为单位一位一位串行进行的。每一个扇区记录一个记录块。数据在磁盘上的记录格式如图所示。每个扇区开始时由磁盘控制器产生一个扇标脉冲。扇标脉冲的出现即标志一个扇区的开始。两个扇标脉冲之间的一段磁道区域即为一个扇区一个记录块。每个记录块由头部空白段、序标段、数据段、校验字段及尾部空白段组成。其中空白段用来留出一定的时间作为磁盘控制器的读写准备时间，序标被用来作为磁盘控制器的同步定时信号。序标之后即为本扇区所记录的数据。数据之后是校验字，它用来校验磁盘读出的数据是否正确。磁盘存储器的技术指标磁盘存储器的主要技术指标包括存储密度、存储容量、存取时间及数据传输率。存储密度存储密度分道密度、位密度和面密度。道密度是沿磁盘半径方向单位长度上的磁道数，单位为道英寸。位密度是磁道单位长度上能记录的二进制代码位数，单位为位英寸。面密度是位密度和道密度的乘积，单位为位英寸。存储容量一个磁盘存储器所能存储的字节总数，称为磁盘存储器的存储容量。存储容量有格式化容量和非格式化容量之分。格式化容量是指按照某种特定的记录格式所能存储信息的总量，也就是用户可以真正使用的容量。非格式化容量是磁记录表面可以利用的磁化单元总数。将磁盘存储器用于某计算机系统中，必须首先进行格式化操作，然后才能供用户记录信息。格式化容量一般是非格式化容量的，英寸的硬盘容量可达数十TB。平均寻址时间寻址时间是指从读写命令发出后，磁头从某一起始位置移动至新的记录位置，再到磁道上需要访问的扇区移动到磁头下方所需的时间。这段时间包括寻道时间和等待时间。磁盘接到读写指令后将磁头定位至所要访问的磁道上所需的时间，称为寻道时间或找道时间、定位时间。寻道完成后，磁道上需要访问的扇区移动到磁头下方所需的时间，称为等待时间或寻区时间、潜伏期、旋转延迟。这两个时间都是随机变化的，因此往往使用平均值来表示。平均寻道时间是最大寻道时间与最小寻道时间的平均值，一般由厂家给出，目前典型的平均寻道时间小于ms。平均等待时间和磁盘转速有关，它用磁盘旋转一周所需时间的一半来表示。若r表示磁盘旋转速率，单位是转秒，则平均等待时间为r。转速为转分的磁盘的平均等待时间约为ms。平均存取时间存取访问时间是从读写指令发出到开始第一笔数据读写时所用的平均时间，包括寻道时间、等待时间及相关的内务操作时间。内务操作时间一般很短一般在ms左右，可忽略不计。故平均访问时间近似等于平均寻道时间平均等待时间，即平均寻址时间。因此，总的平均读写操作时间Ta可表示为式中，Ts表示平均寻道时间，b表示传送的字节数，N表示每磁道字节数，brN表示数据传输时间。数据传输率磁盘存储器在单位时间内向主机传送数据的字节数，称为数据传输率。现代磁盘设备通常会配置磁盘cache，单位时间内从硬盘cache向主机传送的数据信息量称为外部数据传输率，与磁盘的接口类型和磁盘缓存大小有关。从主机接口逻辑考虑，应有足够快的传送速度向设备发送或从设备接收信息。在磁盘存储器盘片上读写数据的速率则称为内部数据传输率，即磁头找到要访问的位置后，单位时间读写的字节数，等于每个磁道上的字节数磁盘旋转一周的时间。设磁盘旋转速度为n转秒，每条磁道容量为N字节，则内部数据传输率为计算机组成原理DrnN字节秒或DrDv字节秒其中，D为位密度，v为磁盘旋转的线速度。磁盘存储器的数据传输率可达几十兆字节秒。磁盘cache的概念随着微电子技术的飞速发展，CPU的速度每年增长倍左右，主存芯片容量和磁盘驱动器的容量每年增长倍左右。但磁盘驱动器的存取时间没有出现相应的下降，仍停留在毫秒ms级。而主存的存取时间为纳秒ns级，两者速度差别十分突出，因此磁盘IO系统成为整个系统的瓶颈。为了减少存取时间，可采取的措施有：提高磁盘机主轴转速，提高IO总线速度，采用磁盘cache磁盘缓存等。主存和CPU之间设置高速缓存cache是为了弥补主存和CPU之间速度上的差异。同样，磁盘cache是为了弥补慢速磁盘和主存之间速度上的差异。磁盘cache的原理在磁盘cache中，由一些数据块组成的一个基本单位称为cache行。当一个IO请求送到磁盘驱动时，首先搜索驱动器上的高速缓冲行是否已写上数据？如果是读操作，且要读的数据已在cache中，则为命中，可从cache行中读出数据，否则需从磁盘介质上读出。写入操作和CPU中的cache类似，有“直写”和“写回”两种方法。磁盘cache利用了被访问数据的空间局部性和时间局部性原理。空间局部性是指当某些数据被存取时，该数据附近的其他数据可能也将很快被存取；时间局部性是指当一些数据被存取后，不久这些数据还可能再次存取。因此现在大多数磁盘驱动器中都使用了预读策略，而根据局部性原理预取一些不久将可能读入的数据放到磁盘cache中。CPU的cache存取时间一般小于ns，命中率以上，全用硬件来实现。磁盘cache一次存取的数量大，数据集中，速度要求较CPU的cache低，管理工作较复杂，因此一般由硬件和软件共同完成。其中cache采用SRAM或DRAM。RAID最早称为廉价冗余磁盘阵列，后来改为独立冗余磁盘阵列，它是用多台磁盘存储器组成的大容量外存系统。其构造基础是利用数据分块技术和并行处理技术，在多个磁盘上交错存放数据，使之可以并行存取。在RAID控制器的组织管理下，可实现数据的并行存储、交叉存储、单独存储。由于阵列中的一部分磁盘存有冗余信息，一旦系统中某一磁盘失效，可以利用冗余信息重建用户信息。RAID是年由美国加州大学伯克利分校一个研究小组提出的，它的设计理念是用多个小容量磁盘代替一个大容量磁盘，并用分布数据的方法能够同时从多个磁盘中存取数据，因而改善了IO性能，增加了存储容量，现已在超级或大型计算机中使用。工业上制定了一个称为RAID的标准，它分为级RAIDRAID。这些级别不是表示层次关系，而是指出了不同存储容量、可靠性、数据传输能力、IO请求速率等方面的应用需求。下面以RAID级为例来说明。考虑到低成本比可靠性更重要，RAID未采用奇偶校验等冗余技术。RAID用于高速数据传输和高速IO请求。对RAID，用户和系统数据分布在阵列中的所有磁盘上。与单个大容量磁盘相比，其优点是：如果两个IO请求正在等待两个不同的数据块，则被请求的块有可能在不同的盘上。因此，两个请求能够并行发出，减少了IO排队的时间。图表示使用磁盘阵列管理软件在逻辑磁盘和物理磁盘间进行映射。此软件可在磁盘子系统或主机上运行。所有的用户数据和系统数据都被看成是逻辑条带，存储在一个逻辑磁盘上。而实际物理磁盘也以条带形式划分，每个条带是一些物理的块、扇区或其他单位。数据条带以轮转方式映射到连续的阵列磁盘中。每个磁盘映射一条带，一组逻辑连续条带称为条带集。在一个有n个磁盘的阵列中，第组的n个逻辑条带依次物理地存储在n个磁盘的第个条带上，构成第个条带集；第组的n个逻辑条带分布在每个磁盘的第个条带上；依次类推。这种布局的优点是，如果单个IO请求由多个逻辑相邻的条带组成，则对多达n个条带的请求可以并行处理，从而大大减少了IO的传输时间。磁带机的记录原理与磁盘机基本相同，只是它的载磁体是一种带状塑料，称为磁带。写入时可通过磁头把信息代码记录在磁带上。当记录有代码的磁带在磁头下移动时，就可在磁头线圈上感应出电动势，即读出信息代码。磁带存储设备由磁带机和磁带两部分组成，它通常用作为海量存储设备的数据备份。磁带速度比磁盘速度慢，原因是磁带上的数据采用顺序访问方式，而磁盘则采用随机访问方式。目前的磁带技术有如下几种类型。英寸磁带QIC英寸磁带看起来像家用录音带一样，内部有供带轮和收带轮。不同的是，QIC标准有条磁道，数据并行记录，存储容量为MBGB。最新技术通过增加磁带的长度和宽度，使磁带的存储容量达到GB。QIC磁带驱动器使用个磁头，即一个读磁头两侧各有一个写磁头，如图所示。这种设计使磁带驱动器能在磁带往两个方向上运动时，都可以确认刚写入的数据。在规定的记录方式下，磁带以英寸秒的速度移动。磁带机的数据传输率D可用下式表示：Ddv其中，d表示记录密度单位长度上的存储信息量，v表示走带速度。数码音频磁带DATDAT是数码音频磁带的英文缩写，它采用旋转扫描技术。DAT的存储容量最大达到GB。与QIC相比，价格上比较昂贵。mm磁带mm磁带最初为视频行业设计，现已被计算机行业采用，被认为是存储大量计算机数据的可靠方式。mm磁带与DAT磁带在结构上类似，但是最大存储容量可达GB。数码线性磁带DLTDLT是数码线性磁带的英文缩写，它是半英寸宽的磁带，比mm磁带宽，比QIC磁带宽倍。因此DLT磁带提供所有磁带类型的存储容量，最大可以达到GB。目前的光盘有CDROM、WORM、CDR、CDRW、DVDROM等类型。CDROM光盘CDROM是只读型光盘，一张光盘容量为MB。光盘是直径为mm、厚度为mm的单面记录盘片。盘片的膜层结构如图a所示，盘基为聚碳酸酯，反射层多为铝质，保护层为聚丙烯酸酯。最上层为印刷的盘标。所有的只读型光盘系统都基于一个共同原理，即光盘上的信息以坑点形式分布，有坑点表示为“”，无坑点表示为“”，一系列的坑点存储元形成信息记录道，见图b。对数据存储用的CDROM光盘来讲，这种坑点分布作为数字“”“”代码的写入或读出标志。为此必须采用激光作为光源，并采用良好的光学系统才能实现。光盘的记录信息以凹坑方式永久性存储。读出时，当激光束聚焦点照射在凹坑上时将发生衍射，反射率低；而聚焦点照射在凸面上时大部分光将返回。根据反射光的光强变化并进行光电转换，即可读出记录信息。信息记录的轨迹称为光道。光道上划分出一个个扇区，它是光盘的最小可寻址单位。光盘扇区分为个区域。个全字节和个全字节组成同步SYNC区，标志着扇区的开始。字节的扇区标识ID区用于说明此扇区的地址和工作模式。光盘的扇区地址编码不同于磁盘，它是以分MN、秒SC和分数秒FR，s时间值作为地址。由于光盘的恒定线速度是每秒钟读出个扇区，故FR的值实际上就是秒内的扇区号。ID区的MD为模式控制，用于控制数据区和校验区的使用。共有三种模式：模式规定数据区和校验区的全部字节都是，这种扇区不用于记录数据，而是用于光盘的导入区和导出区；模式规定字节的校验区为字节的检测码EDC、字节的保留域未定义和字节的纠错码ECC，这种扇区模式有字节的数据并有很强的检测和纠错能力，适合于保存计算机的程序和数据；模式规定字节的校验区也用于存放数据，用于保存声音、图像等对误码率要求不高的数据。WORM、CDR光盘WORM表示一次写多次读，它是一种只能写一次的光盘。数据写到光盘后不可擦除但可多次读。记录信息时，低功率激光束在光盘表面灼烧形成微小的凹陷区。被灼烧的部分和未被灼烧的部分分别表示和。CDR实质上是WORM的一种，区别在于CDR允许多次分段写数据。CDR光盘有与CDROM的相似的圆形轨道，但不再是机械的在盘面上烧印凹痕来表示数据。CDR使用激光将微型斑点烧在有机燃料表层。读取数据时，在超过标准温度的激光束的照射下，这些烧过的斑点颜色发生变化，呈现出比未被灼烧的地方较暗的亮度。因此，CDR光盘通过激光烧和不烧斑点表示和，而CDROM则通过凹凸区来表示。CDR光盘的数据一旦写上也不能擦除。CDRW光盘CDRW表示可重复写光盘，用于反复读写数据。与CDR所使的基于染料的记录表层不同，CDRW光盘采用一种特殊的水晶复合物作为记录介质。当加热到一个确定的温度后，冷却时它即呈现出水晶状；但如果一开始把它加热到一个更高的温度，它会被熔化，随即冷却成一种非晶形的固态。写数据时，用激光束将待写区域加热至高温，使之熔化冷却成非晶形物质。由于非晶形区域比水晶形区域反射的光线强度弱，这样读数据时就可以区分出是还是。这种光盘允许多次写，重写数据时只需将被写过的呈非晶形的区域重新加热，温度在可结晶温度和熔化温度之间，使之重新转化为水晶态即可。DVDROM光盘最初DVD的全称是数字化视频光盘，但后来逐渐演变成数字化通用光盘的简称。DVDROM的数据也是事先存储在光盘上，这与CDROM是相同的。不过，凹陷区的大小相对更小一些，使得圆形光道上存储的数据总量更大。CDROM和DVDROM的主要区别是：CD光盘是单面使用，而DVD光盘两面都可以写数据。另外，除了有两面可写的DVD光盘，还有多层可写的光盘，在主数据层上还放置着多层透明的可写层，这种光盘的容量可以达到数十GB。读写这种多层数据光盘时，激光头每次都需要在层与层之间重新定位。顾名思义，磁光盘MO存储设备是采用磁场技术和激光技术相结合的产物。磁光盘和磁盘一样，由磁道和扇区组成。磁光盘是重写型光盘，可以进行随机写入、擦除或重写信息。MO盘和纯磁盘的基本区别是：磁光盘的磁表面需要高温来改变磁极。因此，MO盘在常温下是非常稳定的，数据不会改变。磁光盘的基本工作原理是：利用热磁效应写入数据：当激光束将磁光介质上的记录点加热到居里点温度以上时，外加磁场作用改变记录点的磁化方向，而不同的磁化方向可表示数字“”和“”。利用磁光克尔效应读出数据：当激光束照射到记录点时，记录点的磁化方向不同，会引起反射光的偏振面发生不同结果，从而检测出所记录的数据“”或“”。图示出了磁光盘操作的四种情况。图a表示未编码的磁盘，如所有磁化点均存“”。图b表示写操作：高功率激光束照射加热点记录点，磁头线圈中外加电流后产生的磁场使其对应的记录点产生相反的磁性微粒，从而写入“”。图c表示读操作：低功率的激光束反射掉相反极性的磁性粒子且使它的极性变化。如果这些粒子没有被反射掉，则反射激光束的极性是不变化的。图d表示擦除操作：高功率激光束照射记录点，外加磁场改变方向，使磁性粒子恢复到原始极性。总之，MO盘介质材料发生的物理特性改变是可逆变化，因此信息是可重写的。以可见光的形式传递和处理信息的设备称为显示设备，它是目前计算机系统中应用最广泛的人机界面设备。显示设备种类繁多。按显示设备所用的显示器件分类，有阴极射线管CRT显示器、液晶显示器LCD、等离子显示器等。按所显示的信息内容分类，有字符图形显示器、图像显示器等。在CRT显示设备中，以扫描方式不同，分成光栅扫描和随机扫描两种显示器；以分辨率不同，分成高分辨率显示器和低分辨率显示器；以显示的颜色分类，有单色黑白显示器和彩色显示器。以CRT荧光屏对角线的长度分类，有英寸、英寸、英寸等多种。分辨率和灰度级分辨率是指显示器所能表示的像素个数。像素越密，分辨率越高，图像越清晰。分辨率取决于显像管荧光粉的粒度、荧光屏的尺寸和CRT电子束的聚焦能力。同时刷新存储器要有与显示像素数相对应的存储空间，用来存储每个像素的信息。例如，英寸彩色CRT的分辨率为像素。每个像素的间距为mm，水平方向的像素所占显示长度为mm，垂直方向像素是按的长宽比例分配。按这个分辨率表示的图像具有较好的水平线性和垂直线性，否则看起来会失真变形，同样英寸的CRT显示像素也满足的比例。某些专用的方形CRT显示分辨率为像素，甚至更多。灰度级是指黑白显示器中所显示的像素点的亮暗差别，在彩色显示器中则表现为颜色的不同。灰度级越多，图像层次越清楚逼真。灰度级取决于每个像素对应刷新存储器单元的位数和CRT本身的性能。如果用位表示一像素，则只有级灰度或颜色；如果用位表示一像素，则有级灰度或颜色。字符显示器只用“”，“”两级灰度就可表示字符的有无，故这种只有两级灰度的显示器称为单色显示器。具有多种灰度级的黑白显示器称为多灰度级黑白显示器。图像显示器的灰度级一般在级以上。刷新和刷新存储器CRT发光是由电子束打在荧光粉上引起的。电子束扫过之后其发光亮度只能维持几十毫秒便消失。为了使人眼能看到稳定的图像显示，必须使电子束不断地重复扫描整个屏幕，这个过程称为刷新。按人的视觉生理，刷新频率大于次秒时才不会感到闪烁。为了不断提供刷新图像的信号，必须把一帧图像信息存储在刷新存储器，也称视频存储器。其存储容量M由图像分辨率和灰度级决定。MrC分辨率r越高，颜色深度C越多，刷新存储器容量越大。如分辨率为，级颜色深度的图像，存储容量MbitMB。刷新存储器的存取周期必须满足刷新频率的要求。刷存容量和存取周期是刷新存储器的重要技术指标。不同的计算机系统，显示器的组成方式也不同。在大型计算机中，显示器作为终端设备独立存在，即键盘输入和CRT显示输出是一个整体，通过标准的串行接口与主机相连。在微型机系统中，CRT显示输出和键盘输入是两个独立的设备，显示系统由插在主机槽中的显示适配器卡和显示器两部分组成，而且将字符显示与图形显示结合为一体。字符显示显示字符的方法以点阵为基础。点阵是由mn个点组成的阵列，并以此来构造字符。将点阵存入由ROM构成的字符发生器中，在CRT进行光栅扫描的过程中，从字符发生器中依次读出某个字符的点阵，按照点阵中和代码不同控制扫描电子束的开或关，从而在屏幕上显示出字符，如图a所示。点阵的多少取决于显示字符的质量和字符窗口的大小。字符窗口是指每个字符在屏幕上所占的点数，它包括字符显示点阵和字符间隔。在IBMPC系统中，屏幕上共显示列行个字符，故字符窗口数目为。在单色字符方式下，每个字符窗口为点阵，字符为点阵。对应于每个字符窗口，所需显示字符的ASCII代码被存放在视频存储器VRAM中，以备刷新，故VRAM应有个单元存放被显示的字符信息。字符发生器ROM的高位地址来自VRAM的ASCII代码，低位地址来自光栅地址计数器的输出RARA，它具体指向这个字形点阵中的某字节。在显示过程中，按照VRAM中的ASCII码和光栅地址计数器访问ROM，依次取出字形点阵，就可以完成一个字符的输出，见图b。图形显示图形显示是指用计算机手段表示现实世界的各种事物，并形象逼真地加以显示。根据产生图形的方法，分随机扫描图形显示器和光栅扫描图形显示器。随机扫描图形显示器工作原理是将所显示图形的一组坐标点和绘图命令组成显示文件存放在缓冲存储器，缓存中的显示文件送矢量线段产生器，产生相应的模拟电压，直接控制电子束在屏幕上的移动。为了在屏幕上保留持久稳定的图像，需要按一定的频率对屏幕反复刷新。这种显示器的优点是分辨率高可达像素，显示的曲线平滑。目前高质量图形显示器采用这种随机扫描方式。光栅扫描图形显示器产生图形的方法称为相邻像素串接法，即曲线是由相邻像素串接而成。因此光栅扫描图形显示器的原理是：把对应于屏幕上每个像素的信息都用刷新存储器存起来，然后按地址顺序逐个地刷新显示在屏幕上。刷新存储器中存放一帧图形的形状信息，它的地址和屏幕上的地址一一对应，例如，屏幕的分辨率为像素，刷存就要有单元；屏幕上像素的灰度为级，刷存每个单元的字长就是位。因此刷存的容量直接取决于显示器的分辨率和灰度级。换言之，此时需要有MB的刷存与之对应。光栅扫描图形显示器的优点是通用性强，灰度层次多，色调丰富，显示复杂图形时无闪烁现象；所产生的图形有阴影效应、隐藏面消除、涂色等功能。它的出现使图形学的研究从简单的线条图扩展到丰富多彩、形象逼真的各种立体及平面图形，从而成为目前流行的显示器。图像的概念与图形的概念不同。图形是用计算机表示和生成的图，称为主观图像。在计算机中表示图形，只需存储绘图命令和坐标点，没有必要存储每个像素点。而图像所处理的对象多半来自客观世界，即由摄像机摄取下来存入计算机的数字图像，这种图像称为客观图像。由于数字化以后逐点存储，因此图像处理需要占用非常庞大的主存空间。图像显示器采用光栅扫描方式，其分辨率在像素像素或像素像素，与图形显示兼容的图像显示器已达像素像素，灰度级在级。图像显示器有两种类型。一种是图所示的简单图像显示器，它仅仅显示由计算机送来的数字图像。图像处理操作在计算机中完成，显示器不做任何处理。虚线框中的IO接口、图像存储器刷新存储器、AD与DA变换等组成单独的一个部分，称为图像输入控制板或视频数字化仪。图像输入控制板的功能是实现连续的视频信号与离散的数字量之间的转换。图像输入控制板接收摄像机模拟视频输入信号，经AD变换为数字量存入刷新存储器用于显示，并可传送到计算机进行图像处理操作。处理后的结果送回刷存，经DA变换成模拟视频输出，由监视器进行显示输出。监视器只包括扫描、视频放大等与显示有关的电路及显像管。也可以接入电视机的视频输入端来代替监视器。数字照相机的出现，更容易组成一个图像处理系统。另一种是图形处理子系统，其硬件结构较前一种复杂得多。它本身就是一个具有并行处理功能的专用计算机，不仅能完成显示操作，同时由于子系统内部有容量很大的存储器和高速处理器。可以快速执行许多图像处理算法，减轻主计算机系统的运算量。这种子系统可以单独使用，也可以联到通用计算机系统。目前流行的图形工作站就属于图形处理子系统。由于新一代多媒体计算机的发展，图像的处理与显示技术越来越受到人们的重视。不同的显示标准所支持的最大分辨率和颜色数目是不同的。随着IBMPC系列机的升级发展，PC机采用的显示标准经历了很多变化。MDA是PC机最早使用的显示标准。MDA是单色字符显示适配器，采用点阵的字符窗口，满屏显示列行字符，对应分辨率为像素。VGA显示标准可兼容字符和图形两种显示方式。字符窗口为点阵，图形方式下分辨率为像素，种颜色。自IBM公司推出VGA后，VESA美国视频电子标准协会定义了一个VGA扩展集，将显示方式标准化，从而成为著名的SuperVGA模式。该模式除兼容VGA的显示方式外，还支持像素光栅，每像素点位颜色深度，刷新频率可达MHz。当今的显示适配器为支持视窗的API应用程序界面，几乎都安装图形加速器硬件，这样的适配器称为AVGA。它在显示方式上除遵循VESA的SuperVGA模式外，并没有提出新的显示方式。但由于有了图形加速器硬件，并在视窗驱动程序的支持下，系统的图形显示性能得到显著改善。表中列出了VESA扩充的标准显示模式。早期的MDA等显示方式是由BIOS的一组功能调用INTh来设置和管理的，使用位的方式码。VESA保留了这种方式，将VGA类显示器及适配器所能支持的新的显示方式进行定义，并为新的显示方式指定了位的方式码。方式码的b位为VESA标志位，bb为保留位，故VESA的显示方式号为h。表中括号内的数字，如，指的是三原色RGB每色所占的位数，有的还在前面有，表示I加亮占位。图是显示适配器的结构框图，它由刷新存储器、显示控制器、ROMBIOS三部分组成。在Pentium系列中显示适配器大多作成插卡形式，插入一个PCI或VESAVL总线槽。它一方面与位或位的系统总线相接，另一方面通过一个针D形插口与显示器电缆连接，将水平、垂直同步信号VSYNC、HSYNC和红R、绿G、蓝B三色模拟信号送至显示器。显示适配器的顶部另有一个VFC插头，通过一个芯扁平电缆与视频卡相连，通过传送像素的电平信号，还可以实现视频图像与PC图形的合成。刷新存储器存放显示图案的点阵数据。其存储容量取决于设定的显示工作方式。例如，设定VESA显示模式中的方式码为h时，其分辨率为像素，颜色深度为位字节，则显示一屏画面需要KB的存储器容量。因此当前的刷存容量一般在MB，由高速的DRAM组成。刷存通过适配器内部的位或位总线与显示控制器连接。ROMBIOS含有少量的固化软件，用于支持显示控制器建立所要求的显示环境。此BIOS软件主要用于DOS操作系统。在视窗环境下，它的大部分功能不被使用，而由后者的设备驱动程序建立操作系统与适配器硬件的衔接。显示控制器是适配器的心脏。它依据设定的显示工作方式，自主地、反复不断地读取显存中的图像点阵包括图形、字符文本数据，将它们转换成R、G、B三色信号，并配以同步信号送至显示器刷新屏幕。显示控制器还要提供一个由系统总线至刷存总线的通路，以支持CPU将主存中已修改好的点阵数据写入到刷存，以更新屏幕。这些修改数据一般利用扫描回程的消隐时间写入到刷存中，因此显示屏幕不会出现凌乱。先进的显示控制器具有图形加速能力，这样的控制器芯片称为AVGA芯片。典型的图形加速功能有：位和块传送，用于生成和移动一个矩形块如窗口数据；画线，由硬件在屏上任意两点间画一向量；填域，以预先指定的颜色或花样填满一个任意多边形；颜色扩充，将一个单色的图像放到屏上某一位置后，给它加上指定的前景颜色和背景颜色。思考题显示适配器中为什么一定要具有显示存储器？图形输入设备图形输入方法较多，特别是交互式图形系统要求具有人机对话功能：计算机将结果显示给人，人根据看到的显示决定下一步操作，并通过输入设备告诉计算机。如此反复多次，直到显示结果满意。为此必须具有方便灵活的输入手段，才能体现“交互式”的优越性。键盘输入键盘是字符和数字的输入装置，无论字符输入还是图形输入，键盘是一种最基本的常用设备。当需要输入坐标数据建立显示文件时，要利用键盘。另外，利用键盘上指定的字符与屏幕上的光标结合，可用来移动光标，拾取图形坐标，指定绘图命令等。鼠标器输入鼠标器是一种手持的坐标定位部件，有两种类型。一种是机械式的，在底座上装有一个金属球，在光滑的表面上摩擦，使金属球转动，球与四个方向的电位器接触，就可以测量出上下左右四个方向的相对位移量。另一种是光电式的鼠标器，需要一块画满小方格的长方形金属板配合使用。当鼠标器在板上移动时，安装在鼠标器底部的光电转换装置可以定位坐标点。光电式鼠标器比机械式鼠标器可靠性高，但需要附带一块金属板。另外，用相对坐标定位，必须和CRT显示的光标配合，计算机先要给定光标初始位置，然后用读取的相对位移移动光标。图像输入设备最理想的图像输入设备是数字摄像机。它可以摄取任何地点、任何环境的自然景物和物体，直接将数字图像存入磁盘。当图像已经记录到某种介质上时，要利用读出装置读出图像。例如，记录在录像带上的图像要用录像机读出，再将视频信号经图像板量化后输入计算机。记录在数字磁带上的遥感图像可以直接在磁带机上输入。如果想把纸上的图像输入计算机，一种方法是用摄像机对着纸上的图像摄像输入，另一种方法是利用装有CCD电荷耦合器件的图文扫描仪或图文传真机。还有一种叫“扫描仪”的专用设备，可以直接将纸上的图像转换成数字图像。由于一帧数字图像要占很大的存储空间，图像数据的传输与存储问题将是一个十分重要的研究课题，目前普遍采用的方法是压缩恢复技术。语音输入设备利用人的自然语音实现人机对话是新一代多媒体计算机的重要标志之一。图示出了一种语音输入输出设备的原理方框图。语音识别器作为输入设备，可以将人的语言声音转换成计算机能够识别的信息，并将这些信息送入计算机。而计算机处理的结果又可以通过语音合成器变成声音输出，以实现真正的“人机对话”。通常语音识别器与语言合成器放在一起做成语音输入输出设备。图中声音通过话筒进入语音识别器，然后送入计算机；计算机输出数据送入语音合成器变为声音，然后由喇叭输出。打印输出是计算机最基本的输出形式。与显示器输出相比，打印输出可产生永久性记录，因此打印设备又称为硬拷贝设备。打印设备的分类打印设备种类繁多，有多种分类方法。按印字原理分，分为击打式和非击打式两大类。击打式是利用机械作用使印字机构与色带和纸相撞击而打印字符。因此习惯上将属于击打式打印方式的机种称为“打印机”。击打式设备的成本低，缺点是噪声大，速度慢。非击打式是采用电、磁、光、喷墨等物理、化学方法印刷字符，因此习惯上将这类非击打式的机种称为“印字机”，如激光印字机、喷墨印字机等。非击打式的设备速度快，噪声低，印字质量高，但价格较贵，有的设备还需要专用纸张。目前的发展趋势是机械化的击打式设备逐步转向电子化的非击打式设备。另外，还有能够输出图形图像的打印机，具有彩色效果的彩色打印机等。激光印字机激光印字机是激光技术和电子照相技术结合的产物，其基本原理与静电复印机相似。激光印字机的结构见图。激光器输出的激光束经光学透镜系统被聚焦成一个很细小的光点，沿着圆周运动的滚筒进行横向重复扫描。滚筒是记录装置，表面镀有一层具有光敏特性的感光材料，通常是硒，因此又将滚筒称为硒鼓。硒鼓在未被激光束扫描之前，首先在黑暗中充电，使鼓表面均匀地沉积一层电荷。此后根据控制电路输出的字符或图形，变换成数字信号来驱动激光器的打开与关闭。扫描时激光器将对鼓表面有选择地曝光，曝光部分产生放电现象，未曝光部分仍保留充电时的电荷，从而形成静电潜像。随着鼓的转动，潜像部分将通过装有碳粉盒的显影器，使得具有字符信息的区域吸附上碳粉，达到显影的目的。当鼓上的字符信息区和普通纸接触时，由于在纸的背面施以反向的静电电荷，鼓表面上的碳粉就会被吸附到纸上来，这个过程称为转印。最后，当记录有信息的纸经过定影辊高温加热，碳粉被溶化，永久性地黏附在纸上，达到定影的效果。另外，转印后的鼓面还留有残余的碳粉。因此先要除去鼓表面的电荷，然后经清扫刷，将残余的碳粉全部清除。清除以后的鼓表面又继续重复上述的充电、曝光、显影、转印、定影等一系列过程。激光印字机是非击打式硬拷贝输出设备，输出速度快，印字质量高，可使用普通纸张。其印字分辨率达到每英寸个点以上，缓冲存储器容量一般在MB以上，对汉字或图形图像输出，是理想的输出设备，因而在办公自动化及轻印刷系统中得到了广泛的应用。本章小结外围设备大体分为输入设备、输出设备、外存设备、数据通信设备、过程控制设备五大类。每一种设备，都是在它自己的设备控制器控制下进行工作的，而设备控制器则通过IO接口模块和主机相连，并受主机控制。磁盘、磁带属于磁表面存储器，特点是存储容量大，位价格低，记录信息永久保存，但存取速度较慢，因此在计算机系统中作为辅助大容量存储器使用。硬磁盘按盘片结构分为可换盘片式、固定盘片式两种，磁头也分为可移动磁头和固定磁头两种。温彻斯特磁盘是一种采用先进技术研制的可移动磁头、固定盘片的磁盘机，组装成一个不可拆卸的机电一体化整体，防尘性能好，可靠性高，因而得到了广泛的应用，成为最有代表性的硬磁盘存储器。磁盘存储器的主要技术指标有存储密度、存储容量、平均存取时间、数据传输速率。磁盘阵列RAID是多台磁盘存储器组成的大容量外存系统，它实现数据的并行存储、交叉存储，单独存储，改善了IO性能，增加了存储容量，是一种先进的硬磁盘体系结构。各种可移动硬盘的诞生，是磁盘先进技术的又一个重要进展。光盘和磁光盘是近年发展起来的一种外存设备，是多媒体计算机不可缺少的设备。按读写性质分类有：只读型：记录的信息只能读出，不能被修改。一次型：用户可在这种盘上记录信息，但只能写一次，写后的信息不能再改变，只能读。重写型：用户可对这类光盘进行随机写入、擦除或重写信息。光盘由于存储容量大、耐用、易保存等优点，成为计算机大型软件的传播载体和电子出版物的媒体。不同的CRT显示标准所支持的最大分辨率和颜色数目是不同的。VESA标准，是一个可扩展的标准，它除兼容传统的VGA等显示方式外，还支持像素像素光栅，每像素点位颜色深度，刷新频率可达MHz。显示适配器作为CRT与CPU的接口，由刷新存储器、显示控制器、ROMBIOS三部分组成。先进的显示控制器具有图形加速能力。常用的计算机输入设备有图形输入设备键盘、鼠标、图像输入设备、语音输入设备。常用的打印设备有激光打印机、彩色喷墨打印机等，它们都属于硬拷贝输出设备。外围设备的种类繁多，有机械式和电动式，也有电子式和其他形式。其输入信号，可以是数字式的电压，也可以是模拟式的电压和电流。从信息传输速率来讲，相差也很悬殊。例如，当用手动的键盘输入时，每个字符输入的间隔可达数秒钟。又如，磁盘输入的情况下，在找到磁道以后，磁盘能以大于Bs的速率输入数据。在计算机系统中，为了保证高速的主机和不同速度的外设之间的高效和可靠的交互，CPU必须通过IO接口与外设连接。因此，CPU的输入输出操作实际上分为两个传输阶段：IO接口与外设间的数据传送，以及CPU与IO接口之间的数据传送如图所示。显然，这两个阶段是相互关联的。IO接口是由半导体介质构成的逻辑电路，它作为一个转换器，保证外部设备用计算机系统特性所要求的形式发送或接收信息。为了与CPU交互信息的方便，在接口内部一般要设置一些可以被CPU直接访问的寄存器。这些寄存器称为端口Port。例如，接口内用于接收来自CPU等主控设备的控制命令的寄存器称为命令端口，简称命令口，接口内向CPU报告IO设备的工作状态的寄存器称为状态端口或状态口，接口内在外设和总线间交换数据的缓冲寄存器称为数据端口或数据口。为便于CPU访问端口，也需对端口安排地址。通常有两种不同的编址方式。一种是统一编址方式：输入输出设备接口中的控制寄存器、数据寄存器、状态寄存器等和内存单元一样看待，它们和内存单元联合在一起编排地址。这样就可用访问内存的指令读、写指令去访问IO设备接口内的某个寄存器，因而不需要专门的IO指令组。另一种是IO独立编址方式：内存地址和IO设备地址是分开的，访问内存和访问IO设备使用不同的指令，即访问IO设备有专门的IO指令组。输入输出操作的一般过程由于接口与CPU的速度大致相当，仅从CPU读写接口内寄存器的角度看，CPU读写端口的方式与CPU读写内存单元是相似的。但是，内存单元的功能是存储数据，而端口的功能则是辅助CPU与外设交互，故端口中的数据并不是静态的，而是动态变化的。CPU写入控制口的信息要由接口内的逻辑电路转换成相关控制信号发送给外设，外设的状态信息则由接口的逻辑电路转换成状态字存入状态口供CPU读取。CPU写入输出数据口的信息要由外设取走。外设发送给CPU的数据则通过输入数据口缓冲。外设状态信息可能是时刻变化的，给外设的控制命令也往往会不断改变，CPU与外设交互数据一般情况下也是成批连续进行的。因此，对端口的连续访问必须确保信息的有效性。首先我们看看输入输出设备同CPU交换数据的一般过程。如果是输入过程，一般需要以下三个步骤：CPU把一个地址值放在地址总线上，选择某一输入设备；CPU等候输入设备的数据成为有效；CPU从数据总线读入数据，并放在一个相应的寄存器中。如果是输出过程，一般需要以下三个步骤：CPU把一个地址值放在地址总线上，选择一个输出设备；CPU把数据放在数据总线上；输出设备认为数据有效，从而把数据取走。从上述输入输出过程看出，问题的关键就在于：究竟什么时候数据才成为有效事实上，各种外围设备的数据传输速率相差甚大。如果把高速工作的处理器同按照不同速度工作的外围设备相连接，那么首先遇到的一个问题，就是如何保证处理器与外围设备在时间上同步这就是我们要讨论的外围设备的定时问题。很显然，由于输入输出设备本身的速度差异很大，因此，对于不同速度的外围设备，需要有不同的定时方式。一个计算机系统，即使CPU有极高的速度，如果忽略IO速度的提升，对整个系统的性能仍然影响极大。下面通过一个例子说明IO对系统性能的影响。根据外设工作速度的不同，IO接口与外设间的数据传送方式有以下三种。速度极慢或简单的外围设备：无条件传送方式对这类设备，如机械开关、发光二极管等，在任何一次数据交换之前，外设无需进行准备操作。换句话说，对机械开关来讲，可以认为输入的数据一直有效，因为机械开关的动作相对主机的速度来讲是非常慢的。对发光二极管来讲，可以认为主机输出时外设一定准备就绪，因为只要给出数据，发光二极管就能进行显示。所以，对于简单的慢速设备，接口与外设之间只需要数据信号线，无需握手联络信号线，接口只需实现数据缓冲和寻址功能，故称为无条件传送方式或零线握手联络方式。慢速或中速的外围设备：应答方式异步传送方式由于这类设备的速度和主机的速度并不在一个数量级，或者由于设备如键盘本身是在不规则时间间隔下操作的，因此，主机与这类设备之间的数据交换通常采用异步定时方式，接口与外设之间在数据传送信号线之外安排若干条握手联络、挂钩信号线，用以在收发双方之间传递控制信息，指明何时能够交换数据。例如，最常见的双线握手方式设置两条联络握手信号线：一条发方向收方发出的选通信号或请求信号，指明数据是否有效；一条收方向发方发出的应答信号，指明数据是否已经被取走。高速的外围设备：同步传送方式对于中等以上数据传送速率并按规则间隔工作的外部设备，接口以某一确定的时钟速率和外设交换信息。因此，这种方式称为同步定时方式。一旦接口和外设确认同步，它们之间的数据交换便靠时钟脉冲控制来进行。例如，若外设是一条传送位秒的同步通信线路，那么接口即每隔秒执行一次串行的输入输出操作。为便于理解，先讲一个例子，假设幼儿园一个阿姨带个孩子，要给每个孩子分块水果糖。假设孩子们把块糖都吃完，那么她采用什么方法呢第一种方法：她先给孩子甲一块糖，盯着甲吃完，然后再给第二块。接着给孩子乙，其过程与孩子甲完全一样。以此类推，直至到第个孩子发完块糖。看来这种方法效率太低，重要之点还在于孩子们吃糖时她一直在守候，什么事也不能干。于是她想了第二种方法：每人发一块糖各自去吃，并约定谁吃完后就向她举手报告，再发第二块。看来这种新方法提高了工作效率，而且在未接到孩子们吃完糖的报告以前，她还可以腾出时间给孩子们批改作业。但是这种方法还可以改进，于是她想了第三种方法，进行批处理：每人拿块糖各自去吃，吃完块糖后再向她报告。显然这种方法工作效率大大提高，她可以腾出更多的时间批改作业。还有没有更好的方法呢我们假定她给孩子们改作业是她的主要任务，那么她还可以采用第四种方法：权力下放，把发糖的事交给另一个人分管，只是必要时她才过问一下。在计算机系统中，CPU管理外围设备也有几种类似的方式。无条件传送方式简单IO方式无条件传送方式假设外设始终处于就绪状态，数据传送时，CPU不必通过接口查询外设的状态，而直接执行IO指令进行数据传输。显然，只有当接口与外设之间采用无条件传送方式时，CPU与接口之间才能采用无条件传送方式。这种方式下，CPU在端口读、写操作之前对目标设备的状态不作任何检测。当简单外设作为输入设备时，可使用三态缓冲器与数据总线相连；当简单外设作为输出设备时，输出一般采用锁存器。程序查询轮询方式多数外设每传送完一次数据总要进行一段时间的处理或准备才能传送下一个数据，因此在数据传送之前，CPU需要通过接口对目标设备的状态进行查询：如果外设已准备好传送数据则进行数据传送；如果外设未准备好传送数据，则CPU不断地查询并等待，直到外设准备好信息交互。其定时过程如下：如果CPU希望从外设接收一个字，则它首先通过状态口询问外设的状态，如果该外设的状态标志表明设备已“准备就绪”，那么CPU就从总线上接收数据。CPU在接收数据以后，通过接口发出输入响应信号，告诉外设已经把数据总线上的数据取走。然后，外设把“准备就绪”的状态标志复位，并准备下一个字的交换。如果外设没有“准备就绪”，那么它就发出“忙”的标志。于是，CPU将进入一个循环程序中等待，并在每次循环中询问外设的状态，一直到外设发出“准备就绪”信号以后，才从外设接收数据。CPU发送数据的情况也与上述情况相似，外设先通过接口发出请求输出信号，而后CPU询问外设是否准备就绪。如果外设已准备就绪，CPU便发出准备就绪信号，并送出数据。外设接收数据以后，将向CPU发出“数据已经取走”的通知。程序查询方式是一种简单的输入输出方式，数据在CPU和外围设备之间的传送完全靠计算机程序控制。这种方式的优点是CPU的操作和外围设备的操作能够同步，而且软硬件结构都比较简单。但问题是，外围设备通常动作很慢，程序进入查询循环时将白白消耗掉CPU很多时间。这种情况类似于上述例子中第一种方法。即使CPU采用定期地由主程序转向查询设备状态的子程序进行扫描轮询polling的办法，CPU时间的消耗也是可观的。因此程序查询方式只适用于连接低速外设或者CPU任务不繁忙的情况。程序中断方式中断是外围设备用来“主动”通知CPU，准备送出输入数据或接收输出数据的一种方法。通常，当一个中断发生时，CPU暂停其现行程序，而转向中断处理程序，从而可以输入或输出一个数据。当中断处理完毕后，CPU又返回到原来执行的任务，并从其停止的地方开始执行程序。这种方式和我们前述例子的第二种方法类似。可以看出，它节省了CPU宝贵的时间，是管理IO操作的一个比较有效的方法。中断方式一般适用于随机出现的服务请求，并且一旦提出要求，能使服务请求立即得到响应，因而适合于计算机工作量十分饱满、而IO处理的实时性要求又很高的系统。同程序查询方式相比，中断方式硬件结构相对复杂，软件复杂度也提高了，服务开销时间较大。直接内存访问DMA方式用中断方式交换数据，是通过CPU执行程序来实现数据传送的。每进行一次传送，CPU必须执行一遍中断处理程序，完成一系列取指令、分析指令、执行指令的过程。而且，每进入一次中断处理程序，CPU都要保护被打断的程序的下一条指令地址断点和状态条件寄存器的当前值；在中断处理程序中，通常还要保护及恢复通用数据寄存器。因此，每处理一次IO交换，需几十微秒到几百微秒的时间。在指令流水方式中，中断发生或从中断返回时，指令队列预取的指令会全部作废。因此，在高速、成批传送数据时，中断方式难以满足速度要求。直接内存访问DMA方式是一种完全由硬件执行IO交换的工作方式。这种方式既能够响应随机发生的服务请求，同时又可以省去中断处理的开销。此时，DMA控制器从CPU完全接管对总线的控制，数据交换不经过CPU，而直接在内存和外围设备之间进行，以高速传送数据。这种方式和前述例子的第三种方法相仿，主要的优点是数据传送速度很高，传送速率仅受到内存访问时间的限制。与中断方式相比，需要更多的硬件。DMA方式适用于内存和高速外围设备之间大批数据交换的场合。通道和输入输出处理器DMA方式的出现已经减轻了CPU执行IO操作的压力，使得CPU的效率有显著的提高，而通道的出现则进一步提高了CPU的效率。这是因为，CPU将部分权力下放给通道。通道是一个具有特殊功能的简化版处理器，它可以实现对外围设备的统一管理和外围设备与内存之间的数据传送控制。更进一步，现代的很多高性能计算机系统为输入输出操作配置专用的处理器，称为输入输出处理器IOP或者外围处理器。这种方式与前述例子的DMA方式相仿，大大提高了CPU的工作效率。然而这种提高CPU效率的方式是以耗费更多硬件为代价的。综上所述，外围设备的输入输出方式可用图表示。程序查询方式和程序中断方式适用于数据传输率比较低的外围设备，而DMA方式、通道方式和IOP方式适用于数据传输率比较高的设备。程序查询方式又称为程序控制IO方式。在这种方式中，数据在CPU和外围设备之间的传送完全靠计算机程序控制，是在CPU主动控制下进行的。当需要输入输出时，CPU暂停执行主程序，转去执行设备输入输出的服务程序，根据服务程序中的IO指令进行数据传送。这是一种最简单、最经济的输入输出方式，只需要很少的硬件。输入输出指令当用程序实现输入输出传送时，IO指令一般具有如下功能：置“”或置“”IO接口的某些控制触发器，用于控制设备进行某些动作，如启动、关闭设备等。测试设备的某些状态，如“忙”“准备就绪”等，以便决定下一步的操作。传送数据，当输入数据时，将IO接口中数据寄存器的内容送到CPU某一寄存器；当输出数据时，将CPU中某一寄存器的内容送到IO接口的数据寄存器。不同的机器，所采用的IO指令格式和操作也不相同。例如，某机的IO指令格式如下：其中第位表示IO指令；OP表示操作码，用以指定IO指令的种操作类型；DMs表示个外部设备的设备地址，每个设备地址中可含有A、B、C三个数据寄存器；、位表示控制功能，如启动设备S、关闭设备C等；RR表示CPU中的个通用寄存器。上述IO指令如用汇编语言写出，指令“DOAS”表示把CPU中R的内容输出到号设备的A数据缓冲寄存器中，同时启动号设备工作。指令“DICC”表示把号设备中C寄存器的数据送入CPU中通用寄存器R，并关闭号设备。输入输出指令不仅用于传送数据和控制设备的启动与关闭，而且也用于测试设备的状态。如SKP指令是测试跳步指令，它是程序查询方式中常用的指令，其功能是测试外部设备的状态标志如“就绪”触发器：若状态标志为“”，则顺序执行下一条指令；若状态标志为“”，则跳过下一条指令。程序查询方式的接口由于主机和外部设备之间进行数据传送的方式不同，因而接口的逻辑结构也相应有所不同。程序查询方式的接口是最简单的，如图所示。程序查询方式的接口电路包括如下部分。设备选择电路接到总线上的每个设备预先都给定了设备地址码。CPU执行IO指令时需要把指令中的设备地址送到地址总线上，用以指示CPU要选择的设备。每个设备接口电路都包含一个设备选择电路，用它判别地址总线上呼叫的设备是不是本设备。如果是，本设备就进入工作状态，否则不予理睬。设备选择电路实际上是设备地址的译码器。数据缓冲寄存器当输入操作时，用数据缓冲寄存器来存放从外部设备读出的数据，然后送往CPU；当输出操作时，用数据缓冲寄存器来存放CPU送来的数据，以便送给外部设备输出。设备状态标志是接口中的标志触发器，如“忙”“准备就绪”“错误”等，用来标志设备的工作状态，以便接口对外设动作进行监视。一旦CPU用程序询问外部设备时，将状态标志信息取至CPU进行分析。程序查询输入输出方式程序查询方式是利用程序控制实现CPU和外部设备之间的数据传送。程序执行的动作如下：先向IO设备发出命令字，请求进行数据传送。从IO接口读入状态字。检查状态字中的标志，看看数据交换是否可以进行。假如这个设备没有准备就绪，则第、第步重复进行，一直到这个设备准备好交换数据，发出准备就绪信号“Ready”。CPU从IO接口的数据缓冲寄存器输入数据，或者将数据从CPU输出至接口的数据缓冲寄存器。与此同时，CPU将接口中的状态标志复位。图中用表示了CPU从外设输入一个字的过程。按上述步骤执行时CPU资源浪费严重，故实际应用中做如下改进：CPU在执行主程序的过程中可周期性地调用各外部设备询问子程序，而询问子程序依次测试各IO设备的状态触发器“Ready”。如果某设备的Ready为“”，则转去执行该设备的服务子程序；如该设备的Ready为“”，则依次测试下一个设备。图示出了典型的程序查询流程图。图的右边列出了汇编语言所写的查询程序，其中使用了跳步指令SKP和无条件转移指令JMP。第条指令“SKPDZ”的含义是，检查号设备的Ready标志是否为“”如果是，接着执行第条指令，即执行号设备的设备服务子程序PTRSV；如果Ready标志为“”，则跳过第条指令，转去执行第条指令。依次类推。最后一条指令返回主程序断点m。设备服务子程序的主要功能是：实现数据传送。输入时，由IO指令将设备的数据传送到CPU某寄存器，再由访内指令把寄存器中的数据存入内存；输出时，其过程正好相反。修改内存地址，为下一次数据传送做准备。修改传送字节数，以便修改传送长度。进行状态分析或其他控制功能。某设备的服务子程序执行完以后，接着查询下一个设备。被查询设备的先后次序由查询程序决定，图中以、、、为序。也可以用改变程序的办法来改变询问次序。一般来说，总是先询问数据传输率高的设备，后询问数据传输率低的设备，因而后询问的设备要等待更长的时间。中断是一种程序随机切换的方式，有时也统称为异常。当外部发生某些随机的事件需要及时处理时，无论CPU正在执行哪一条指令，都可以通过中断响应的方式暂停正在执行的主程序的执行，转而执行另外一段中断服务程序。在高优先级的中断服务程序执行完毕后，可以返回被打断的主程序“断点”继续执行。中断方式的典型应用包括：实现CPU与外界进行信息交换的握手联络。一方面，中断可以实现CPU与外设的并行工作；另一方面，对于慢速IO设备，使用中断方式可以有效提高CPU的效率。故障处理。中断可以用于处理常见的硬件故障，如掉电、校验错、运算出错等；也可以处理常见的软件故障，如溢出、地址越界、非法指令等。实时处理。中断可以保证在事件出现的实际时间内及时地进行处理。程序调度。中断是操作系统进行多任务调度的手段。软中断程序自愿中断。软中断不是随机发生的，而是与子程序调用功能相似，但其调用接口简单，不依赖于程序入口地址，便于软件的升级维护和调用。中断概念的出现，是计算机系统结构设计中的一个重大变革。节中曾经提到，在程序中断方式中，某一外设的数据准备就绪后，它“主动”向CPU发出请求中断的信号，请求CPU暂时中断目前正在执行的程序而进行数据交换。当CPU响应这个中断请求时，便暂停运行主程序，并自动转移到该设备的中断服务程序。当中断服务程序结束以后，CPU又回到原来的主程序。这种原理和调用子程序相仿，不过，这里要求转移到中断服务程序的请求是由外部设备发出的。中断方式特别适合于随机出现的服务。图示出了中断处理示意图。主程序只是在设备A、B、C数据准备就绪时，才去与设备A、B、C进行数据交换。在速度较慢的外围设备准备自己的数据时，CPU照常执行自己的主程序。在这个意义上说，CPU和外围设备的一些操作是并行地进行的，因而同串行进行的程序查询方式相比，计算机系统的效率大大提高了。实际的中断过程还要复杂一些，图示出了一个典型的向量中断处理过程的详细流程图。当CPU执行完一条现行指令时，如果外设向CPU发出中断请求，那么CPU在满足响应条件的情况下，将发出中断响应信号，与此同时关闭中断“中断屏蔽”触发器置“”，表示CPU不再受理另外一个设备的中断请求。这时，CPU将寻找中断请求源是哪一个设备，并保存CPU自己的程序计数器PC的内容。然后，它将转移到处理该中断源的中断服务程序。CPU在保存现场信息，设备服务如交换数据以后，将恢复现场信息。在这些动作完成以后，开放中断“中断屏蔽”触发器清“”，并返回到原来被中断的主程序的下一条指令。以上是中断处理的大致过程，但是有一些问题需要进一步加以说明。第一个问题，尽管外界中断请求是随机的，但CPU只有在当前一条指令执行完毕后，即转入公操作时才受理设备的中断请求，这样才不至于使当前指令的执行受到干扰。所谓公操作，是指一条指令执行结束后CPU所进行的操作，如中断处理、取下条指令等。外界中断请求信号通常存放在接口中的中断源锁存器里，并通过中断请求线连至CPU，每当一条指令执行到末尾，CPU便检查中断请求信号。若中断请求信号为“”且允许响应该中断请求，则CPU转入“中断周期”，受理外界中断。第二个问题，为了在中断服务程序执行完毕以后，能够正确地返回到原来主程序被中断的断点而继续执行主程序，必须把程序计数器PC的内容，以及当前指令执行结束后CPU的状态包括寄存器的内容和一些状态标志位都保存到堆栈中。这些操作称为保存现场。第三个问题，当CPU响应中断后，正要去执行中断服务程序时，可能有另一个新的中断源向它发出中断请求。为了不致造成混乱，在CPU的中断管理部件中必须有一个“中断屏蔽”触发器，它可以在程序的控制下置“”关中断，或清“”开中断。只有在“中断屏蔽”标志为“”时，CPU才可以受理中断。当一条指令执行完毕CPU接受中断请求并作出响应时，它一方面发出中断响应信号INTA，另一方面把“中断屏蔽”标志置“”，即关闭中断。这样，CPU不能再受理另外的新的中断源发来的中断请求。只有在CPU把中断服务程序执行完毕以后，它才重新使“中断屏蔽”标志置“”，即开放中断，并返回主程序。因此，中断服务程序的最后必须有两条指令，即开中断指令和中断返回指令，同时在硬件上要保证中断返回指令执行以后才受理新的中断请求。第四个问题，中断处理过程是由硬件和软件结合来完成的。如在图中，“中断周期”由硬件实现，而中断服务子程序由机器指令序列实现。后者除执行保存现场、恢复现场、开放中断并返回主程序任务外，需对请求中断的设备进行服务，使其同CPU交换一个字的数据，或作其他服务。至于在中断周期中如何转移到各个设备的中断服务程序，将在稍后介绍。在中断周期中由硬件实现的响应中断、关中断等操作由于在主程序和中断服务程序的代码中都看不到，因而被称为“中断处理的隐操作”。第五个问题，中断分为内中断和外中断。机器内部原因导致出错引起的中断叫内中断，也叫异常。外部设备请求服务的中断叫外中断。现代计算机系统中，中断是频繁发生的，这些引起中断的事件被称为中断源。CPU在中断响应的过程中必须首先确认应该为哪个中断源服务。当有多个中断源同时提出中断申请时，还需对中断源进行优先级判别和排队，以确定应该首先响应哪个中断源的服务请求。然后，CPU需要获取应被服务的中断源的中断服务程序入口地址，并转到相应的中断服务程序执行。获取中断服务程序入口地址一般有两种方式：向量中断方式和查询中断方式，选择哪种方式通常在处理器的中断机构设计时就已经确定。向量中断向量中断是指CPU响应中断后，由中断机构自动将相应中断源的中断向量地址送入CPU，由其指明中断服务程序入口地址并实现程序切换的中断方式。在向量中断方式中，每个中断源都对应一个中断服务程序，而中断服务程序的入口地址被称为中断向量。在有的系统中，中断向量还包括中断服务程序开始执行时的程序状态字PSW的初始值。一般而言，系统中所有的中断向量都按顺序存放在内存指定位置的一张中断向量表中，当CPU识别出某中断源时，由硬件直接产生一个与该中断源对应的中断向量地址，以便能快速在中断向量表中找到并转入中断服务程序入口。图给出了一个中断向量表实例。图中，A、A到An为n个中断向量的向量地址；PC、PC到PCn为各个中断服务程序的入口地址，在中断响应时由硬件自动加载到程序计数器PC中；PSW、PSW到PSWn为各个中断服务程序开始执行时的初始程序状态字，在中断响应时由硬件自动加载到程序状态字寄存器PSWR中。在有些计算机中，由硬件产生的向量地址不是直接地址，而是一个“位移量”，这个位移量加上CPU某寄存器里存放的基地址，最后得到中断服务程序的入口地址。还有的计算机在中断向量表中存放的不是中断服务程序入口地址，而是一条转移到中断服务程序入口地址的转移指令的指令字。在中断切换过程中，由硬件直接执行这条转移指令，从而跳转到相应的中断服务程序执行。查询中断在查询中断方式中，硬件不直接提供中断服务程序的入口地址，而是为所有中断服务程序安排一个公共的中断服务程序。在中断响应时，由公共的中断服务程序软件查询中断源，并跳转至相应中断服务子程序入口执行。图给出了查询中断程序实例。在向量中断方式中，查找中断源、中断排队与判优、获取中断服务程序入口地址都是由硬件在中断周期中自动完成的。但在查询中断方式中，查找中断源和获取中断服务程序入口地址都是由软件实现的，而中断优先级则与软件查询中断源的顺序相关，因此可以更灵活地调整中断优先级。程序中断方式的基本接口示意图如图所示。接口电路中有一个工作标志触发器BS，就绪标志触发器RD，还有一个控制触发器，称为允许中断触发器EI。程序中断由外设接口的状态和CPU两方面来控制。在接口方面，有决定是否向CPU发出中断请求的机构，主要是接口中的“准备就绪”标志RD和“允许中断”标志EI两个触发器。在CPU方面，有决定是否受理中断请求的机构，主要是“中断请求”标志IR和“中断屏蔽”标志IM两个触发器。上述四个标志触发器的具体功能如下。准备就绪触发器RD一旦设备做好一次数据的接收或发送，便发出一个设备动作完毕信号，使RD标志置“”。在中断方式中，该标志用作中断源触发器，简称中断触发器。允许中断触发器EI可以用程序指令来置位。EI为“”时，某设备可以向CPU发出中断请求；EI为“”时，不能向CPU发出中断请求，这意味着某中断源的中断请求被禁止。设置EI标志的目的，就是通过软件来控制是否允许某设备发出中断请求。中断请求触发器IR它暂存中断请求线上由设备发出的中断请求信号。当IR标志为“”时，表示设备发出了中断请求。中断屏蔽触发器IM是CPU是否受理中断或批准中断的标志。IM标志为“”时，CPU可以受理外界的中断请求，反之，IM标志为“”时，CPU不受理外界的中断请求。图中，标号表示由某一外设输入数据的控制过程。表示由程序启动外设，将该外设接口的“忙”标志BS置“”，“准备就绪”标志RD清“”；表示接口向外设发出启动信号；表示数据由外设传送到接口的缓冲寄存器；表示当设备动作结束或缓冲寄存器数据填满时，设备向接口送出一控制信号，将数据“准备就绪”标志RD置“”；表示允许中断标志EI为“”时，接口向CPU发出中断请求信号；表示在一条指令执行末尾CPU检查中断请求线，将中断请求线的请求信号接收到“中断请求”标志IR；表示如果“中断屏蔽”标志IM为“”时，CPU在一条指令执行结束后受理外设的中断请求，向外设发出响应中断信号并关闭中断；表示转向该设备的中断服务程序入口；表示在中断服务程序通过输入指令把接口中数据缓冲寄存器的数据读至CPU中的寄存器；表示CPU发出控制信号C将接口中的BS和RD标志复位。单级中断的概念根据计算机系统对中断处理的策略不同，可分为单级中断系统和多级中断系统。单级中断系统是中断结构中最基本的形式。在单级中断系统中，所有的中断源都属于同一级，所有中断源触发器排成一行，其优先次序是离CPU近的优先权高。当响应某一中断请求时，执行该中断源的中断服务程序。在此过程中，不允许其他中断源再打断中断服务程序，即使优先权比它高的中断源也不能再打断。只有该中断服务程序执行完毕之后，才能响应其他中断。图示出了单级中断示意图a和单级中断系统结构图b。图b中所有的IO设备通过一条线向CPU发出中断请求信号。CPU响应中断请求后，发出中断响应信号INTA，以链式查询方式识别中断源。这种中断结构与第章讲的链式总线仲裁相对应，中断请求信号IR相当于总线请求信号BR。单级中断源的识别如何确定中断源，并转入被响应的中断服务程序入口地址，是中断处理首先要解决的问题。在单级中断中，采用串行排队链法来实现具有公共请求线的中断源判优识别。其逻辑电路见图。图中下面的虚线部分是一个串行的优先链，称作中断优先级排队链。IRi是从各中断源设备来的中断请求信号，优先顺序从高到低是IR、IR、IR。而IS、IS、IS是与IR、IR、IR相对应的中断排队选中信号，若ISi，即表示该中断源被选中。INTI为中断排队输入，INTO中断排队输出。若没有更高优先级的中断请求时，INTI，门输出高电平，即IS，若此时中断请求IR有中断请求，当CPU发来中断识别信号INTA时，发出IR请求的中断源被选中，选中信号经门送入编码电路，产生一个唯一对应的设备地址，并经数据总线送往CPU的主存地址寄存器，然后执行该中断源设备的中断服务程序。另一方面，由于此时IR为，封锁门，使IS、IS全为低电平，即排队识别工作不再向下进行。若IR无请求，则IR，门被封锁，不会向编码电路送入选中信号。与此同时，因IR，经门和门，使IS，如果IR，则被选中。否则查询链继续向下查询，直至找到发出中断请求信号IRi的中断源设备。中断向量的产生当CPU识别出某中断源时，由硬件直接产生一个与该中断源对应的向量地址，很快便引入中断服务程序。向量中断要求在硬件设计时考虑所有中断源的向量地址，而实际中断时只能产生一个向量地址。图中上面部分即为中断向量产生逻辑，它是由编码电路实现的。多级中断的概念多级中断系统是指计算机系统中有相当多的中断源，根据各中断事件的轻重缓急程度不同而分成若干级别，每一中断级分配给一个优先权。一般说来，优先权高的中断级可以打断优先权低的中断服务程序，以程序嵌套方式进行工作。如图a所示，三级中断优先权高于二级，而二级中断优先权又高于一级。根据系统的配置不同，多级中断又可分为一维多级中断和二维多级中断，如图b所示。一维多级中断是指每一级中断中只有一个中断源，而二维多级中断是指每一级中断中有多个中断源。图中虚线左边结构为一维多级中断，如果去掉虚线则成为二维多级中断结构。对多级中断，着重说明如下几点。一个系统若有n级中断，在CPU中就有n个中断请求触发器，总称为中断请求寄存器；与之对应的有n个中断屏蔽触发器，总称为中断屏蔽寄存器。与单级中断不同，在多级中断中，中断屏蔽寄存器的内容是一个很重要的程序现场，因此在响应中断时，需要把中断屏蔽寄存器的内容保存起来，并设置新的中断屏蔽状态。一般在某一级中断被响应后，要置“”关闭本级和优先权低于本级的中断屏蔽触发器，清“”开放更高级的中断屏蔽触发器，以此来实现正常的中断嵌套。多级中断中的每一级可以只有一个中断源，也可以有多个中断源。在多级中断之间可以实现中断嵌套，但是同一级内有不同中断源的中断是不能嵌套的，必须是处理完一个中断后再响应和处理同一级内其他中断源。设置多级中断的系统一般都希望有较快的中断响应时间，因此首先响应哪一级中断和哪一个中断源，由硬件逻辑实现，而不是用程序实现。图中的中断优先级排队电路，就是用于决定优先响应中断级的硬件逻辑。另外，在二维中断结构中，除了有中断优先级排队电路确定优先响应中断级外，还要确定优先响应的中断源，一般通过链式查询的硬件逻辑来实现。显然，这里采用了独立请求方式与链式查询方式相结合的方法决定首先响应哪个中断源。和单级中断情况类似，在多级中断中也使用中断堆栈保存现场信息。使用堆栈保存现场的好处是：控制逻辑简单，保存和恢复现场的过程按先进后出顺序进行。每一级中断不必单独设置现场保护区，各级中断现场可按其顺序放在同一个栈里。多级中断源的识别在多级中断中，每一级均有一根中断请求线送往CPU的中断优先级排队电路，对每一级赋予了不同的优先级。显然这种结构就是独立请求方式的逻辑结构。图示出了独立请求方式的中断优先级排队与中断向量产生的逻辑结构。每个中断请求信号保存在“中断请求”触发器中，经“中断屏蔽”触发器控制后，可能有若干个中断请求信号IRi进入虚线框所示的排队电路。排队电路在若干中断源中决定首先响应哪个中断源，并在其对应的输出线IRi上给出“”信号，而其他各线为“”信号IRIR中只有一个信号有效。之后，编码电路根据排上队的中断源输出信号IRi，产生一个预定的地址码，转向中断服务程序入口地址。例如，假设图中请求源的优先级最高，请求源的优先级最低。又假定中断请求寄存器的内容为，中断屏蔽寄存器的内容为，那么进入排队器的中断请求是。根据优先次序，排队器输出为。然后由编码器产生中断源所对应的向量地址。在多级中断中，如果每一级请求线上还连接有多个中断源设备，那么在识别中断源时，还需要进一步用串行链式方式查询。这意味着要用二维方式来设计中断排队逻辑。中断类型Pentium有两类中断源，即中断和异常。中断通常称为外部中断，它是由CPU的外部硬件信号引发的。有两种情况：可屏蔽中断：CPU的INTR引脚收到中断请求信号，如果CPU中标志寄存器IF时，可引发中断；IF时，中断请求信号在CPU内部被禁止。非屏蔽中断：CPU的NMI引脚收到的中断请求信号而引发的中断，这类中断不能被禁止。异常通常称为异常中断，它是由指令执行引发的。有两种情况：执行异常：CPU执行一条指令过程中出现错误、故障等不正常条件引发的中断。执行软件中断指令：如执行INT，INT，INTn等指令，执行时产生异常中断。如果详细分类，Pentium共有种中断和异常。每种中断给予一个编号，称为中断向量号，以便发生中断时，程序转向相应的中断服务子程序入口地址。当有一个以上的异常或中断发生时，CPU以一个预先确定的优先顺序为它们先后进行服务。中断优先级分为级。异常中断的优先级高于外部中断的优先级，这是因为异常中断发生在取一条指令或译码一条指令或执行一条指令时出现故障的情况下，情况更为紧急。中断服务子程序进入过程中断服务子程序的入口地址信息存于中断向量号检索表内。实模式为中断向量表IVT，保护模式为中断描述符表IDT。CPU识别中断类型取得中断向量号的途径有三种：指令给出，如软件中断指令INTn中的n即为中断向量号。外部提供，可屏蔽中断是在CPU接收到INTR信号时产生一个中断识别周期，接收外部中断控制器由数据总线送来的中断向量号；非屏蔽中断是在接收到NMI信号时中断向量号固定为。CPU识别错误、故障现象，根据异常和中断产生的条件自动指定向量号。CPU依据中断向量号获取中断服务子程序入口地址，但在实模式下和保护模式下采用不同的途径。实模式下使用中断向量表中断向量表IVT位于内存地址开始的KB空间。实模式是位寻址，中断服务子程序入口地址段，偏移的段寄存器和段内偏移量各为位。它们直接登记在IVT表中，每个中断向量号对应一个中断服务子程序入口地址。每个入口地址占字节。个中断向量号共占KB。CPU取得向量号后自动乘以，作为访问IVT的偏移，读取IVT相应表项，将段地址和偏移量设置到CS和IP寄存器，从而进入相应的中断控制器中断控制器中断服务子程序。进入过程如图a所示。保护模式下使用中断描述符表保护模式为位寻址。中断描述符表IDT每一表项对应一个中断向量号，表项称为中断门描述符、陷阱门描述符。这些门描述符为字节长，对应个中断向量号，IDT表长为KB。由中断描述符表寄存器IDTR来指示IDT的内存地址。以中断向量号乘以作为访问IDT的偏移，读取相应的中断门陷阱门描述符表项。门描述符给出中断服务子程序入口地址段，偏移，其中位偏移量装入EIP寄存器，位的段值装入CS寄存器。由于此段值是选择符，还必须访问GDT或LDT，才得到段的基地址。保护模式下进入中断服务子程序的过程如图b所示。中断处理过程上面说明了中断向量号的获取方式，也说明了实模式与保护模式下进入中断服务子程序的途径。现将Pentium机的中断处理过程叙述如下：当中断处理的CPU控制权转移涉及特权级改变时，必须把当前的SS和ESP两个寄存器的内容压入系统堆栈予以保存。标志寄存器EFLAGS的内容也压入堆栈。清除标志触发器TF和IF。当前的代码段寄存器CS和指令指针EIP也压入此堆栈。如果中断发生伴随有错误码，则错误码也压入此堆栈。完成上述中断现场保护后，从中断向量号获取的中断服务子程序入口地址段，偏移分别装入CS和EIP，开始执行中断服务子程序。中断服务子程序最后的IRET指令使中断返回。保存在堆栈中的中断现场信息被恢复，并由中断点继续执行原程序。直接内存访问DMA，是一种完全由硬件执行IO交换的工作方式。在这种方式中，DMA控制器从CPU完全接管对总线的控制，数据交换不经过CPU，而直接在内存和IO设备之间进行。DMA方式一般用于高速传送成组数据。DMA控制器将向内存发出地址和控制信号，修改地址，对传送的字的个数计数，并且以中断方式向CPU报告传送操作的结束。DMA方式的主要优点是速度快。由于CPU根本不参加传送操作，因此就省去了CPU取指令、取数、送数等操作。在数据传送过程中，没有保存现场、恢复现场之类的工作。内存地址修改、传送字个数的计数等，也不是由软件实现，而是用硬件线路直接实现的。所以DMA方式能满足高速IO设备的要求，也有利于CPU效率的发挥。正因为如此，包括微型机在内，DMA方式在计算机中被广泛采用。目前由于大规模集成电路工艺的发展，很多厂家直接生产大规模集成电路的DMA控制器。虽然DMA控制器复杂程度差不多接近于CPU，但使用起来非常方便。DMA方式的特点如下。DMA方式以响应随机请求的方式，实现主存与IO设备间的快速数据传送。DMA方式并不影响CPU的程序执行状态，只要不存在访存冲突，CPU就可以继续执行自己的程序。但是DMA只能处理简单的数据传送，不能在传送数据的同时进行判断和计算。与查询方式相比，在DMA方式中CPU不必等待查询，可以执行自身的程序，而且直接由硬件DMA控制器控制传输过程，CPU不必执行指令。与中断方式相比，DMA方式仅需占用系统总线，不切换程序，因而CPU可与DMA传送并行工作；DMA可以实现简单的数据传送，难以识别和处理复杂事态。由于DMA传送开始的时间是随机的，但开始传送后需要进行连续批量的数据交换，因此DMA方式非常适合主存与高速IO设备间的简单数据传送。例如，以数据块为单位的磁盘读写操作；以数据帧为单位的外部通信；以及大批量数据采集等场景。DMA的种类很多，但多种DMA至少能执行以下一些基本操作。从外围设备发出DMA请求。CPU响应请求，把CPU工作改成DMA操作方式，DMA控制器从CPU接管总线的控制。由DMA控制器对内存寻址，即决定数据传送的内存单元地址及数据传送个数的计数，并执行数据传送的操作。第章输入输出系统向CPU报告DMA操作的结束。注意，在DMA方式中，一批数据传送前的准备工作，以及传送结束后的处理工作，均由管理程序承担，而DMA控制器仅负责数据传送的工作。DMA技术的出现，使得外围设备可以通过DMA控制器直接访问内存，与此同时，CPU可以继续执行程序。那么DMA控制器与CPU怎样分时使用内存呢根据每提出一次DMA请求，DMA控制器将占用多少个总线周期，可以将DMA传送分成以下几种方式：成组连续传送方式停止CPU访存；周期挪用方式单字传送方式，周期窃取方式；透明DMA方式DMA与CPU交替操作方式，总线周期分时方式。成组连续传送方式当外围设备要求传送一批数据时，由DMA控制器发一个停止信号给CPU，要求CPU放弃对地址总线、数据总线和有关控制总线的使用权。DMA控制器获得总线控制权以后，开始进行数据传送。在一批数据传送完毕后，DMA控制器通知CPU可以使用内存，并把总线控制权交还给CPU。图a是这种传送方式的时间图。很显然，在这种DMA传送过程中，CPU基本处于不工作状态或者说保持状态。这种传送方法的优点是控制简单，它适用于数据传输率很高的设备进行成组传送。缺点是在DMA控制器访内阶段，内存的效能没有充分发挥，相当一部分内存工作周期是空闲的。这是因为，外围设备传送两个数据之间的间隔一般总是大于内存存储周期，即使高速IO设备也是如此。例如，软盘读出一个位二进制数大约需要s，而半导体内存的存储周期小于s，因此许多空闲的存储周期不能被CPU利用。周期挪用方式在这种DMA传送方法中，当IO设备没有DMA请求时，CPU按程序要求访问内存；一旦IO设备有DMA请求，则由IO设备挪用一个或几个内存周期。IO设备要求DMA传送时可能遇到两种情况：一种是此时CPU不需要访内，如CPU正在执行乘法指令。由于乘法指令执行时间较长，此时IO访内与CPU访内没有冲突，即IO设备挪用一两个内存周期对CPU执行程序没有任何影响。另一种是IO设备要求访内时CPU也要求访内，这就产生了访内冲突，在这种情况下IO设备访内优先，因为IO访内有时间要求，前一个IO数据必须在下一个访内请求到来之前存取完毕。显然，在这种情况下IO设备挪用一两个内存周期，意味着CPU延缓了对指令的执行，或者更明确地说，在CPU执行访内指令的过程中插入DMA请求，挪用了一两个内存周期。图b是周期挪用的DMA方式示意图。与停止CPU访内的DMA方法比较，周期挪用的方法既实现了IO传送，又较好地发挥了内存和CPU的效率，是一种广泛采用的方法。但是IO设备每一次周期挪用都有申请总线控制权、建立总线控制权和归还总线控制权的过程，所以传送一个字对内存来说要占用一个周期，但对DMA控制器来说一般要个内存周期视逻辑线路的延迟而定。因此，周期挪用的方法适用于IO设备读写周期大于内存存储周期的情况。透明DMA方式如果CPU的工作周期比内存存取周期长很多，则采用交替访内的方法可以使DMA传送和CPU同时发挥最高的效率，其原理示意图如图c所示。假设CPU工作周期为s，内存存取周期小于s，那么一个CPU周期可分为C和C两个分周期，其中C专供DMA控制器访内，C专供CPU访内。这种方式不需要总线使用权的申请、建立和归还过程，总线使用权是通过C和C分时控制的。CPU和DMA控制器各自有自己的访内地址寄存器、数据寄存器和读写信号等控制寄存器。在C周期中，如果DMA控制器有访内请求，可将地址、数据等信号送到总线上。在C周期中，如CPU有访内请求，同样传送地址、数据等信号。事实上，对于总线，这是用C和C控制的一个多路转换器，这种总线控制权的转移几乎不需要什么时间，所以对DMA传送来讲效率是很高的。这种传送方式称为“透明的DMA”方式，其来由是这种DMA传送对CPU来说，如同透明的玻璃一般，没有任何感觉或影响。在透明的DMA方式下工作，CPU既不停止主程序的运行，也不进入等待状态，是一种高效率的工作方式。当然，相应的硬件逻辑也就更加复杂。DMA控制器的基本组成一个DMA控制器，实际上是采用DMA方式的外围设备与系统总线之间的接口电路。第章输入输出系统这个接口电路是在中断接口的基础上再加DMA机构组成的。图示出了一个最简单的DMA控制器组成示意图，它由以下逻辑部件组成。内存地址计数器用于存放内存中要交换的数据的地址。在DMA传送前，须通过程序将数据在内存中的起始位置首地址送到内存地址计数器。而当DMA传送时，每交换一次数据，将地址计数器加“”，从而以增量方式给出内存中要交换的一批数据的地址。字计数器用于记录传送数据块的长度多少字数。其内容也是在数据传送之前由程序预置，交换的字数通常以补码形式表示。在DMA传送时，每传送一个字，字计数器就加“”，当计数器溢出即最高位产生进位时，表示这批数据传送完毕，于是引起DMA控制器向CPU发中断信号。数据缓冲寄存器用于暂存每次传送的数据一个字。当输入时，由设备如磁盘送往数据缓冲寄存器，再由缓冲寄存器通过数据总线送到内存。反之，输出时，由内存通过数据总线送到数据缓冲寄存器，然后再送到设备。DMA请求标志每当设备准备好一个数据字后给出一个控制信号，使“DMA请求”标志置“”。该标志置位后向“控制状态”逻辑发出DMA请求，后者又向CPU发出总线使用权的请求HOLD，CPU响应此请求后发回响应信号HLDA，“控制状态”逻辑接收此信号后发出DMA响应信号，使“DMA请求”标志复位，为交换下一个字做好准备。控制状态逻辑由控制和时序电路以及状态标志等组成，用于修改内存地址计数器和字计数器，指定传送类型输入或输出，并对“DMA请求”信号和CPU响应信号进行协调和同步。中断机构当字计数器溢出时全，意味着一组数据交换完毕，由溢出信号触发中断机构，向CPU提出中断报告。这里的中断与节介绍的IO中断所采用的技术相同，但中断的目的不同，前面是为了数据的输入或输出，而这里是为了报告一组数据传送结束。因此它们是IO系统中不同的中断事件。DMA数据传送过程DMA的数据块传送过程可分为三个阶段：传送前预处理；正式传送；传送后处理。预处理阶段由CPU执行几条输入输出指令，测试设备状态，向DMA控制器的设备地址寄存器中送入设备号并启动设备，向内存地址计数器中送入起始地址，向字计数器中送入交换的数据字个数。在这些工作完成后，CPU继续执行原来的主程序。当外设准备好发送数据输入或接受数据输出时，它发出DMA请求，由DMA控制器向CPU发出总线使用权的请求HOLD。图示出了成组连续传送方式的DMA传送数据的流程图。当外围设备发出DMA请求时，CPU在指令周期执行结束后响应该请求，并使CPU的总线驱动器处于第三态高阻状态。之后，CPU与系统总线相脱离，而DMA控制器接管数据总线与地址总线的控制，并向内存提供地址，于是，在内存和外围设备之间进行数据交换。每交换一个字，则地址计数器和字计数器加“”，当计数值到达零时，DMA操作结束，DMA控制器向CPU提出中断报告。DMA的数据传送是以数据块为基本单位进行的，因此，每次DMA控制器占用总线后，无论是数据输入操作，还是输出操作，都是通过循环来实现的。当进行输入操作时，外围设备的数据一次一个字或一字节传向内存；当进行输出操作时，内存的数据传向外围设备。DMA的后处理进行的工作是，一旦DMA的中断请求得到响应，CPU停止主程序的执行，转去执行中断服务程序做一些DMA的结束处理工作。这些工作包括校验送入内存的数据是否正确；决定继续用DMA方式传送下去，还是结束传送；测试在传送过程中是否发生了错误等。基本DMA控制器与系统的连接可采用两种方式：一种是公用的DMA请求方式，另一种是独立的DMA请求方式，这与中断方式类似。思考题说出DMA方式的创新点，其意义何在？前面介绍的是最简单的DMA控制器，一个控制器只控制一个IO设备。实际中经常采用的是选择型DMA控制器和多路型DMA控制器，它们已经被做成集成电路片子。选择型DMA控制器图是选择型DMA控制器的逻辑框图，它在物理上可以连接多个设备，而在逻辑上只允许连接一个设备。换句话说，在某一段时间内只能为一个设备服务。选择型DMA控制器工作原理与前面的简单DMA控制器基本相同。除了前面讲到的基本逻辑部件外，还有一个设备号寄存器。数据传送是以数据块为单位进行的，在每个数据块传送之前的预置阶段，除了用程序中IO指令给出数据块的传送个数、起始地址、操作命令外，还要给出所选择的设备号。从预置开始，一直到这个数据块传送结束，DMA控制器只为所选设备服务。下一次预置再根据IO指令指出的设备号，为另一选择的设备服务。显然，选择型DMA控制器相当于一个逻辑开关，根据IO指令来控制此开关与某个设备连接。选择型DMA控制器只增加少量硬件达到了为多个外围设备服务的目的，它特别适合数据传输率很高以至于接近内存存取速度的设备。在很快地传送完一个数据块后，控制器又可为其他设备服务。多路型DMA控制器选择型DMA控制器不适用于慢速设备。但是多路型DMA控制器却适合于同时为多个慢速外围设备服务。图表示独立请求方式的多路型DMA控制器的原理图。多路型DMA不仅在物理上可以连接多个外围设备，而且在逻辑上也允许这些外围设备同时工作，各设备以字节交叉方式通过DMA控制器进行数据传送。由于多路型DMA同时要为多个设备服务，因此对应多少个DMA通路设备，在控制器内部就有多少组寄存器用于存放各自的传送参数。图是一个多路型DMA控制器的芯片内部逻辑结构，通过配合使用IO通用接口片子，它可以对个独立的DMA通路CH进行控制，使外围设备以周期挪用方式对内存进行存取。条独立的DMA请求线或响应线能在外围设备与DMA控制器之间进行双向通信。一条线上进行双向通信是通过分时和脉冲编码技术实现的。也可以分别设立DMA请求线和响应线实现双向通信。每条DMA线在优先权结构中具有固定位置，一般DMA线具有最高优先权，DMA线具有最低优先权。控制器中有个位的控制传送长度的寄存器，个位的地址寄存器。每个长度寄存器和地址寄存器对应一个设备。每个寄存器都可以用程序中的IO指令从CPU送入控制数据。每一寄存器组各有一个计数器，用于修改内存地址和传送长度。当某个外围设备请求DMA服务时，操作过程如下：DMA控制器接到设备发出的DMA请求时，将请求转送到CPU。CPU在适当的时刻响应DMA请求。若CPU不需要占用总线则继续执行指令；若CPU需要占用总线，则CPU进入等待状态。DMA控制器接到CPU的响应信号后，进行以下工作：对现有DMA请求中优先权最高的请求给予DMA响应；选择相应的地址寄存器的内容驱动地址总线；根据所选设备操作寄存器的内容，向总线发读、写信号；外围设备向数据总线传送数据，或从数据总线接收数据；每字节传送完毕后，DMA控制器使相应的地址寄存器和长度寄存器加“”或减“”。以上是一个DMA请求的过程，在一批数据传送过程中，要多次重复上述过程，直到外围设备表示一个数据块已传送完毕，或该设备的长度控制器判定传送长度已满。通道的功能DMA控制器的出现已经减轻了CPU对数据输入输出的控制，使得CPU的效率有显著的提高。而通道的出现则进一步提高了CPU的效率。这是因为通道是一个特殊功能的处理器，它有自己的指令和程序专门负责数据输入输出的传输控制，而CPU将“传输控制”的功能下放给通道后只负责“数据处理”功能。这样，通道与CPU分时使用存储器，实现了CPU内部运算与IO设备的并行工作。图是典型的具有通道的计算机系统结构图。它具有两种类型的总线，一种是系统总线，它承担通道与存储器、CPU与存储器之间的数据传输任务。另一种是通道总线，即IO总线，它承担外围设备与通道之间的数据传送任务。这两类总线可以分别按照各自的时序同时进行工作。由图看出，通道总线可以接若干个IO模块，一个IO模块可以接一个或多个设备。因此，从逻辑结构上讲，IO系统一般具有四级连接：CPU与存储器通道IO模块外围设备。为了便于通道对各设备的统一管理，通道与IO模块之间用统一的标准接口，IO模块与设备之间则根据设备要求不同而采用专用接口。具有通道的机器一般是大型计算机和服务器，数据流量很大。如果所有的外设都接在一个通道上，那么通道将成为限制系统效能的瓶颈。因此大型计算机的IO系统一般接有多个通道。显然，设立多个通道的另一好处是，对不同类型的外设可以进行分类管理。存储管理部件是存储器的控制部件，它的主要任务是根据事先确定的优先次序，决定下一周期由哪个部件使用系统总线访问存储器。由于大多数IO设备是旋转性的设备，读写信号具有实时性，不及时处理会丢失数据，所以通道与CPU同时要求访存储器时，通道优先权高于CPU。在多个通道有访存请求时，选择通道的优先权高于多路通道，因为前者一般连接高速设备。通道的基本功能是执行通道指令，组织外围设备和内存进行数据传输，按IO指令要求启动外围设备，向CPU报告中断等，具体有以下五项任务。接受CPU的IO指令，按指令要求与指定的外围设备进行通信。从存储器选取属于该通道程序的通道指令，经译码后向IO控制器模块发送各种命令。组织外设和存储器之间进行数据传送，并根据需要提供数据缓存的空间，以及提供数据存入存储器的地址和传送的数据量。从外围设备得到设备的状态信息，形成并保存通道本身的状态信息，根据要求将这些状态信息送到存储器的指定单元，供CPU使用。将外设的中断请求和通道本身的中断请求，按次序及时报告CPU。CPU对通道的管理CPU是通过执行IO指令以及处理来自通道的中断，实现对通道的管理。来自通道的中断有两种，一种是数据传送结束中断，另一种是故障中断。通常把CPU运行操作系统的管理程序的状态称为管态，而把CPU执行目的程序时的状态称为目态。大型计算机的IO指令都是管态指令，只有当CPU处于管态时，才能运行IO指令，目态时不能运行IO指令。这是因为大型计算机的软、硬件资源为多个用户所共享，而不是分给某个用户专用。通道对设备控制器的管理通道通过使用通道指令来控制IO模块进行数据传送操作，并以通道状态字接收IO模块反映的外围设备的状态。因此，IO模块是通道对IO设备实现传输控制的执行机构。IO模块的具体任务如下：从通道接受通道指令，控制外围设备完成所要求的操作。向通道反映外围设备的状态。将各种外围设备的不同信号转换成通道能够识别的标准信号。思考题通道的设计理念，在技术上有什么创新？根据通道的工作方式，通道分为选择通道、多路通道两种类型。一个系统可以兼有两种类型的通道，也可以只有其中一种。选择通道选择通道又称高速通道，在物理上它可以连接多个设备，但是这些设备不能同时工作，在某一段时间内通道只能选择一个设备进行工作。选择通道很像一个单道程序的处理器，在一段时间内只允许执行一个设备的通道程序，只有当这个设备的通道程序全部执行完毕后，才能执行其他设备的通道程序。选择通道主要用于连接高速外围设备，如磁盘、磁带等，信息以数据块方式高速传输。由于数据传输率很高，所以在数据传送期间只为一台设备服务是合理的。但是这类设备的辅助操作时间很长，如磁盘机平均找道时间是ms，磁带机走带时间可以长达几分钟。在这样长的时间里通道处于等待状态，因此整个通道的利用率不是很高。多路通道多路通道又称多路转换通道，在同一时间能处理多个IO设备的数据传输。它又分为数组多路通道和字节多路通道。数组多路通道是对选择通道的一种改进，它的基本思想是当某设备进行数据传送时，通道只为该设备服务；当设备在执行寻址等控制性动作时，通道暂时断开与这个设备的连接，挂起该设备的通道程序，去为其他设备服务，即执行其他设备的通道程序。所以数组多路通道很像一个多道程序的处理器。数组多路通道不仅在物理上可以连接多个设备，而且在一段时间内能交替执行多个设备的通道程序，换句话说在逻辑上可以连接多个设备，这些设备应是高速设备。由于数组多路通道既保留了选择通道高速传送数据的优点，又充分利用了控制性操作的时间间隔为其他设备服务，使通道效率得到充分发挥，因此数组多路通道在大型系统中得到较多应用。字节多路通道主要用于连接大量的低速设备，如键盘、打印机等，这些设备的数据传输率很低。例如，数据传输率是Bs，即传送字节的时间是ms，而通道从设备接收或发送字节只需要几百纳秒，因此通道在传送字节之间有很多空闲时间，字节多路通道正是利用这个空闲时间为其他设备服务。字节多路通道和数组多路通道有共同之处，即它们都是多路通道，在一段时间内能交替执行多个设备的通道程序，使这些设备同时工作。字节多路通道和数组多路通道也有不同之处，主要是：数组多路通道允许多个设备同时工作，但只允许一个设备进行传输型操作，其他设备进行控制型操作。而字节多路通道不仅允许多个设备同时操作，而且也允许它们同时进行传输型操作。数组多路通道与设备之间数据传送的基本单位是数据块，通道必须为一个设备传送完一个数据块以后，才能为别的设备传送数据块。而字节多路通道与设备之间数据传送的基本单位是字节，通道为一个设备传送完字节后，又可以为另一个设备传送字节，因此各设备与通道之间的数据传送是以字节为单位交替进行。通道结构的进一步发展，出现了两种计算机IO系统结构。一种是通道结构的IO处理器，通常称为输入输出处理器IOP。IOP可以和CPU并行工作，提供高速的DMA处理能力，实现数据的高速传送。但是它不是独立于CPU工作的，而是主机的一个部件。有些IOP如IntelIOP，还提供数据的变换、搜索以及字装配拆卸能力。这种IOP可应用于服务器及微型计算机中。另一种是外围处理机PPU。PPU基本上是独立于主机工作的，它有自己的指令系统，完成算术逻辑运算，读写主存储器，与外设交换信息等。有的外围处理机干脆就选用已有的通用机。外围处理机IO方式一般应用于大型高效率的计算机系统中。思考题你对通道技术的未来发展有什么见解？SCSI是小型计算机系统接口的简称，其设计思想来源于IBM大型机系统的IO通道结构，目的是使CPU摆脱对各种设备的繁杂控制。它是一个高速智能接口，可以混接各种磁盘、光盘、磁带机、打印机、扫描仪、条码阅读器以及通信设备。它首先应用于Macintosh和Sun平台上，后来发展到工作站、网络服务器和Pentium系统中，并成为ANSI美国国家标准局标准。SCSI有如下性能特点。SCSI接口总线由条数据线、一条奇偶校验线、条控制线组成。使用芯电缆，规定了两种电气条件：单端驱动，电缆长m；差分驱动，电缆最长m。总线时钟频率为MHz，异步方式数据传输率是MBs，同步方式数据传输率是MBs。SCSI接口总线以菊花链形式最多可连接台设备。在Pentium中通常是：由一个主适配器HBA与最多台外围设备相接，HBA也算作一个SCSI设备，由HBA经系统总线如PCI与CPU相连，如图所示。每个SCSI设备有自己的唯一设备号ID。ID的设备具有最高优先权，ID的设备优先权最低。SCSI采用分布式总线仲裁策略。在仲裁阶段，竞争的设备以自己的设备号驱动数据线中相应的位线如ID的设备驱动DB线，并与数据线上的值进行比较。因此仲裁逻辑比较简单，而且在SCSI的总线选择阶段，启动设备和目标设备的设备号能同时出现在数据线上。所谓SCSI设备是指连接在SCSI总线上的智能设备，即除主适配器HBA外，其他SCSI设备实际是外围设备的适配器或控制器。每个适配器或控制器通过各自的设备级IO线可连接一台或几台同类型的外围设备如一个SCSI磁盘控制器接台硬盘驱动器。标准允许每个SCSI设备最多有个逻辑单元，每个逻辑单元可以是物理设备也可以是虚拟设备。每个逻辑单元有一个逻辑单元号LUNLUN。由于SCSI设备是智能设备，对SCSI总线以至主机屏蔽了实际外设的固有物理属性如磁盘柱面数、磁头数等参数，各SCSI设备之间就可用一套标准的命令进行数据传送，也为设备的升级或系统的系列化提供了灵活的处理手段。SCSI设备之间是一种对等关系，而不是主从关系。SCSI设备分为启动设备发命令的设备和目标设备接受并响应命令的设备。但启动设备和目标设备是依当时总线运行状态来划分的，而不是预先规定的。总之，SCSI是系统级接口，是处于主适配器和智能设备控制器之间的并行IO接口。一块主适配器可以接台具有SCSI接口的设备，这些设备可以是类型完全不同的设备，主适配器却只占主机的一个槽口。这对于缓解计算机挂接外设的数量和类型越来越多、主机槽口日益紧张的状况很有吸引力。为提高数据传输率和改善接口的兼容性，世纪年代又陆续推出了SCSI和SCSI标准。SCSI扩充了SCSI的命令集，通过提高时钟速率和数据线宽度，最高数据传输率可达MBs，采用芯电缆，且对电缆采用有源终端器。SCSI标准允许SCSI总线上连接的设备由个提高到个，可支持位数据传输。另一个变化是发展串行SCSI，使串行数据传输率达到Mbs电缆或Gbs光纤，从而使串行SCSI成为IEEE标准的基础。性能特点随着CPU速度达到上百兆赫，存储器容量达到GB级，以及PC、工作站、服务器对快速IO的强烈需求，工业界期望能有一种更高速、连接更方便的IO接口。年Apple公司公布了一种高速串行接口，希望能取代并行的SCSI接口。IEEE接管了这项工作，在此基础上制定了IEEEFireWire标准，它是一个通用的串行IO接口。IEEE串行接口与SCSI等并行接口相比，有如下三个显著特点。数据传送的高速性。的数据传输率分为Mbs、Mbs、Mbs三档。而SCSI也只有MBs相当于Mbs。这样的高速特性特别适合于新型高速硬盘及多媒体数据传送。之所以达到高速，一是因为串行传送比并行传送容易提高数据传送时钟速率；二是因为采用了DSLink编码技术，把时钟信号的变化转变为选通信号的变化，即使在高的时钟速率下也不易引起信号失真。数据传送的实时性。实时性可保证图像和声音不会出现时断时续的现象，因此对多媒体数据传送特别重要。之所以做到实时性，原因有二：一是它除了异步传送外，还提供了一种等步传送方式，数据以一系列的固定长度的包规整间隔地连续发送，端到端既有最大延时限制而又有最小延时限制；二是总线仲裁除优先权仲裁之外，还有均等仲裁和紧急仲裁方式。体积小易安装，连接方便。使用芯电缆，直径约为mm，插座也小。而SCSI使用芯或芯电缆，插座体积也大。在当前PC机要连接的设备越来越多，主机箱的体积越显窄小的情况下，电缆细、插座小的是很有吸引力的，尤其对笔记本电脑一类机器。的电缆不需要与电缆阻抗匹配的终端，而且电缆上的设备随时可从插座拔出或插入，即具有热插入能力。这对用户安装和使用设备很有利。配置采用菊花链式配置，但也允许树形结构配置。事实上，菊花链结构是树形结构的一种特殊情况。接口也需要一个主适配器和系统总线相连。这个主适配器的功能逻辑在高档的Pentium机中是集成在主板的核心芯片组的PCI总线到ISA总线的桥芯片中。机箱的背面只看到主适配器的外接端口插座。在这里将主适配器及其端口称为主端口。主端口是接口树形配置结构的根节点。一个主端口最多可连接台设备，这些设备称为节点，它们构成亲子关系。两个相邻节点之间的电缆最长为m，但两个节点之间进行通信时中间最多可经过个节点的转接再驱动，因此通信的最大距离是m。电缆不需要终端器。图给出一个IEEE配置的实例，其中右侧是线性链接方式，左侧是亲子层次链接方式。整体是一个树形结构。采用集中式总线仲裁方式。中央仲裁逻辑在主端口内，并以先到先服务方法来处理节点提出的总线访问请求。在n个节点同时提出使用总线请求时，按照优先权进行仲裁。最靠近根节点的竞争节点有高的优先权；同样靠近根节点的竞争节点，其设备标识号ID大的有更高优先权。具有PnP即插即用功能，设备标识号是系统自动指定的，而不是用户设定的。为了保证总线设备的对等性和数据传送的实时性，的总线仲裁还增加了均等仲裁和紧急仲裁功能。均等仲裁是将总线时间分成均等的间隔，当间隔期间开始时，竞争的每个节点置位自己的仲裁允许标志，在间隔期内各节点可竞争总线的使用权。一旦某节点获得总线访问权，则它的仲裁允许标志被复位，在此期间它不能再去竞争总线，以此来防止具有高优先权的忙设备独占总线。紧急仲裁是指对某些高优先权的节点可为其指派紧急优先权。具有紧急优先权的节点可在一个间隔期内多次获得总线控制权，允许它控制的总线可用时间。协议集的一个重要特色是，它规范了一个三层协议集，将串行总线与各外围设备的交互动作标准化。图表示IEEE的协议集。业务层定义了一个完整的请求响应协议实现总线传输，包括读操作、写操作和锁定操作。链路层可为应用程序直接提供等步数据传送服务。它支持异步和等步的包发送和接收。异步包传送是，一个可变总量的数据及业务层的几个信息字节作为一个包传送到显式地址的目标方，并要求返回一个认可包。等步包传送是，一个可变总量的数据以一串固定大小的包按照规整间隔来发送，使用简化寻址方式，不要求目标方认可。把完成一个包的递交过程称为子动作。物理层将链路层的逻辑信号根据不同的串行总线介质转换成相应的电信号，也为串行总线的接口定义了电气和机械特性。实际上，串行接口的物理拓扑结构分成“底板环境”和“电气环境”两部分。总线规范并未要求特别的环境设定。所有节点可严格限定在单一底板上，也可直接连在电缆上。串行总线管理它提供总线节点所需的标准控制、状态寄存器服务和基本控制功能。总之，IEEE是一种高速串行IO标准接口。英特尔、微软等公司联手将列为年以后的新一代PC机新标准。另一个重大特点是，各被连接装置的关系是平等的，不用PC机介入也能自成系统。例如，利用数字相机直接进行印刷的打印机便可利用这一特点。这意味着在家电等消费类设备的连接应用方面有很好的前景。IO系统设计要考虑两种主要规范：时延约束和带宽约束。在这两种情况下，对通信模式的认知将影响整个系统的分析和设计。时延约束时延约束确保完成一次IO操作的延迟时间被限制在某个数量范围内。一种简单的情况是认为系统是无负载的，设计者必须保证满足某些时延约束，这是因为这种限制对应用程序非常重要，或者设备为了防止某种错误必须接受某些有保证的服务。同样，在一个无负载系统中计算延迟时间相对比较容易，因为只用跟踪IO操作的路径并累加单个延迟时间即可。在有负载的情况下，得到平均时延是一个复杂的问题。这些问题可以通过排队理论当工作量请求的行为和IO服务次数能够通过简单的分布来近似时或模拟当IO事件的行为很复杂时的方法解决。带宽约束给定一个工作负载，设计一个满足一组带宽约束的IO系统是设计者需要面对的另一个典型问题。或者，给定一个部分配置好的IO系统，要求设计者平衡系统，以维持该系统预配置部分规定的可能达到的最大带宽。设计这样一个系统的一般方法如下。找出IO系统中效率最低的连接，它是IO路径中约束设计的部件。依赖于不同的工作负载，该部件可以存在于任何地方，包括CPU、内存系统、底板总线、IO控制器或IO设计。工作负载和配置限制会决定这个效率最低的部件到底在哪儿。配置这个部件以保持所需的带宽。研究系统中其他部分的需求，配置它们以支持这个带宽。各种外围设备的数据传输速率相差很大。如何保证主机与外围设备在时间上同步，则涉及外围设备的定时问题。一个计算机系统的性能，不仅取决于CPU，还取决于IO速度。在计算机系统中，CPU对外围设备的管理方式有：程序查询方式；程序中断方式；DMA方式；通道方式。每种方式都需要硬件和软件结合起来进行。程序查询方式是CPU管理IO设备的最简单方式，CPU定期执行设备服务程序，主动来了解设备的工作状态。这种方式浪费CPU的宝贵资源。程序中断方式是各类计算机中广泛使用的一种数据交换方式。当某一外设的数据准备就绪后，它“主动”向CPU发出请求信号。CPU响应中断请求后，暂停运行主程序，自动转移到该设备的中断服务子程序，为该设备进行服务，结束时返回主程序。中断处理过程可以嵌套进行，优先级高的设备可以中断优先级低的中断服务程序。DMA技术的出现，使得外围设备可以通过DMA控制器直接访问内存，与此同时，CPU可以继续程序。DMA方式采用以下三种方法：停止CPU访内；周期挪用；DMA与CPU交替访内。DMA控制器按其组成结构，分为选择型和多路型两类。通道是一个特殊功能的处理器。它有自己的指令和程序专门负责数据输入输出的传输控制，从而使CPU将“传输控制”的功能下放给通道，CPU只负责“数据处理”功能。这样，通道与CPU分时使用内存，实现了CPU内部的数据处理与IO设备的平行工作。通道有两种类型：选择通道；多路通道。标准化是建立开放式系统的基础。CPU、系统总线、IO总线及标准接口技术近年来取得了重大进步。其中并行IO接口SCSI与串行IO接口IEEE是两个最具权威性和发展前景的标准接口技术。SCSI是系统级接口，是处于主适配器和智能设备控制器之间的并行IO接口，改进的SCSI可允许连接台不同类型的高速外围设备。SCSI的不足处在于硬件较昂贵，并需要通用设备驱动程序和各类设备的驱动程序模块的支持。IEEE是串行IO标准接口。与SCSI并行IO接口相比，它具有更高的数据传输速率和数据传送的实时性，具有更小的体积和连接的方便性。IEEE的一个重大特点是，各被连接的设备的关系是平等的，不用PC介入也能自成系统。因此IEEE已成为Intel、Microsoft等公司联手制定的新标准。计算机系统中的并行性有不同的等级。所谓并行性，是指计算机系统具有可以同时进行运算或操作的特性，它包括同时性与并发性两种含义。同时性两个或两个以上的事件在同一时刻发生。并发性两个或两个以上的事件在同一时间间隔内发生。从处理数据的角度看，并行性等级从低到高可分为：字串位串：同时只对一个字的一位进行处理。这是最基本的串行处理方式，不存在并行性。字串位并：同时对一个字的全部位进行处理，不同字之间是串行的。这里已开始出现并行性。字并位串：同时对许多字的同一位进行处理。这种方式有较高的并行性。全并行：同时对许多字的全部位进行处理。这是最高一级的并行。从执行程序的角度看，并行性等级从低到高可分为：指令内部并行：一条指令执行时各微操作之间的并行。指令级并行：并行执行两条或多条指令。任务级或过程级并行：并行执行两个以上过程或任务程序段。作业或程序级并行：并行执行两个以上作业或程序。在计算机系统中，可以采取多种并行性措施。既可以有处理数据方面的并行性，又可以有执行程序方面的并行性。当并行性提高到一定级别时，则进入并行处理领域。并行处理着重挖掘计算过程中的并行事件，使并行性达到较高的级别。因此，并行处理是体系结构、硬件、软件、算法、编程语言等多方面综合的领域。计算机系统中提高并行性的措施多种多样，就其基本思想而言，可归纳成如下四条途径。时间重叠。时间重叠即时间并行。在并行性概念中引入时间因素，让多个处理过程在时间上相互错开，轮流重叠地使用同一套硬件设备的各个部分，以加快硬件周转而赢得速度。时间重叠的实质就是把一件工作按功能分割为若干个相互联系的部分，每一部分指定专门的部件完成，各部分执行过程在时间上重叠起来，使所有部件依次分工合作完成完整的工作。时间重叠的典型应用就是流水线技术。资源重复。资源重复即空间并行。在并行性概念中引入空间因素，以数量取胜的原则，通过重复设置硬件资源，大幅度提高计算机系统的性能。随着硬件价格的降低，资源重复在单处理机中通过部件冗余、多存储体等方式被广泛应用，而多处理机本身就是实施“资源重复”原理的结果。时间重叠资源重复。在计算机系统中同时运用时间并行和空间并行技术，这种方式在计算机系统中得到广泛应用，成为并行性主流技术。资源共享。资源共享是一种软件方法的并行，它使多个任务按一定时间顺序轮流使用同一套硬件设备。多道程序、分时系统就是资源共享的具体应用。资源共享既降低了成本，又提高了计算机硬件的利用率。早期单处理机的发展过程中，起着主导作用的是时间并行流水线技术。实现时间并行的物质基础是“部件功能专用化”，即把一件工作按功能分割为若干相互联系的部分，把每一部分指定给专门的部件完成；然后按时间重叠原理把各部分执行过程在时间上重叠起来，使所有部件依次分工完成一组同样的工作。例如，指令执行的个子过程分别需要个专用部件，即取指令部件IF、指令译码部件ID、指令执行部件EX、访问存储器部件M、结果写回部件WB。将它们按流水方式连接起来，就满足时间重叠原理，从而使得处理机内部能同时处理多条指令，提高了处理机的速度。显然，时间并行技术开发了计算机系统中的指令级并行。在单处理机中，空间并行技术的运用也已经十分普遍。例如，不论是非流水线处理机，还是流水线处理机，多体存储器和多操作部件都是成功应用的结构形式。在多操作部件处理机中，通用部件被分解成若干个专用操作部件，如加法部件、乘法部件、除法部件、逻辑运算部件等。一条指令所需的操作部件只要空闲，就可以开始执行这条指令，这就是指令级并行。在单处理机中，资源共享的概念实质上是用单处理机模拟多处理机的功能，形成所谓虚拟机的概念。例如，分时系统，在多终端情况下，每个终端上的用户感到好像自己独占一台处理机一样。单处理机并行性发展的代表作有奔腾系列机和安腾系列机。多处理机系统也遵循时间重叠、资源重复、资源共享原理，向着不同体系结构的多处理机方向发展。但在采取的技术措施上与单处理机系统有些差别。为了反映多处理机系统各机器之间物理连接的紧密程度与交互作用能力的强弱，通常使用耦合度这一术语。多处理机系统的耦合度，分为紧耦合系统和松耦合系统两大类。紧耦合系统又称直接耦合系统，指处理机之间物理连接的频带较高，一般是通过总线或高速开关实现互连，可以共享主存。由于具有较高的信息传输率，因而可以快速并行处理作业或任务。松耦合系统又称间接耦合系统，一般是通过通道或通信线路实现处理机之间的互连，可以共享外存设备磁盘、磁带等。机器之间的相互作用是在文件或数据集一级上进行。松耦合系统表现为两种形式：一种是多台计算机和共享的外存设备连接，不同机器之间实现功能上的分工功能专用化，机器处理的结果以文件或数据集的形式送到共享外存设备，供其他机器继续处理。另一种是计算机网，机器通过通信线路连接，以求得更大范围的资源共享。多处理机中为了实现时间重叠，将处理功能分散给各专用处理机去完成，即功能专用化，各处理机之间则按时间重叠原理工作。如输入输出功能的分离，导致由通道向专用外围处理机发展。许多主要功能，如数组运算、高级语言编译、数据库管理等，也逐渐分离出来，交由专用处理机完成，机间的耦合程度逐渐加强，从而发展成为异构多处理机系统。随着硬件价格的降低，系统设计的目标聚焦到通过多处理机的并行处理来提高整个系统的速度。为此，对计算机间互联网络的性能提出了更高要求。高带宽、低延迟、低开销的机间互联网络，是高效实现程序段或任务一级并行处理的前提条件。为了使并行处理的任务能在处理机之间随机地进行调度，就必须使各处理机具有同等的功能，从而成为同构多处理机系统。世纪年代以来，芯片技术的飞速发展，为多处理机系统的研究和设计提供了强大的物质基础，各种类型的并行计算机系统纷纷问世。世纪年代，我国研制了向量处理机YH和。它们都是流水线单机内部并行的机器。进入年代以来，我国又研制了多种类型的并行计算机系统，打破了国外在高性能计算机领域对我国的封锁。表列出了我国年代以来自行研制的几种并行计算机系统。年，超级计算机浮点最高运算速度达到每秒亿次。我国的神威号计算机运算速度达到每秒亿次，使我国成为继美国、日本之后世界上第三个拥有高速计算机的国家。年月曙光A被评为世界超级计算机五百强的第十名，并作为中国国家网格最大主节点安装在上海超级计算中心。龙芯F是中国科学院计算技术研究所研制的采用nm设计技术的位高性能通用CPU芯片。年中国科学技术大学第一个用国产龙芯FCPU设计出了万亿次的高性能机器，这是值得称道和令人鼓舞的，是中国人用自己的CPU做超级计算机的开始。年月，世界超级计算机五百强排行榜中，第一名是中国国防科技大学的“天河A”万亿次秒，第二名是美国Cray公司的Jaguar美洲虎，第三名是中国曙光信息产业有限公司的“星云”，第七名是美国IBM公司的Roadrunner走鹃。表是这四台超级计算机的列表。年，MJFlynn从计算机体系结构的并行性出发，按照指令流和数据流的不同组织方式，把计算机系统结构分为如下四种类型，如图所示。单指令流单数据流SISD，其代表机型是单处理机。单指令流多数据流SIMD，其代表机型是向量处理机。多指令流单数据流MISD，这种结构从来没有实现过。多指令流多数据流MIMD，其代表机型是多处理机和机群系统。前者为紧耦合系统，后者为松耦合系统。图进一步说明了上述分类的组成方式。其中，图a表示一个SISD的结构，CU代表控制单元，PU代表处理单元，MU代表存储单元，IS代表单一指令流，DS代表单一数据流。这是单处理机系统进行取指令和执行指令的过程。图b表示SIMD的结构，仍是一个单一控制单元CU，但现在是向多个处理单元PUlPUn提供单一指令流，每个处理单元可有自己的专用存储器局部存储器LMlLMn。这些专用存储器组成分布式存储器。图c和图d表示MIMD的结构，两者均有多个控制单元CUlCUn，每个控制单元向自己的处理部件PUlPUn提供一个独立的指令流。不同的是，图c是共享存储器多处理机，而图d是分布式存储器多处理机。计算机体系结构可以采用不同方式的并行机制。超标量处理机和超长指令字处理机在计算机系统的最底层，流水线技术将时间并行性引入处理机，而多发射处理机则把空间并行性引入处理机。超标量superscalar设计采用多发射技术，在处理机内部设置多条并行执行的指令流水线，通过在每个时钟周期内向执行单元发射多条指令实现指令级并行。超长指令字技术verylonginstructionword，VLIW则由编译器在编译时找出指令间潜在的并行性，进行适当的调度安排，把多个能够并行执行的操作组合在一起，控制处理机中的多个相互独立的功能部件，相当于同时执行多条指令，从而提高处理机的并行性。多处理机和多计算机在单个处理机的性能一定的情况下，进一步提高计算机系统处理能力的简单方法就是让多个处理机协同工作，共同完成任务。广义而言，使用多台计算机协同工作来完成所要求的任务的计算机系统称为多处理机multiprocessor系统。具体而言，多处理机系统由多台独立的处理机组成，每台处理机都能够独立执行自己的程序和指令流，相互之间通过专门的网络连接，实现数据的交换和通信，共同完成某项大的计算或处理任务。多处理机系统中的各台处理机由操作系统管理，实现作业级或任务级并行。与广义多处理机系统不同，狭义多处理机系统仅指在同一计算机内处理机之间通过共享存储器方式通信的并行计算机系统。运行在狭义多处理机上的所有进程能够共享映射到公共内存的单一虚拟地址空间。任何进程都能通过执行LOAD或STORE指令来读写一个内存字。与狭义多处理机相对应，由不共享公共内存的多个处理机系统构成的并行系统又称为多计算机multicomputers系统。每个系统都有自己的私有内存，通过消息传递的方式进行互相通信。多计算机系统有各种不同的形状和规模。机群cluster，也称集群系统就是一种常见的多计算机系统。机群系统是由一组完整计算机通过高性能的网络或局域网互连而成的系统，这组计算机作为统一的计算机资源一起工作，并能产生一台机器的印象。术语“完整计算机”意指一台计算机离开机群系统仍能运行自己的任务。机群系统中的每台计算机一般称为节点。多线程处理机当通过简单提高处理机主频从而提升单处理机的性能的传统方法受到制约时，处理机厂商被迫转向处理机片内并行技术。除了传统的指令级并行技术之外，多线程技术和多核技术也是提高单芯片处理能力的片内并行技术。由于现代处理机广泛采用指令流水线技术，因而处理机必须面对一个固有的问题：如果处理机访存时cache缺失不命中，则必须访问主存，这会导致执行部件长时间的等待，直到相关的cache块被加载到cache中。解决指令流水线因此必须暂停的一种方法就是片上多线程onchipmultithreading技术。该技术允许CPU同时运行多个硬件线程，如果某个线程被迫暂停，其他线程仍可以执行，这样能保证硬件资源被充分利用。多核处理机片上多处理机多线程技术能够屏蔽线程的存储器访问延迟，增加系统吞吐率，但并未提高每个单线程的执行速度。而多核multicore技术通过开发程序内的线程级或进程级并行性提高性能。多核处理机是指在一颗处理机芯片内集成两个或两个以上完整且并行工作的计算引擎核，也称为片上多处理机chipmultiprocessor，CMP。核core，又称内核或核心是指包含指令部件、算术逻辑部件、寄存器堆和一级或两级cache的处理单元，这些核通过某种方式互联后，能够相互交换数据，对外呈现为一个统一的多核处理机。多核技术的兴起一方面是由于单核技术面临继续发展的瓶颈，另一方面也是由于大规模集成电路技术的发展使单芯片容量增长到足够大，能够把原来大规模并行处理机结构中的多处理机和多计算机节点集成到同一芯片内，让各个处理机核实现片内并行运行。因此，多核处理机是一种特殊的多处理机架构。所有的处理机都在同一块芯片上，不同的核执行不同的线程，在内存的不同部分操作。多核也是一个共享内存的多处理机：所有的核共享同一个内存空间。多个核在一个芯片内直接连接，多线程和多进程可以并行运行。不同于多核结构，在传统的多处理机结构中，分布于不同芯片上的多个处理机通过片外系统总线连接，因此需要占用更大的芯片尺寸，消耗更多的热量，并需要额外的软件支持。多个处理机可以分布于不同的主板上，也可以构建在同一块电路板上，处理机之间通过高速通信接口连接。图af显示了不同结构的处理机形态。图a是单核处理机结构，由执行单元、CPU状态、中断逻辑和片上cache组成。图b是多处理机结构，由两个完全独立的单核处理机构成双处理机系统。图c是多线程处理机结构，在一个物理处理机芯片内集成两个逻辑处理机，二者共享执行单元和片上cache，但各自有自己的CPU状态和中断逻辑。图d是多核处理机结构，两个完全独立的单处理机核集成在同一个芯片内，构成双核处理机，每个核都有自己私有的片上cache。图e同样是多核处理机结构，但与图d显示的多核处理机结构的差别在于两个核共享片内cache。图f显示的是多核多线程处理机结构，这是多核与多线程相结合的片上并行技术。两个完全独立的处理机核集成在同一个芯片内，每个核又是双线程的，故该处理机为双核四线程结构。硬件多线程技术是提高处理机并行度的有效手段，以往常被应用于高性能计算机的处理机。年秋，英特尔公司推出一款采用超线程hyperthreading，HT技术的Pentium处理机，使多线程技术进入桌面应用环境。超线程技术是同时多线程技术在英特尔处理机上的具体实现。在经过特殊设计的处理机中，原有的单个物理内核经过简单扩展后被模拟成两个逻辑内核，并能够同时执行两个相互独立的程序，从而减少了处理机的闲置时间，充分利用了中央处理机的执行资源。超标量处理机的水平浪费和垂直浪费超标量技术和超长指令字技术都是针对单一的指令流中的若干指令来提高并行处理能力的，当单一的指令流出现cache缺失等现象时，指令流水线就会断流；而指令之间的相关性也会严重影响执行单元的利用率。例如，资源冲突会导致处理机流水线不能继续执行新的指令而造成垂直浪费，而指令相关会导致多条流水线中部分流水线被闲置，造成水平浪费。图显示了一个有四条流水线的超标量处理机的指令执行实例。图中，每个方框代表一个可用的指令发射时间，水平方向表示并行执行指令的条指令流水线指令发射槽，垂直方向表示时钟周期，“A”表示某指令流A占用的周期，白框为浪费的周期。显然，水平浪费和垂直浪费造成了处理机执行部件的空闲。因此，如何减少处理机执行部件的空闲时间成为提升处理机性能的关键。而线程级并行threadlevelparallelism，TLP技术正是针对这一问题而引入的。硬件线程的概念多任务系统必须解决的首要问题就是如何分配宝贵的处理机时间，这通常是由操作系统负责的。操作系统除了负责管理用户程序的执行外，也需要处理各种系统任务。在操作系统中，通常使用进程process这一概念描述程序的动态执行过程。通俗地讲，程序是静态实体，而进程是动态实体，是执行中的程序。进程不仅仅包含程序代码，也包含了当前的状态这由程序计数器和处理机中的相关寄存器表示和资源。因此，如果两个用户用同样一段代码分别执行相同功能的程序，那么其中的每一个都是一个独立的进程。虽然其代码是相同的，但是数据却未必相同。传统的计算机系统把进程当作系统中的一个基本单位，操作系统将内存空间、IO设备和文件等资源分配给每个进程，调度和代码执行也以进程作为基本单位。但进程调度是频繁进行的，因而在处理机从一个进程切换到另一个进程的过程中，系统要不断地进行资源的分配与回收、现场的保存与恢复等工作，为此付出了较大的时间与空间的开销。因此，在现代操作系统中，大都引入线程作为进程概念的延伸，线程是在操作系统中描述能被独立执行的程序代码的基本单位。进程只作为资源分配的单位，不再是调度和执行的基本单位；而每个进程又拥有若干线程，线程则是调度和执行的基本单位。除了拥有一点儿在运行中必不可少的独立资源如程序计数器、一组寄存器和栈之外，线程与属于同一个进程的其他线程共享进程所拥有的全部资源。由于线程调度时不进行资源的分配与回收等操作，因而线程切换的开销比进程切换少得多。在处理机设计中引入硬件线程hardwarethread的概念，其原理与操作系统中的软件多线程并行技术相似。硬件线程用来描述一个独立的指令流，而多个指令流能共享同一个支持多线程的处理机。当一个指令流因故暂时不能执行时，可以转向执行另一个线程的指令流。由于各个线程相互独立，因而大大降低了因单线程指令流中各条指令之间的相互依赖导致的指令流水线冲突现象，从而有效提高处理机执行单元的利用率。因此，并行的概念就从指令级并行扩展至线程级并行。图显示了一个支持两个线程的超标量处理机的指令执行实例。其中，“A”表示线程A指令流A占用的周期，“B”表示线程B指令流B占用的周期。在每个时钟周期内，所有的流水线都用于执行同一线程的指令，但在下一个时钟周期则可以选择另一个线程的指令并行执行。细粒度多线程和粗粒度多线程根据多线程处理机的具体实现方法差异，又可以分为细粒度多线程交错多线程处理机和粗粒度多线程阻塞多线程处理机。细粒度多线程如图a所示，处理机交替执行A、B两个线程的指令，在每个时钟周期都进行线程切换。由于多个线程交替执行，并且处于阻塞状态的线程在切换时被跳过，故在一定程度上降低了指令阻塞造成的处理机吞吐率损失。当然，每个线程的执行速度降低了，因为就绪状态的线程会因为其他线程的执行而延迟。粗粒度多线程如图b所示，只有在遇到代价较高的长延迟操作如因cache缺失需要访问主存时才由处理机硬件进行线程切换，否则一直执行同一个线程的指令。因此，粗粒度多线程比细粒度多线程有更低的线程切换开销，且每个线程的执行速度几乎不会降低。但是粗粒度多线程也有弱点，就是在线程切换的过程中需要排空或填充指令流水线。只有当长延迟操作导致线程被阻塞的时间远长于指令流水线排空或填充的时间时，粗粒度多线程才是有意义的。多线程处理机通常为每个线程维护独立的程序计数器和数据寄存器。处理机硬件能够快速实现线程间的切换。由于多个相互独立的线程共享执行单元的处理机时间，并且能够进行快速的线程切换，因而多线程处理机能够有效地减少垂直浪费情况，从而利用线程级并行来提高处理机资源的利用率。从图可以看出，多线程处理机虽然可以减少长延迟操作和资源冲突造成的处理机执行单元浪费，但并不能完全利用处理机中的所有资源。这是因为每个时钟周期执行的指令都来自同一个线程，因而不能有效地消除水平浪费。为了最大限度地利用处理机资源，同时多线程simultaneousmultithreading，SMT技术被引入现代处理机中。同时多线程技术结合了超标量技术和细粒度多线程技术的优点，允许在一个时钟周期内发射来自不同线程的多条指令，因而可以同时减少水平浪费和垂直浪费。图显示了一个支持两个线程的同时多线程处理机的指令执行实例。在一个时钟周期内，处理机可以执行来自不同线程的多条指令。当其中某个线程由于长延迟操作或资源冲突而没有指令可以执行时，另一个线程甚至能够使用所有的指令发射时间。因此，同时多线程技术既能够利用线程级并行减少垂直浪费，又能够在一个时钟周期内同时利用线程级并行和指令级并行来减少水平浪费，从而大大提高处理机的整体性能。同时多线程技术是一种简单、低成本的并行技术。与单线程处理机相比，同时多线程处理机只花费很小的代价，而性能得到很大改善。在原有的单线程处理机内部为多个线程提供各自的程序计数器、相关寄存器以及其他运行状态信息，一个“物理”处理机被模拟成多个“逻辑”处理机，以便多个线程同步执行并共享处理机的执行资源。应用程序无须做任何修改就可以使用多个逻辑处理机。由于多个逻辑处理机共享处理机内核的执行单元、高速缓存和系统总线接口等资源，因而在实现多线程时多个逻辑处理机需要交替工作。如果多个线程同时需要某一个共享资源，只有一个线程能够使用该资源，其他线程要暂停并等待资源空闲时才能继续执行。因此，同时多线程技术就性能提升而言远不能等同于多个相同时钟频率处理机核组合而成的多核处理机，但从性能价格比的角度看，同时多线程技术是一种对单线程处理机执行资源的有效而经济的优化手段。由于同时运行的多个线程需要共享执行资源，因而处理机的实时调度机制非常复杂。就调度策略而言，取指部件要在单线程执行时间延迟与系统整体性能之间取得平衡。与单线程处理机相比，并发执行的多个线程必然拉长单个线程的执行时间，但处理机可以通过指定一个线程为最高优先级而减小其执行延迟，只有当优先线程阻塞时才考虑其他线程。为了最大限度地提高处理机整体性能，同时多线程处理机也可以采用另外一种策略，即处理机的取指部件可以选择那些可以带来最大性能好处的线程优先取指并执行，代价是牺牲单个线程的执行时间延迟。为了实现同时多线程，处理机需要解决一系列问题。例如，处理机内需要设置大量寄存器保存每个线程的现场信息，需要保证由于并发执行多个线程带来的cache冲突不会导致显著的性能下降，确保线程切换的开销尽可能小。超线程技术是同时多线程技术在英特尔系列处理机产品中的具体实现。自年起，英特尔公司先后在其奔腾处理机和至强XEON处理机等产品中采用超线程技术。奔腾处理机和至强处理机基于同样的IntelNetBurst微体系结构microarchitecture，处理机体系结构在硅芯片上的具体实现。图显示了支持超线程技术的NetBurst微体系结构的流水线结构。每条指令的执行过程都需要经过个功能段组成的流水线。图支持超线程技术的NetBurst微体系结构的流水线结构原有的流水线只支持单线程运行。统计表明，单线程的NetBurst微体系结构的流水线在执行典型的指令序列时仅仅利用了大约的流水线资源。为了支持两个硬件线程同时运行，需要对流水线进行改造。改造的方式是让每级流水线中的资源通过三种方式之一复用于两个线程：复制、分区或共享。其中，复制方式是在处理机设计时分别为两个线程设置独立的部件。被复制的资源包括所有的处理机状态、指令指针IP程序计数器寄存器、寄存器重命名部件和一些简单资源如指令TLB等。复制这些资源仅仅会少许提高处理机的成本，而每个线程使用这些资源的方式与单线程相同。分区方式则是在处理机设计时把原有的用于单线程的独立资源分割成两部分，分别供两个线程使用。采用分区方式的主要是各种缓冲区和队列，如重排序缓冲区、取数存数缓冲区和各级队列等。与单线程相比，每个线程使用的缓冲区或队列的容量减半，而处理机成本并没有增加。共享方式则是由处理机在执行指令的过程中根据使用资源的需要在两个线程之间动态分享资源。乱序执行部件和cache采用共享方式复用。这种方式同样不增加处理机成本，但单线程运行时存在的资源闲置得到有效改善。由于不同的资源采用不同的复用方式，因此当指令在不同的资源之间转移时，处理机需在图中箭头和多路开关标识的选择点根据需要动态选择能够使用下级资源的线程。多线程技术只对传统的单线程超标量处理机结构做了很少改动，但却获得很大的性能提升。启用超线程技术的内核比禁用超线程技术的内核吞吐率要高出。当然，超线程技术需要解决一系列复杂的技术问题。例如，作业调度策略、取指和发射策略、寄存器回收机制、存储系统层次设计等比单线程处理机复杂许多。多处理机系统由多个独立的处理机组成，每个处理机能够独立执行自己的程序。现有的多处理机系统分为如下四种类型：并行向量处理机PVP、对称多处理机SMP、大规模并行处理机MPP、分布共享存储器多处理机DSM，如图所示。并行向量处理机见图a。它是由少数几台巨型向量处理机采用共享存储器方式互连而成，在这种类型中，处理机数目不可能很多。对称多处理机见图b。它由一组处理机和一组存储器模块经过互联网络连接而成。有多个处理机且是对称的，每台处理机的能力都完全相同。每次访问存储器时，数据在处理机和存储器模块间的传送都要经过互联网络。由于是紧耦合系统，不管访问的数据在哪一个存储器模块中，访问存储器所需的延迟时间都是一样的。分布共享存储器多处理机见图c。同PVP和SMP一样，它也属于紧耦合系统。它的共享存储器分布在各台处理机中，每台处理机都带有自己的本地存储器，组成一个处理机存储器单元。但是这些分布在各台处理机中的实际存储器又合在一起统一编址，在逻辑上组成一个共享存储器。这些处理机存储器单元通过互联网络连接在一起，每台处理机除了能访问本地存储器外，还能通过互联网络直接访问在其他处理机存储器单元中的“远程存储器”。处理机在访问远程存储器时所需的延迟时间与访问本地存储器时所需的延迟时间是不一样的，访问本地存储器要快得多。大规模并行处理机见图d。它属于松耦合多处理机系统。每个计算机模块称为一个结点。每个结点有一台处理机和它的局部存储器LM、结点接口NIC，有的还有本身的IO设备，这几部分通过结点内的总线连在一起。计算机模块又通过结点接口连接到互联网络上。由于VLSI技术的发展，整个结点上的计算机已可以做在一个芯片上。第章并行组织与结构在这种松耦合的多计算机系统中，各台计算机间传送数据的速度低，延迟时间长，且各结点间的距离是不相等的，因此把经常要在结点间传送数据的任务放在相邻的结点中执行。由于松耦合的多计算机系统的互联网络的成本低得多，故同紧耦合多处理机系统相比，其优点是可以组成计算机数目很多的大规模并行处理系统。也就是说，可以比较经济合理地用微处理机构成几百台乃至几千台的多计算机系统。鉴于当前并行处理系统的发展趋势，下面重点讲授对称多处理机SMP。不久前，所有的单用户个人计算机和大多数工作站还只含有单一通用微处理机。随着性能需求的增长和微处理机价格的持续下跌，计算机制造商推出了SMP系统。SMP既指计算机硬件体系结构，也指反映此体系结构的操作系统行为。SMP定义为具有如下特征的独立计算机系统。有两个以上功能相似的处理机。这些处理机共享同一主存和IO设施，以总线或其他内部连接机制互连在一起；这样，存储器存取时间对每个处理机都是大致相同的。所有处理机共享对IO设备的访问，或通过同一通道，或通过提供到同一设备路径的不同通道。所有处理机能完成同样的功能。系统被一个集中式操作系统OS控制。OS提供各处理机及其程序之间的作业级、任务级、文件级和数据元素级的交互。其中，是十分明显的。表示了SMP与机群系统之类的松耦合多处理系统的对照。后者的交互物理单位通常是消息或整个文件；而在SMP中，个别的数据元素能成为交互级别，于是处理机间能够有高度的相互协作。SMP的操作系统能跨越所有处理机来调度进程或线程。SMP有如下几个超过单处理机的优点。性能如果可以对一台计算机完成的工作进行组织，使得某些工作部分能够并行完成；则具有多个处理机的系统与具有同样类型的单处理机的系统相比，将产生更高的性能。可用性在一个对称多处理机系统中，所有处理机都能完成同样的功能，故单个处理机的故障不会造成系统的停机，系统在性能降低的情况下继续运行。增量式增长用户可以通过在系统中添加处理机来提高系统性能。可扩展性厂商能提供一个产品范围，它们基于系统中配置的处理机数目不同而有不同的价格和性能特征。SMP的一个有吸引力的特点是：多个处理机的存在对用户是透明的；由操作系统实际关注各个处理机上进程或线程的调度，以及处理机间的同步。对个人计算机、工作站和服务器而言，互连机构使用分时共享总线。分时共享总线是构成一个多处理机系统的最简单机构。结构和界面基本上同于使用总线互连的单处理机系统。总线由控制、地址和数据线组成。为便利来自IO处理器的DMA传送，应具备如下特征。寻址必须能区别总线上各模块，以确定数据的源和目标。仲裁任何IO模块都能临时具备主控器master功能。要提供一种机制来对总线控制的竞争请求进行仲裁，可使用某种类型的优先级策略。分时共享当一个模块正在控制总线时，其他模块是被锁住的，而且如果需要，应能挂起它的操作直到当前的总线访问完成。这些单处理机特征在对称多处理机配置中是直接可用的，但可能会出现多个处理机以及多个IO适配器都试图掌管总线，并对一个或多个存储器模块进行存取操作的更为复杂的情况。与其他方法比较，总线组织方式有如下几个优点。简易性这是多处理机系统组成的最简单方式。物理接口以及每个处理机的寻址、仲裁和分时逻辑保持与单处理机系统相同。灵活性以附加更多处理机到总线的方法来扩充系统，一般来说也是容易的。可靠性本质上来说，总线是一个被动介质，并且总线上任一设备的故障不会引起整个系统的失败。总线组织的主要缺点在于性能。所有的存储器访问都要通过公共总线，于是系统速度受限于总线周期。为改善性能，就要求为每个处理机配置cache，这将急剧地减少总线访问次数。一般来说，工作站和个人机SMP都有两级cache，Lcache是内部的与处理机同一芯片，Lcache或是内部的，或是外部的。现在，某些处理机还使用了Lcache。cache的使用导致某些新的设计考虑，因为每个局部cache只保存部分存储器的映像，如果在某个cache中修改了一个字，可想象出其他cache中的此字将会是无效的。为防止这个问题，必须通知其他处理机：已经发生了修改。这个问题称为cache一致性问题，并且一般是以硬件解决。从单处理机到多核处理机的变化并不是处理机设计厂商根据客户需求和市场趋势做出的主动选择，而是在物理规律限制下的无奈之举。多核解决方案可以利用新工艺带来的集成电路集成度的提高，将几个处理机核心集成在一块芯片内。与传统的单核技术相比，多核技术是应对芯片物理规律限制的相对简单的办法。与提高处理机主频相比，在一个芯片内集成多个相对简单而主频稍低的处理机核既可以充分利用摩尔定律带来的芯片面积提升，又可以更容易地解决功耗、芯片内部互联延迟和设计复杂度等问题。高并行性：每个处理机核都不必提高晶体管的翻转速度，而多核处理机可同时执行的线程数或任务数是单处理机的数倍，极大地提升了处理机的并行性，带来了更强的并行处理能力和更高的计算密度。高通信效率：多个核集成在片内，各个处理机核只需要在核内部的相对较小的区域内交换数据，不需要很长的互联线，通信延迟变低，提高了通信效率，数据传输带宽也得到提高。高资源利用率：多核结构可以有效支持片内资源共享，片上资源的利用率得到了提高。低功耗：处理机的功耗增长随着内核数目的增加呈线性增长，而不是随着频率的增加呈指数级增长。由于不再依靠提高主频改善性能，内核的工作频率不需要达到上限，多个简单低速核的功耗远低于一个高速复杂处理机的功耗。如果进一步采用动态管理各处理机核功耗的方法，针对不同的任务，每个核可以被降频或关闭，多核在功耗控制上会更有优势。低设计复杂度：多核处理机中的每个核的结构相对简单，易于优化设计，扩展性强。设计高速而复杂的单处理机往往要采用超标量处理机结构和超长指令字结构，控制逻辑复杂。而在芯片内复制多个低速简单内核的设计难度显然更低，设计和验证周期更短，出现错误的机会也更小。较低的成本：多核处理机内的各个核共享器件芯片封装和芯片IO资源，也使占单核处理机成本的芯片封装和IO成本的比重大大下降，生产成本得以降低。设计复杂度的降低也会使处理机设计开发的成本降低。这些优势最终推动多核的发展并使多核逐渐取代单核处理机成为主流技术。多核技术是在超线程、超标量和多处理机等技术的基础上发展起来的，也充分吸收了其他技术的优势。超线程技术是通过隐藏潜在访存延迟的方法提高处理机的性能，其主要目的是充分利用空闲的处理机资源，本质上仍然是多个线程共享一个处理机核。因此，采用超线程技术是否能获得性能的提升依赖于应用程序以及硬件平台。多核处理机则是将多个独立的处理机核嵌入到一个处理机芯片内部，每个线程都具有完整的硬件执行环境，故各线程之间可以实现真正意义上的并行。当然，多核架构中灵活性的提升是以牺牲资源利用率为代价的。不管是超线程处理机还是多核处理机，性能的提升都需要软件的配合，性能提升的程度取决于并行性的大小。多处理机系统是利用任务级并行的方式提高系统性能的，即把任务并行化并分配到多个处理机中去执行。由于多处理机之间的耦合度较低，不适合实现细粒度并行，而功耗也较高。而多核处理机由于在一个芯片内集成多个核心，核间耦合度高，核间互连延迟更小，功耗更低，故可以在任务级、线程级和指令级等多个层次充分发挥程序的并行性，灵活度高。同构多核处理机与异构多核处理机与多处理机的分类方法类似，按多核处理机内的计算内核的地位对等与否划分，多核处理机可以分为同构多核和异构多核两种类型。同构多核homogenousmulticore处理机同构多核处理机内的所有计算内核结构相同，地位对等。同构多核处理机大多由通用的处理机核心构成，每个处理机核心可以独立地执行任务，其结构与通用单核处理机结构相近。同构多核处理机的各个核心之间可以通过共享存储器互连，也可以通过cache或局部存储器互连。在英特尔公司的通用桌面计算机上的多核处理机通常采用同构多核结构。异构多核heterogeneousmulticore处理机异构多核处理机内的各个计算内核结构不同，地位不对等。异构多核处理机根据不同的应用需求配置不同的处理机核心，一般多采用“主处理核协处理核”的主从架构。异构多核处理机的优势在于可以同时发挥不同类型处理机各自的长处来满足不同种类的应用的性能和功耗需求。异构多核处理机将结构、功能、功耗、运算性能各不相同的多个核心集成在芯片上，并通过任务分工和划分将不同的任务分配给不同的核心，让每个核心处理自己擅长的任务。目前的异构多核处理机通常同时集成通用处理机、数字信号处理机DSP、媒体处理机、网络处理机等多种类型的处理机核心，并针对不同需求配置应用其计算性能。其中，通用处理机核常作为处理机控制主核，并用于通用计算；而其他处理机核则作为从核用于加速特定的应用。例如，多核异构网络处理机配有负责管理调度的主核和负责网络处理功能的从核，经常用于科学计算的异构多核处理机在主核之外可以配置用于定点运算和浮点运算等计算功能的专用核心。研究表明，异构组织方式比同构的多核处理机执行任务更有效率，实现了资源的最优化配置，而且降低了系统的整体功耗。多核处理机的对称性同构多核和异构多核是对处理机内核硬件结构和地位一致性的划分。如果再考虑各个核之上的操作系统，从用户的角度看，可以把多核处理机的运行模式划分为对称symmetricmultiprocessing，SMP多核和非对称asymmetricmultiprocessing，AMP多核两种类型。多核处理机中的对称SMP多核结构是指处理机片内包含相同结构的核，多个核紧密耦合，并运行一个统一的操作系统。每个核的地位是对等的，共同处理操作系统的所有任务。SMP由多个同构的处理机核和共享存储器构成，由一个操作系统的实例同时管理所有处理机核，并将应用程序分配至各个核上运行。只要有一个内核空闲可用，操作系统就在线程等待队列中分配下一个线程给这个空闲内核来运行。应用程序本身可以不关心有多少个核在运行，由操作系统自动协调运行，并管理共享资源。同构多核处理机也可以构成非对称AMP多核结构。若处理机芯片内部是同构多核，但每个核运行一个独立的操作系统或同一操作系统的独立实例，那就变成非对称多核。AMP多核系统也可以由异构多核和共享存储器构成。多核处理机的cache组织在设计多核处理机时，除了处理机的结构和数量，cache的级数和大小也是需要考虑的重要问题。根据多核处理机内的cache配置，可以把多核处理机的组织结构分成以下四种。片内私有Lcache结构图a显示的多核结构是简单的多核计算机片内cache结构。系统cache由L和L两级组成。处理机片内的多个核各自有自己私有的Lcache，一般被划分为指令LcacheLI和数据LcacheLD。而多核共享的Lcache则存在于处理机芯片之外。ARM公司ARM微体系结构的MPCore多核嵌入式处理机就采用这种结构。片内私有Lcache结构在图b显示的多核结构中，处理机片内的多个核仍然保留自己私有的指令LcacheLI和数据LcacheLD，但Lcache被移至处理机片内，且Lcache为各个核私有。多核共享处理机芯片之外的主存。AMD公司专门为服务器和工作站设计的皓龙Opteron处理机就采用这种结构。片内共享Lcache结构在图c显示的多核结构与图b显示的多核结构相似，都是片上两级cache结构。不同之处在于处理机片内的私有Lcache变为多核共享Lcache。多核仍然共享处理机芯片之外的主存。对处理机的每个核而言，片内私有Lcache的访问速度更高。但在处理机片内使用共享的Lcache取代各个核私有的Lcache能够获得系统整体性能的提升，这是因为：共享cache有助于提高整体cache命中率。如果处理机内的多个核先后访问主存同一个页面，首次访问该地址的操作会将该页面调入共享cache，其他核在此后访问同样的主存页面时可以直接在共享cache中快速存取，从而减少访问主存的次数。并且，在私有cache结构中，不同核访问主存相同页面会在各自私有cache中都保存该主存页面的副本，而共享cache则不会重复复制数据。共享cache的存储空间可以在不同核之间动态按需分配，实现“统计时分复用”。而私有cache的大小是固定不变的。共享cache还可以作为处理机间交互信息的通道。多核处理机必须解决多级cache的一致性问题，而只设计L一级私有cache可以降低解决cache一致性问题的难度，从而提供额外的性能优势。英特尔公司的第一代酷睿双核CoreDuo低功耗处理机就采用这种结构。片内共享Lcache结构随着处理机芯片上的可用存储器资源的增长，高性能的处理机甚至把Lcache也从处理机片外移至片内。图d显示的多核结构在图b显示的片内私有Lcache结构的基础上增加了片内多核共享Lcache，使存储系统的性能有了较大提高。由于处理机片内核心数和片内存储空间容量都在增长，在共享Lcache结构或私有Lcache结构上增加共享的Lcache显然有助于提高处理机的整体性能。英特尔公司于年推出的位酷睿iCorei四核处理机就采用这种结构。尽管多核技术与单核技术相比存在性能高、集成度高、并行度高、结构简单和设计验证方便等诸多优势，但从单核到多核的转变并不是直接把多个芯片上的多个处理机集成到单一芯片之中这么简单。多核处理机必须解决诸多技术难题。多核处理机架构多核处理机的体系结构直接影响着多核的性能。而不同的应用的特性又差别很大，这些特性又对多核应该采用什么样的结构有着非常大的影响。为此，必须针对不同的应用设计多核的实现架构。首先是每个核自身的结构，这关系到整个芯片的面积、功耗和性能。就每个核而言，如何继承并扩展传统单处理机设计的成果，直接影响多核处理机的性能和实现周期。多核系统中的每个核是否应该采用超标量技术或超线程技术，是性能和成本平衡的问题。随着对处理机的性能要求的不断提高，在多核处理机的每个核上采用超线程技术的架构应用越来越广。而软件的并行化设计思想的推广也让超线程技术越来越有吸引力。其次就是多核之间的对等性，以及芯片上的核的数目。采用同构多核还是异构多核，一般要根据具体的应用场景、设计目标等因素综合决定。最初的多核处理机都采用同构处理机架构，每个核的功能较强，但集成的处理机核的数量较少，一般以总线或交叉开关互连。这种设计实际上是利用半导体技术的进步把原来放在不同芯片上的多处理机集成到一个芯片上，通过简单增加片内处理机核心的数量来提升处理机的性能，体系结构上的改进并不明显。这种设计方法简单、有效，可以重用复杂的处理机设计，并且借用板级总线协议，是多核发展的初级阶段。同构多核结构原理简单，硬件实现复杂度低，在通用桌面系统中被普遍采用。但在现实世界的应用场景中，并不总是能够把计算任务均匀分配到同构的多个核心上，多核必须面对如何平衡若干处理机的负载并进行任务协调等难题。即使能够不断增加同类型的处理机核心的数量以加强并行处理能力，整个系统的处理性能仍然会受到软件中必须串行执行的那部分的制约。达到极限值之后，性能就无法再随着内核数量的增加而提升了。这就是著名的阿姆达尔定律Amdahl’slaw。异构多核则通过配置不同特点的核心来优化处理机内部结构，实现处理机性能的最佳化，并能有效地降低系统功耗。异构多核架构的一个典型实例就是在通用个人计算机上将图形处理单元GraphicProcessingUnit，GPU与通用CPU集成在一颗芯片上构成的异构多核处理机。在这样的架构下，系统中必须串行执行的部分能在一个强大的CPU核上加速，而可以并行的部分则通过很多很小的GPU核来提速。GPU是在通用计算机系统上支持图形处理的专用处理单元。GPU的计算能力随着图形运算的复杂度的上升而逐渐提高，尤其是浮点运算能力已经远远超过通用CPU数倍。与CPU相比，GPU更适合重复计算，因为GPU是专门为图形运算而设计的，在设计时就考虑到了图形运算的特征。例如，对图形的色彩处理往往需要对所有待处理的像素执行相同或类似的重复运算。这恰恰让GPU非常适合进行SIMD运算。因此，人们很自然地试图利用GPU的这种优化设计来进行图形之外的通用计算，将GPU通用化，于是出现了通用图形处理机GeneralPurposeGPU，GPGPU。GPGPU兼有通用计算和图形处理两大功能，能完成CPU的运算工作，更适合高性能计算，并能使用高级程序设计语言，在性能和通用性上更加强大。GPGPU向着集成化方向发展，即将GPU核集成到CPU片内，就构成异构多核处理机。面向并行处理的应用软件所要求的浮点运算及定点运算将由GPU执行；而CPU内核则把重点放在执行传统处理机的主要任务，即运行操作系统、执行商务软件中的整数运算等。异构多核结构也存在着一些难点，如选择哪几种不同的核相互搭配、核间任务如何分工、如何实现良好的可扩展性等，必须在性能、成本、功耗等方面仔细平衡，并通过软硬件相互配合使任务的并行性最大化。多核系统存储结构设计为了使处理机的处理能力得到充分发挥，存储系统必须能够提供与处理机性能相匹配的存储器带宽。因此，处理机与主存储器之间的速度差距一直是处理机结构设计中必须考虑的问题。由于处理机内的核心数目增多，并且各核心采用共享存储器结构进行信息交互，对主存的访问需求进一步增加，在单处理机时代面临的存储墙问题依然存在，而且问题更加严重。故必须针对多核处理机进行相应的存储结构设计，并解决好存储系统的效率问题。目前的存储系统设计仍然采用存储器分级的方式解决存储速度问题，高性能的处理机采用二级甚至三级cache提高存储系统的等效访问速度，并且处理机片内的cache容量尽可能增大。但多核系统中的存储系统设计必须平衡系统整体性能、功耗、成本、运行效率等诸多因素。因此，在多核处理机设计时，必须评估共享cache和私有cache孰优孰劣、需要在芯内设置几级cache等因素。此外，在多核系统中，还面临多级cache的一致性cachecoherency问题。多核处理机的cache一致性cache一致性问题产生的原因是：在一个处理机系统中，不同的cache和主存空间中可能存放着同一个数据的多个副本，在写操作时，这些副本存在着潜在的不一致。在单处理机系统中，cache一致性问题主要表现为在内存写操作过程中如何保持cache中的数据副本和主存内容的一致，即使有IO通道共享cache，也可以通过全写法较好地解决一致性问题。而在多核系统中，多个核都能够对内存进行写操作，而cache级数更多，同一数据的多个副本可能同时存放在多个cache存储器中，某个核的私有cache又只能被该核自身访问。即使采用全写法，也只能维持一个cache和主存之间的一致性，不能自动更新其他处理机核的私有cache中的相同副本。这些因素无疑加大了cache一致性问题的复杂度，同时又影响着多核系统的存储系统整体设计。维护cache一致性的关键在于跟踪每一个cache块的状态，并根据处理机的读写操作及总线上的相应事件更新cache块的状态。一般来说，导致多核处理机系统中cache内容不一致的原因如下。可写数据的共享一台处理机采用全写法或回写法修改某一个数据块时，会引起其他处理机的cache中同一副本的不一致。IO活动如果IO处理机直接接在系统总线上，也会导致cache不一致。核间线程迁移核间线程迁移就是把一个尚未执行完的线程调度到另一个空闲的处理机核中去执行。为提高整个系统的效率，有的系统允许线程核间迁移，使系统负载平衡。但这有可能引起cache的不一致。对于IO活动和核间线程迁移而导致的cache不一致，可以分别通过禁止IO通道与处理机共享cache以及禁止核间线程迁移来解决。因而多处理机中cache一致性问题主要是针对可写数据的共享。在多核系统中，cache一致性可以使用软件或者硬件维护。软件方法采取的手段是“预防”。在使用软件方式维护cache一致性时，处理机需要提供专门的显式cache操作指令，如cache块拷贝、回收和无效等指令，让程序员或编译器分析源程序的逻辑结构和数据相关性，判断可能出现的cache一致性问题，利用这些指令维护cache一致性。软件维护cache一致性的优点是硬件开销小，缺点是在多数情况下对性能有较大影响，而且需要程序员的介入。多数情况下，cache一致性由硬件维护。硬件方法采取的手段是“通过硬件发现和解决所发生的cache一致性问题”。不同的处理机系统使用不同的cache一致性协议维护cache一致性。cache一致性协议维护一个有限状态机，并根据存储器读写指令或者总线上的操作进行状态转移并完成相应cache块的操作，以维护cache一致性。目前，大多数多核处理机采用总线侦听bussnooping协议，也有的系统采用目录directory协议解决多级cache的一致性问题。目录协议在全局的角度统一监管不同cache的状态；而在总线侦听方式中，每个cache分别管理自身cache块的状态，并通过广播进行不同cache间的状态同步。目录协议目录协议收集并维护有关数据块副本驻存在何处的信息。典型地，系统有一中央控制器，它是主存控制器的一部分，目录就存于主存中。目录会有关于各个局部cache内容的全局性状态信息。当某个特定的cache控制器产生一个请求时，中央控制器检查此请求并发出必要的命令，以在存储器和cache之间或不同cache之间传送数据。中央控制器亦负责保持状态信息的更新。于是，任何一个能影响cache行的全局状态的局部动作必须报告给中央控制器。中央控制器维护着关于哪个处理机核具有哪个数据行副本的信息。在处理机核向局部cache行副本写入信息之前，必须向中央控制器请求排他性访问权限。在同意这次排他性访问之前，控制器发送一个消息给所有cache中保持有这一行副本的处理机核，以强迫每个处理机核使它的副本无效。接收到这些处理机核返回的确认信息后，控制器才将排他性访问权授予提出请求的处理机核。当一cache行已授权给某处理机核专有，而另外的处理机核企图读此行时，它将送出一个未命中指示给控制器。控制器则向持有此行的处理机核发布命令，要求它将此行写回到主存。于是，现在此行可被原先的处理机核和提出请求的处理机核读共享了。目录协议的缺点是存在中央瓶颈，且各cache控制器和中央控制器之间的通信开销也较大。然而，在采用了多条总线或某种另外的复杂互连机构的大型系统中，它们是很有效的。监听协议监听协议将维护cache一致性的责任分布到多核处理机中每个cache控制器上。一个cache必须知晓它保存的某个cache行何时会与其他cache共享。当对共享的cache行进行修改时，必须通过一种广播机制通知到所有其他cache。各cache控制器应能监听网络，以得到这些广播通知，并做出相应的反应。监听协议非常适合于基于总线的多核处理机，因为共享的总线能为广播和监听提供简洁的方式。然而，使用局部cache的目标之一就是希望避免或减少总线访问，因此必须小心设计以避免由于广播和监听而增加的总线传输抵消了使用局部cache的好处。监听协议已开发出两种基本方法：写作废writeinvalidate和写更新writeupdate。使用写作废协议，系统任一时刻可有多个读者，但只能有一个写者。最初，一个数据可能在几个cache中处于读共享状态。当某个cache要对此行进行写操作时，它要先发出一个通知，以使其他cache中此行作废，使此行变为cache写独占状态。一旦行变为独占状态，拥有该行的处理机核就可进行本地写操作，直到某些其他处理机核请求该数据行。在写作废协议中，cache行的状态被分别标识为修改Modified、独占Exclusive、共享Shared和无效Invilid。故写作废协议也称为MESI协议。写更新协议又称为写广播writebroadcast协议。采用该协议，系统中可有多个写者以及多个读者。当一个处理机核打算修改一个共享cache行时，将被写入的字数据也被同时广播到所有其他cache，于是拥有该数据行副本的cache能同时进行写修改。监听协议实现比较简单，但只适用于总线结构的多处理机系统，而且不管是写作废还是写更新，都要占用总线不少时间，所以只能用于处理机核数量不多的系统中。通常总线上能连接的处理机核不能超过个。监听协议是应用广泛的cache一致性协议。多核处理机的核间通信与同步技术多核处理机片内的多个核心虽然各自执行自己的代码，但是不同核心间需要进行数据的共享和同步，因此多核处理机硬件结构必须支持高效的核间通信，片上通信结构的性能也将直接影响处理机的性能。当前主流的片上通信方式有三种：总线共享cache结构、交叉开关互连结构和片上网络结构。总线共享cache结构总线共享cache结构是指多核处理机核共享Lcache或Lcache，处理机片上核心、输入输出端口以及主存储器通过连接核心的总线进行通信。这种方式的优点是结构简单、易于设计实现、通信速度高，但缺点是总线结构的可扩展性较差，只适用于核心数较少的情况。采用总线共享结构的处理机有斯坦福大学研制的Hydra处理机、英特尔公司开发的酷睿Core处理机、IBM公司开发的Power处理机和Power处理机等。交叉开关互连结构总线采用分时复用的工作模式，因而在同一总线上同时只能有一个相互通信的过程。交叉开关crossbarswitch结构则能够有效提高数据交换的带宽。交叉开关是在传统电话交换机中沿用数十年的经典技术，它可以按照任意的次序把输入线路和输出线路连接起来。图所示为连接个处理机核和个内存模块的交叉开关结构。图中左侧的每条水平线和每条垂直线的交点都是可控的交叉节点，可以根据控制信号的状态打开或闭合。闭合状态的交叉节点使其连接的垂直线和水平线处于连通状态。图中黑色实心节点处于闭合状态，空心节点处于打开状态，图中右侧显示了放大的节点示意图。图中显示有三个开关处于闭合状态，这意味着同时可以有三个处理机核分别与不同的存储器模块进行信息交互。交叉开关网络是一种无阻塞的网络，这就意味着不会因为网络本身的限制导致处理机第章并行组织与结构核无法与内存模块建立连接。只要不存在存储器模块本身的冲突，图所示的交叉开关结构最多可以同时支持八个连接。与总线结构相比，交叉开关的优势是数据通道多、访问带宽更大，但缺点是交叉开关结构占用的片上面积也较大，因为nn的交叉开关需要n个交叉节点。而且随着核心数的增加，交叉开关结构的性能也会下降。因此这种方式也只适用中等规模的系统。AMD公司的速龙AthlonX双核处理机就是采用交叉开关来控制核心与外部通信的典型实例。片上网络结构片上网络networkonachip，NoC技术借鉴了并行计算机的互联网络，在单芯片上集成大量的计算资源以及连接这些资源的片上通信网络。每个处理机核心具有独立的处理单元及其私有的cache，并通过片上通信网络连接在一起，处理机核之间采用消息通信机制，用路由和分组交换技术替代传统的片上总线来完成通信任务，从而克服由总线互连所带来的各种瓶颈问题。片上网络与传统分布式计算机网络有很多相似之处，但限于片上资源有限，设计时要考虑更多的开销限制，针对延时、功耗、面积等性能标准进行优化设计，为实现高性能片上系统提供高效的通信支持。片上网络可以采用多种拓扑结构，如环形拓扑、网状拓扑、树状拓扑等。图显示了一种常用的二维网状网络DMesh片上网络结构。片上网络包括计算子系统和通信子系统两部分。计算子系统由处理单元processingelement，PE构成，完成计算任务，PE可以是处理机核心，也可以是各种专用功能的硬件部件或存储器阵列等。通信子系统由交换switch节点图中缩写为“S”及节点间的互连线路组成，负责连接PE，实现计算资源之间的高速通信。通信节点及其间的互连线所构成的网络就是片上通信网络。在二维网状网络结构中，每个PE与一个交换节点相连，而每个交换节点则与四个相邻的交换节点和一个PE相连，交换节点实现路由功能，并作为每个相邻的PE的网络接口。与总线结构和交叉开关互连结构相比，片上网络可以连接更多的计算节点，可靠性高，可扩展性强，功耗也更低。因此片上网络被认为是更加理想的大规模多核处理机核间互连技术。这种结构的缺点是硬件结构复杂，且软件改动较大。这三种互连结构还可以相互融合，例如，在整体结构上采用片上网络方式，而在局部选择总线或交叉开关结构，以实现性能与复杂度的平衡。由于多核处理机内的各个处理机核之间需要通过中断方式进行通信，所以多核处理机的中断处理方式也和单核有很大不同。多个处理机核内部的本地中断控制器和负责仲裁各核之间中断分配的全局中断控制器也需要封装在芯片内部。多核系统还需要解决的一个问题就是核之间的同步和互斥。多核处理机上运行的多个任务会竞争共享资源，因此需要操作系统和硬件配合提供核间同步机制与共享资源互斥访问机制。例如，多核系统硬件应提供“读修改写回”的原子操作或其他同步互斥机制，保证对共享资源的互斥访问。低功耗设计随着环保理念的普及和移动计算应用的推广，对处理机和整个计算机系统的功耗的关注度越来越高。低功耗设计是一个多层次的问题，需要同时在操作系统级、算法级、结构级、电路级等多个层次上综合考虑。在单处理机时代，低功耗技术主要在电路层次上进行低功耗设计，注重降低半导体电路的动态电能消耗和静态电能消耗。由于多核处理机在结构和实现上的特点，在多核处理机上可以采用异构结构设计、动态线程分派与转移技术等降低功耗。异构结构设计就是利用异构多核结构对片上资源进行优化配置，使处理机在提高性能的同时降低功耗。动态线程分派与转移技术则是在程序运行时动态地将某个核心上较高的负载转移到负载较小的核心上，从而使处理机在不降低处理性能的情况下，降低处理机功耗。当整体负载任务较少时，关闭某些核心或降低其处理机频率也可以使整个系统功耗降低。多核软件设计虽然多核技术与多处理机有许多相似之处，但二者之间的差别导致在许多情况下多处理机系统中的软件并不能直接拿到多核系统中运行。在多处理机系统中，各个处理机之间的界线是非常清晰的，每个处理机基本上都是独立运行的。而在多核系统中，资源的共享更加普遍。由于多核处理机内部有多个核心，因而如何在多个处理机核之间分配任务是必须要解决的关键问题。因此，支持多核的操作系统必须解决任务分配、任务调度、仲裁以及负载平衡等问题，必要时还需要支持多核之间的动态任务迁移。对于多核处理机，优化操作系统任务调度算法是保证效率的关键。当前关于多核的任务调度算法主要有全局队列调度和局部队列调度等算法。全局队列调度策略由操作系统维护一个全局的任务等待队列，当系统中有某个处理机核心空闲时，操作系统便从全局任务等待队列中选取就绪任务并开始在此核心上执行。这种调度策略的优点是处理机核心的利用率较高。局部队列调度策略是操作系统为每个处理机核心维护一个局部的任务等待队列，当系统中有某个处理机核心空闲时，便从该核心的任务等待队列中选取恰当的任务执行。局部队列调度策略的优点是任务基本上无需在多个处理机核心之间迁移，有利于提高处理机核心私有cache的命中率，缺点是处理机核心的利用率较低。目前，大多数支持多核的操作系统采用基于全局队列的任务调度算法。从某种程度上说，应用软件的设计是多核系统设计的难点。这是因为，人的自然思维模式是单任务串行化的，正所谓“一心不能二用”。而多核系统中运行的程序只有按照并行化的思想设计才可能最大限度地发挥多核处理机的潜能。并行编程困难的问题从并行计算机产生以来就存在，只是随着多核的主流化，问题更加突出了。虽然多处理机技术和多计算机技术已经应用多年，但当前的多核计算机系统与以往的并行计算机系统有很大的不同，以往的并行计算机系统都是应用在服务器或者超级计算中心等适合进行大型并行计算的领域，这些领域很容易发挥并行计算的优势。而现在的多核计算机系统则是应用到普通用户的各个层面，甚至是嵌入式系统中，在这些应用场景中实现软件并行编程，难度可能比服务器和超级计算中心更高。多核系统下的并行编程，必须充分发挥多核的线程级并行性，但是已有的编程语言不能完全适合多核环境，不能将多核的多线程并行潜力充分挖掘出来。为此，需要针对多核环境下对并行编程应用的要求，对现有的并行编程模式和编程语言如OpenMP、MPI、并行C等进行改进和优化，希望利用编程工具尽可能地帮助程序设计者发掘并行性。除了并行编程工具之外，另一个重要问题是并行设计思想。原来运行在单处理机上的众多应用程序并没有利用多核的性能潜力，其中很多应用程序的线程级加速潜力有限。改造这些依据串行化思想设计的程序不能单纯依赖并行编程工具，必须将其从单线程的编程模式改造为并行程序执行模式。所以对于这些应用程序，或者要重新编写并行代码，或者研发更加先进的面向多核结构的自动并行化工具，使得这些应用程序能在多核处理机系统中高效运行。平衡设计原则除了上面讨论的一些多核处理机的关键技术，多核系统设计还必须遵循一个重要的设计原则，就是平衡设计。与单处理机系统相比，多核计算机系统的设计复杂度大幅度提高。因为在解决某个方面问题的同时往往会带来其他方面的问题，所以多核处理机结构设计的重点不在于其中某一个细节采用什么复杂或性能表现较好的设计，而是在于整体设计目标。因此，在多核系统设计过程中必须仔细权衡对某些问题的解决方法，尽量采用简单、易于实现、成本低廉而且对整体性能影响不大的设计方案。平衡设计原则是指在芯片的复杂度、内部结构、性能、功耗、扩展性、部件成本等各个方面做一定的权衡，不能为了单纯地获得某一方面的性能提升而导致其他方面的问题。在设计过程中要坚持从整体结构的角度去权衡具体的结构问题。要得到在一个通常情况下，逻辑结构简单并且对大多数应用程序而言性能优良的处理机结构，为了整体目标往往要牺牲某些局部的最佳设计方案。CortexAMPCore处理机是ARM公司年月推出的ARMvA体系结构的多核产品。借助先进的多核处理机架构，CortexAMPCore处理机在高性能产品应用中的运行主频最高可达GHz，在提供强大的计算性能的同时，又保持着ARM特有的低功耗特性。该处理机有非常强的可扩展性scalability，支持单片至个处理机内核，可广泛应用在移动计算、高端数字家电、无线基站和企业级基础设施产品等领域。ARMCortexA处理机的整体结构图显示了ARMCortexAMPCore四核处理机的整体结构。每个核内部包含支持ARMvA体系结构的位CPU，采用超标量、可变长、乱序执行流水线结构。指令流水线为至级，其中级为按序执行，另外至级为乱序执行。CortexA处理机另外配备支持IEEE标准的向量浮点运算单元FPU，对半精度、单精度和双精度浮点算法中的浮点操作提供硬件支持。ARM处理机独有的NEON媒体处理引擎则为消费类多媒体应用提供灵活强大的加速功能。NEON是ARMCortexA系列处理机上的位单指令流多数据流SIMD体系结构扩展技术，媒体处理引擎扩展了CortexA处理机的浮点运算单元，支持整数和浮点向量的SIMD运算。NEON通用SIMD引擎旨在加速视频编解码、DD图形、游戏、音频和语音处理、图像处理、电话和声音合成等多媒体和信号处理算法，从而明显改善用户体验。CortexA还为每个处理机核配备了程序跟踪宏单元接口programtracemacrocellinterface，PTMIF，连接至多核调试和跟踪部件。CortexA的每个处理机核内包含KB的L指令cache和KB的L数据cache，Lcache专门针对性能和功耗进行了优化。在高性能应用中，可以通过可配置的KBMB的共享Lcache实现对内存的低延迟、高带宽访问。L指令cache支持奇偶校验功能，L数据cache和Lcache则支持可选的纠错编码errorcorrectioncode，ECC功能，可纠正单比特错误、检测双比特错误。处理机内还集成了三个独立的表项全相联L转换后援缓冲器TLB，分别用于取指令、读数据和写数据。每个处理机内还包含表项的路组相联LTLB。CortexA为主存提供了超大寻址空间，位物理地址可支持TB的主存空间。ARMCortexA的多核支持功能CortexA处理机利用被广泛认可的ARMMPCore多核技术，支持性能可扩展性和动态功耗控制功能。动态功耗控制当配备该处理机的设备需要高性能时，片内的所有处理机核可以全速运行，满足运算需求，但核间任务分担机制可以平衡各个核的工作负载，以保持尽可能低的功耗。当设备不需要满负荷运行时，四个处理机核中的任何一个都可以被动态关闭，以降低功耗。监听控制单元监听控制单元snoopcontrolunit，SCU提供系统一致性管理功能，负责管理cache之间以及cache与系统主存之间的互连和通信，并解决cache一致性问题、实现数据传输优先级仲裁以及其他相关的功能。除了处理机核，CortexAMPCore处理机内的其他系统加速器如FPU和NEON和支持非缓冲DMA访问的外设也能够利用监听控制单元提供的支持，以便提高系统级的性能并降低功耗。监听控制单元提供的系统一致性管理功能还可降低在各个操作系统驱动程序中维持软件一致性的软件复杂度。加速器一致性端口加速器一致性端口是监听控制单元上提供的支持AMBAAXI高级可扩展接口，ARM推出的第四代AMBA接口规范规范的从设备接口，能够让主设备直接连接到CortexA处理机。该接口支持所有标准读操作和写操作，而不需要特别考虑一致性问题。不过，针对主存一致区域的任何读操作都必须首先与监听控制单元交互，以确认被访问的信息是否已存储在Lcache中。任何写操作也将首先由监听控制单元进行一致性处理，然后才提交给存储系统并可在Lcache中分配空间，从而消除直接写入片外主存空间对功耗和性能的影响。通用中断控制器标准化和结构化的通用中断控制器可以灵活地支持处理机核间通信功能，实现系统中断的优先级仲裁及其在处理机核之间的分配。中断控制器最多支持个独立中断源。在软件控制下，每个中断均可在处理机核之间调配，进行硬件优先级排队。年月，英特尔在北京发布了多款基于IvyBridge简称IVB微架构microarchitecture的第三代智能酷睿Corei系列处理机，是当时业界制造工艺最为先进的处理机。年推出的采用nm半导体工艺的第二代智能酷睿处理机微架构SandyBridge处理机实现了处理机核、图形核心、视频引擎的单芯片封装。与SandyBridge简称SNB相比，IvyBridge对处理机架构没有做太大调整，但采用更加先进的nm制造工艺，并结合D晶体管技术，在大幅度提高晶体管密度的同时，处理机片上的图形核心的执行单元的数量翻一番，核芯显卡等部分性能有了一倍以上的提升。制造工艺的改进带来更小的核心面积、更低的功耗以及更加容易控制的发热量。酷睿多核处理机的整体结构IvyBridge微架构处理机由处理核心、三级cache、图形核心、内存控制器、系统助手systemagent、显示控制器、显示接口、PCIEIO控制器、DMI总线控制器等众多模块整合而成。IvyBridge微架构处理机采用模块化设计，有很强的可扩展性，支持多种不同主处理机核心数、不同性能的图形核心和cache容量的组合配置。从SandyBridge微架构开始，每个处理机内部处理除了中央处理机核之外，还集成了图形处理单元GPU核。这种与中央处理机封装在同一芯片上的图形处理单元又称为核芯显卡。SandyBridge和IvyBridge处理机上的处理机核和图形处理核采用完全融合的方式，在同一块晶圆中分别划分出CPU区域和GPU区域，CPU和GPU各自承担数据处理与图形处理任务。这种整合设计大大降低了处理机核、图形处理核、内存及内存控制器间的数据周转时间，可有效提升处理效能并大幅降低芯片组的整体功耗。在IvyBridge系列处理机中包含了两种集成GPU核：GT和GT。GT有个执行单元executionunit，EU和个算术逻辑单元ALU及一个纹理单元。GT有个执行单元、个ALU和个纹理单元。处理机内的各个CPU核之外还集成了最后一级cachelastlevelCache，LLC，即与主存储器直接相连的Lcache。目前发布的IvyBridge微架构有种设计版本：个中央处理机核心MB缓存GT图形核心；个中央处理机核心MB缓存GT图形核心；个中央处理机核心MB缓存GT图形核心；个中央处理机核心MB缓存GT图形核心。图ad分别显示了IvyBridge微架构支持的四种配置。酷睿多核处理机的环形总线图显示了IvyBridge四核处理机的完整体系结构。图中可以看出，IvyBridge微架构使用全新的环形总线ringbus结构连接各个CPU核、最后一级cache、图形处理单元GPU以及系统助手等模块。系统助手从功能上类似以前的北桥芯片，但包含了更为丰富的功能，包括集成内存控制器、支持条PCIE通道的PCIE控制器、显示控制器、电源控制单元PCU以及DMI总线英特尔开发用于连接主板南北桥的总线的IO接口等。环形总线由四条独立的环组成，分别是数据环dataring、请求环requestring、响应环acknowledgering和监听环snoopring。借助于环形总线，CPU与GPU可以共享LLCcache，从而大幅度提升GPU的性能。在环形总线上分布着多个环节点ringstop。环节点在每个CPU核、GPU核或最后一级cache上有两个连接点。在以往的产品中，多个核心共享一个最后一级cache，核心需要访问cache时必须先经过流水线发送请求，再进行优先级排队后才能进行。环形总线则可以大大减少核心访问最后一级cache的时间延迟。环形总线将最后一级cache分割成了若干部分，环形总线上的每个节点与其相邻的另两个节点采用点到点的连接方式，故环形总线是由多个子环组成的。借助于每个环节点，核心可以快速访问最后一级cache。又由于每个核心与最后一级cache之间可以实现并行访问，使得整体带宽可以显著提升。为了满足人类社会对计算性能的无止境需求，处理机内部的核心数量不断增加。当处理机内的核心的数量超过个时，称为众核manycore处理机。年，英特尔公司发布了基于英特尔集成众核manyintegratedcore，MIC架构的至强融核XEONphi产品。英特尔集成众核处理机可作为中央处理机的协处理机工作，可通过PCIE总线连接到配置英特尔至强XEON处理机的主机上，是高度优化、高度并行的协处理机，其运算性能超过每秒一百万亿次浮点双精度持续计算。至强融核使用开源Linux操作系统和通用源代码，可运行完整的应用程序，用于高度并行的计算密集型负荷，采用和至强处理机一致的通用编程模型与软件工具。至强处理机与一颗或多颗至强融核处理机构成异构多处理机架构，而至强融核本身则在单芯片内集成了个处理核心向量IA内核。图显示了至强融核众核处理机的微架构。处理机片上环形互连总线连接众多的计算核心、个支持GDDR的存储器控制器MC和个PCIE终端逻辑单元PCIeclientlogic。每个计算核心支持四个硬件线程，支持U、V两条七级指令流水线，双指令发射、按序执行，故每个时钟周期可以执行两条指令。计算核心通过环形总线接口CRI与互连总线相连。环形总线接口由Lcache和分布式标签目录tagdirectoryTD组成，后者为每个核心的Lcache建立标识目录副本，从而全局监视所有核心的Lcache，确保cache一致性。虽然至强融核处理机的每个计算核心的主频只有GHz，处理能力不算强大，但在运行高性能计算应用时，可以将高度并行的计算任务分解成更小的子任务，采用SIMD方式分布到众多核心中并行运行，而高速的至强处理机主机上则可运行最低限度的串行代码。依靠众核架构，系统能够获得额外的性能提升。龙芯Loongson号是中国科学院计算技术研究所研发的国产多核处理机系列产品，集高性能、低成本和低功耗于一身，主要面向服务器和高性能计算应用。龙芯号单芯片内集成多个高性能位超标量通用处理机核以及大容量Lcache，并通过高速IO接口实现多芯片互连，以组成更大规模的系统。龙芯号尤其可以满足国家安全需求。首台采用龙芯A处理机的万亿次高性能计算机KD于年月通过鉴定，实现了我国高性能计算机国产化的重大突破。龙芯A处理机的整体结构龙芯A是龙芯号多核处理机系列的第一款产品，每个处理机芯片集成颗位的四发射超标量GS高性能处理机核，最高工作主频为GHz。片内集成MB的分体共享Lcache由个体模块组成，每个体模块容量为MB。处理机内部通过目录协议维护多核及IODMA访问的cache一致性。处理机芯片内还集成了DDRDDR存储器控制器、HyperTransportHT控制器、PCIXPCI总线控制器、LPC、UART、SPI等外围接口部件。图显示了龙芯A四核处理机的整体结构。每个处理机有两级AXI交叉开关。第一级互连采用的AXI交叉开关XSwitch，连接P、P、P和P四个处理机核心作为主设备，统一编址的S、S、S和S四个Lcache模块作为从设备，以及两个IO端口每个端口使用一个主端口和一个从端口。每个IO端口通过一个DMA控制器连接一个位的HT控制器每个位的HT端口可以拆分成两个位的HT端口使用。第二级互连采用的交叉开关XSwitch，连接四个Lcache第章并行组织与结构模块、两个DDR存储器控制器MC和IO接口包括PCI、LPC、SPI等以及芯片内部的控制寄存器模块。两级互连开关都采用读写分离的数据通道，数据通道宽度为位，工作频率与处理机核相同，用于提供高速的片上数据传输。龙芯号的GS处理机核心GS是一款实现位MIPS指令系统及龙芯扩展指令系统的通用RISC处理机IP核。GS有两个定点运算部件、两个浮点运算部件和一个访存部件。每个浮点部件都可以全流水地执行位双精度浮点乘加操作。GS的指令流水线在每个时钟周期取四条指令进行译码，并且动态地发射到五个全流水的功能部件中。指令按序发射，乱序执行。GS的基本结构如图所示。GS的基本流水线包括取指、预译码、译码、寄存器重命名、调度、发射、读寄存器、执行、提交等级，各个流水级的功能如下。取指流水级：根据程序计数器PC的值访问指令cache和指令TLB，如果指令cache和指令TLB都命中，则把四条新的指令取到指令寄存器IR中。预译码流水级：主要对转移指令进行译码并预测跳转的方向。译码流水级：把IR中的四条指令转换成GS内部指令格式送往寄存器重命名模块。寄存器重命名流水级：为逻辑目标寄存器分配新的物理寄存器，并将逻辑源寄存器映射到最近分配给该逻辑寄存器的物理寄存器。调度流水级：将重命名的指令分配到定点或浮点保留站中等待执行，同时送到重排序队列中用于执行后的顺序提交；此外，转移指令和访存指令还分别被送往转移队列和访存队列。发射流水级：从定点或浮点保留站中为每个功能部件选出一条所有操作数都准备好的指令；在重命名时操作数没准备好的指令将等待其操作数准备好。读寄存器流水级：为发射的指令从物理寄存器堆中读取相应的源操作数送到相应的功能部件。执行流水级：根据指令的类型执行指令并把计算结果写回寄存器堆。提交流水级：按照重排序队列记录的指令顺序提交已经执行完的指令，GS最多每拍可以提交四条指令。GS的Lcache由KB的指令cache和KB的数据cache组成，均采用四路组相联结构。GS的TLB有项，采用全相联结构。GS支持位的访存操作，其虚地址和物理地址均为位。龙芯A处理机的互连结构龙芯A采用可扩展的互连结构，片内二维Mesh网络利用AXI交叉开关进行片内核间互连，片间通过HT接口进行可伸缩互连，构建多处理机系统。图显示了四颗龙芯A处理机构成的Mesh网络结构。系统由个处理机核心构成。全系统统一编址，硬件自动维护各处理机间的数据一致性。互连系统的物理实现对软件透明，不同配置的系统可以运行相同的操作系统。本章小结并行性是指计算机系统具有同时进行运算或操作的特性，它包括同时性两个以上事件在同一时刻发生与并发性两个以上事件在同一时间间隔内发生两种含义。并行性的种技术是：时间并行时间重叠；空间并行资源重复；时间并行空间并行；资源共享软件方法。Flynn将计算机体系结构分为SISD、SIMD、MISD和MIMD四种类型。虽然MISD没有实际机器，但是四种类型的分类方法确实纲目清晰，有利于认识计算机系统的总体结构。传统单处理机依靠超标量技术和超长指令字技术提高指令级并行性，而多线程技术和超线程技术则把重点放在线程级并行性上，在处理机内部增加少量部件，将一个物理处理机模拟成多个逻辑处理机，从而减少访存延迟造成的执行部件浪费，提高处理机内部资源的使用率。多处理机属于MIMD结构，是传统上为提高作业级或任务级并行性所采用的并行体系结构。多处理机系统由多台独立的处理机组成，通过通信网络或共享存储器进行通信，共同完成处理任务。SMP是多处理机的常见形式，组成SMP的每台处理机的能力都完全相同。多核处理机在一个处理机芯片内集成多个完整的计算引擎内核，通过开发程序内的线程级或进程级并行性提高性能。多核处理机具有高并行性、高通信效率、高资源利用率、低功耗、低设计复杂度、低成本等优势。可以根据多个核心的物理特征把多核系统分为同构多核和异构多核，也可以在逻辑上把多核系统分为SMP结构和AMP结构。SMP向上提供了一个完整的运行平台，上层应用程序不需要意识到多核的存在，而AMP必须由应用程序来对各个核心分配任务。多核系统必须解决核间通信、cache一致性等诸多问题。。计算机的分类电子计算机从总体上来说分为两大类：电子模拟计算机特点是数值由连续量来表示，运算过程也是连续的。电子数字计算机主要特点是按位运算，并且不连续地跳动计算。年完成的我国自行研制的模拟计算机红旗，慈云桂年，我国自行设计的第一台电子数字计算机机中科院计算机夏培肃领导研制她也是我国计算机事业的奠基者现在计算机中的一些术语和专业名词都是她翻译的。中国计算机之母计算机的分类根据性能、经济性和适应性，可以划分为两类：专用计算机：专用机是最有效、最经济和最快速的计算机，但是它的适应性很差。通用计算机：通用计算机适应性很大，但是牺牲了效率、速度和经济性。通用计算机分类可以分为：超级计算机大型机服务器工作站微型机单片机区别在于：体积、简易性、功耗、性能指标、数据存储容量、指令系统规模和机器价格等计算机发展简史计算机的五代变化年，电子管计算机：数据处理年，晶体管计算机：工业控制年，中小规模集成电路计算机：小型计算机年，大规模和超大规模集成电路计算机：微型计算机年至今，甚大规模集成电路计算机：单片机半导体存储器的发展世纪年代，所有计算机存储器都是由微小的铁磁体环构成年，仙童半导体公司生产出了第一个较大容量半导体存储器从年起，半导体存储器经历了若干代：单个芯片KBMBGB。其中KMKGMbit表示个二进制位，Bbit规范的二进制位计数：KiMiGi微处理器的发展年Intel公司开发出。年出现的，这是第一个位微处理器年出现了，这是第一个通用微处理器。微处理器的发展世纪年代末出现通用位微处理器Intel于年推出了位微处理器。到现在的位处理器和多核处理器我国计算机技术的发展年起步，年第一台型通用计算机年来相继研究出了第二代，第三代计算机。年代研究出每秒亿次的巨型机，银河III曙光等。年月，第一台实现中文化系统、并量产的国产微机长城CH正式研发成功。在高性能计算，并行计算上已紧跟国际先进水平，但计算机的核心部件CPU技术还远远落后。微处理器的发展微处理器一般称为CPU：CentralProcessUnit目前CPU芯片主要设计生产商Intel：酷睿、奔腾、赛扬、至强！AMD：速龙、闪龙、皓龙、APU天津海光VIA：C、C上海兆芯IBM：苏州国芯龙芯：嵌入式、桌面、专用计算机ARM：三星、高通、华为海思、华为鲲鹏微处理器的发展龙芯属于MIPS架构（LoongArch）上海兆芯属于X架构华为麒麟鲲鹏属于ARM架构阿里平头哥属于RISCV架构中国有着全球数量最多的芯片设计公司展讯、寒武纪等小米，百度、VIVO、OPPO都在布局芯片还未形成规模效益、人才缺口非常大通用计算机分类可以分为：超级计算机大型机服务器工作站微型机单片机区别在于：体积、简易性、功耗、性能指标、数据存储容量、指令系统规模和机器价格等超级计算机Top（）、Frontier美处理器核：；峰值PFlops；AMD处理器、Fugaku日处理器核：；峰值PFlops；ARM处理器、LUMI芬兰处理器核：；峰值PFlops；AMD处理器NVIDIATeslaV、神威太湖之光处理器核：；峰值PFlops；神威处理器、天河A处理器核：；峰值PFlops；Intel国产Matrix加速卡超级计算机Top（）、Frontier美处理器核：；峰值EFlops；AMD处理器、Aurora美处理器核：；峰值EFlops；Intel处理器、Eagle美处理器核：；峰值PFlops；Intel处理器NVIDIAH、Fugaku日处理器核：；峰值PFlops；ARM处理器、LUMI芬兰处理器核：；峰值PFlops；AMD处理器NVIDIATeslaVTop组织在最新发布的报告中指出，中国已决定不再参加Top的HPL基准测试。日本Fugaku富岳富士通和日本理化学研究所共同研制拥有超过个核心，内存TB富士通AFX处理器，ARMvA，配备GBHBM内存，带宽TBs，浮点性能TFLOPS，使用台积电nm工艺生产，晶体管数量亿AFX包含个计算核心和个辅助核心，没有GPU加速器，封装HBM内存。神威太湖之光年TOP第一，年第四拥有个计算节点，内存PB使用了国产众核芯片申威采用nm制程工艺，主频GHz拥有个核心，浮点峰值达到TFlops位计算机的性能指标计算机的性能指标CPU执行时间：表示一段程序执行过程中所占用的CPU时间。CPU时间执行某段程序所使用的CPU周期数CPU时钟周期CPI：CyclePerInstruction执行一条指令所需的平均周期数执行某段程序所使用的CPU周期数程序总指令数MIPS：MillionInstructionsPerSecond每秒百万指令数MIPS程序总指令数程序执行时间计算机的性能指标CPU性能公式CPU性能公式CPU性能公式例用一台MHz处理机执行标准测试程序，它包含的混合指令数和相应所需的平均时钟周期如下表所示：解计算机的硬件硬件组成要素控制器运算器存储器输入设备输出设备冯诺依曼型计算机VonNeumann计算机的硬件冯诺依曼型计算机五大组成部分二进制表示存储程序程序控制冯诺依曼架构运算器ALUArithmeticLogicUnit（算术逻辑运算单元）算术运算和逻辑运算在计算机中参与运算的数是二进制运算器的长度一般是、、或位计算机的字长存储器存储数据和程序运算开始前，必须先将程序和数据存入存储器（存储程序思想）一个存储单元中存入一个二进制数据串。存储器按存储单元组织，存储器中有大量的存储单元。为了方便查找，每个存储单元都被分配一个地址。通常，存储器都是按地址查找，线性编址。存储器存储器的容量一般都按字节计算存储器单位：ByteKiBKiBMiBMiBGiBGiBTiB分类：内存、外存存储器内存有两种操作：写入：数据存入存储器写入新数据后，会“覆盖”旧数据读出：从存储器取出数据读出并不破坏存取器中的数据可以从同一存储单元中反复的读出同一数据控制器控制器是计算机中发号施令的部件控制计算机的各部件有条不紊地工作任务：从内存中取出指令加以分析然后执行某种操作（指令控制）一条指令（instruction）完成一种操作算术运算或者逻辑运算、传输数据等将复杂的问题简化为一系列简单操作每个简单操作用一条指令完成，一系列指令的有序集合叫做程序（program）控制器指令的形式指令的内容由两部分组成，即操作的性质和操作数的地址。每条指令应当明确告诉控制器，从存储器的哪个单元取数，并进行何种操作。指令系统：计算机的全部指令集合。范例模型计算机存储器运算器和控制器存储单元模型计算机存储器运算器和控制器范例范例存储器中的机器语言程序指令集构造机器指令将汉语表达转为二进制表示汇编源程序同一个问题在不同实现的计算机上解决，步骤是不同的。编译器要考虑两个问题：数据存储数据处理模型计算机存储器表计算yaxbc的程序表指令的操作码定义指令的形式数码化的指令和数据都放入存储器，两种方式：冯诺依曼结构（VonNeumannArchitecture）：存储器的任何位置既可以存放数据也可以存放指令哈佛结构（HarvardArchitecture）：指令和数据存储器物理上独立冯诺依曼结构哈佛结构指令的形式存储程序：将程序（指令序列）和数据存放到存储器中程序控制：控制器依据存储的程序来全机协调地计算任务控制器执行程序的过程取指令执行（）A取指令执行BABA取指令执行BABA取指令执行BABA取指令执行A取指令执行StopSTOLADMULADDSUBSLT控制器的基本任务按照特定的顺序一条接着一条取指令、执行指令。取指令执行（）A取指令执行BABA取指令执行BABA取指令执行BABA取指令执行A取指令执行Stop控制器的基本任务每取出一条指令，控制器中的指令计数器就加，下一条指令做好准备指令计数器ProgramcounterPC保存指令的地址指令要顺序存放每条指令在存储器都有地址存储器中的机器语言程序指令地址控制器的基本任务时间因素取指周期：从存储器中取指令到控制器的时间执行周期：在控制器中执行指令的时间时间t（）指令流和数据流如何区分内存输出的是指令流？还是数据流？根据不同的时间取指周期中从内存读出的信息流是指令流，它流向控制器执行周期中从内存读出的信息流是数据流，它由内存流向运算器。控制器其他任务：保证指令按规定序列自动连续地执行。对各种异常情况及时响应和处理。控制器向计算机各功能部件提供每一时刻协同运行所需要的控制信号适配器与输入输出设备输入设备：把人们所熟悉的信息形式变换为二进制信息形式输出设备：把计算机处理结果变换为人或其他机器设备所能接收和识别的信息形式总线：构成计算机系统的骨架，是多个系统部件之间进行数据传送的公共通路。计算机的软件软件的组成与分类软件的发展演变编程语言的发展手编程序：机器语言程序，手工编译二进制码汇编程序：符号语言程序，汇编程序汇编可执行程序目的程序机器语言可执行程序目的程序汇编语言手工编写汇编源程序汇编程序翻译软件的发展演变编程语言的发展高级程序：算法语言高级语言编译系统：把源程序全部翻译成目的程序，然后机器执行目的程序解释系统：逐一翻译源程序语句并立即执行该语句。源程序可执行程序目标程序编辑程序汇编或编译程序联接程序高级语言软件的发展演变系统软件的发展操作系统：用来管理计算机软硬件资源和自动用户作业调度，而使多个用户能有效地共用一套计算机系统。数据库管理系统：数据库和数据库管理软件分布式系统软件计算机系统的层次结构计算机是一个硬、软件结合而成的整体。它通常由五级组成。不同的计算机使用者看到的计算机的形式是不同的计算机系统的层次结构高级语言级：方便用户编写应用程序，由各种高级语言编译程序支持和执行。汇编语言级：提供一种符号形式语言，以便能够精确地操作控制硬件。操作系统级：它由操作系统程序实现，管理所有的硬件资源计算机系统的层次结构一般机器级：由微程序解释机器指令系统。微程序设计级：实际执行指令、处理数据的数字电路。软件与硬件逻辑等价性随着大规模集成电路技术的发展任何操作可以由软件来实现，也可以由硬件来实现；采用哪种方案？应综合考虑各个因素：价格、速度、可靠性、存储容量、变更周期固件：介于传统的软件和硬件间的实体。功能软件形态硬件实现软件写入ROM固化第一章小结计算机的分类冯诺依曼型计算机特点计算机硬件的基本组成部分五大部件运算器、控制器、存储器计算机软件计算机的性能指标计算机层次结构返回作业P：、、、、、一段C程序intmainintabintcdcabdab在线编程网站httpsgccgodboltorgX架构的指令序列X架构的指令序列单片机架构的指令序列SPARCV架构的指令序列人工智能四层架构AI不同计算任务需要不同芯片GPU与AI模型训练FPGA：分布式可定制ASIC：实现性能和功耗均衡国产服务器CPU自动驾驶芯片指标AI算力TOPS根据地平线数据，L级自动驾驶的算力需求为TOPS，L级自动驾驶算力需求为TOPSL级自动驾驶算力需求为TOPS以上，L级自动驾驶算力需求为TOPS以上。算力单位TOPSTOPSTeraOperationsPerSecond，表示每秒执行万亿次运算，用于衡量自动驾驶芯片的AI算力。TOPS描述芯片MACMultiplyAccumulate，乘积累加运算的运算能力，并没有指定数据类型，具体算力评估需要结合数据类型及精度。MAC运算包括相乘和相加aabc。对于卷积、点积、矩阵等运算而言，MAC指令可以大幅提高运算效率。TOPS计算公式：理论峰值MAC矩阵行MAC矩阵列主频现代GPU集群极度耗电。GPT在训练过程中使用了约GWh的能量。相当于辆普通汽车环绕地球次。谷歌表示一次搜索使用瓦时，而与谷歌搜索相比，GoogleGPT使用的能量大约是谷歌搜索的四倍。SM（StreamingMultiprocessors）称为流式多处理器，是NVIDIAGPU的基本构建模块。每个SM包含CUDA核心（用于通用计算的处理单元）、张量核心（专门用于AI工作负载）以及其他用于图形和计算操作的组件。SM具有高度并行性，使GPU能够同时执行许多操作。主芯片上共有个SM。但它们的参数产量约为，这意味着我们可以使用大约个。在生产过程中发生故障的部分会被关闭。此外，如果看一下主芯片的尺寸，那是一个相当大的芯片，非常接近现代工厂机器的限制。。HBM（高带宽内存）HBM是一种具有高带宽接口的堆叠内存类型。与传统的GDDR内存相比，HBM提供了显著更多的带宽，可以实现GPU和内存之间的数据传输速率更快，这对于对带宽需求高的任务（如深度学习和大数据分析）特别有益。如果查看内存控制器，您会看到有个，但NVIDIA只启用了其中的个。第二章运算方法和运算器数据与文字的表示方法定点加法、减法运算定点乘法运算定点除法运算定点运算器的组成浮点运算方法与浮点运算器返回数据与文字的表示方法数据格式数的机器码表示字符与字符串的表示方法汉字的表示方法校验码数据与文字的表示方法两大类数据：符号数据：非数字符号的表示（字符、汉字、图形等）数值数据：数字数据的表示方式（定点、浮点）编码：用少量、简单的基本符号，选择合适的规则表示尽量多的信息，同时利于信息处理（速度、方便）ASCII、GB、UnicodeMP、FLAC、JPG、H、H等二进制与易经系统的提出二进制观点的是德国的数学家和哲学家莱布尼茨据说他根据易经发明了二进制太极生两仪，两仪生四象，四象生八卦两仪：阴和阳易经八卦数据格式计算机数据的表示方式，考虑几个因素：数的类型（小数、整数、实数、复数）数值范围数值精度存储、处理、传送的硬件代价软件兼容性数据格式十进制转二进制整数部分除取余小数部分乘取整除尽为止低高求得位数满足要求为止进制转换的简单运算方法的二进制表示大数的转换方法，记住几个常用的的幂KiloMegaGiga吉Tera太更大的单位是多少？PetaExaZettaYotta千、兆、吉、太、拍、艾、泽、尧分、厘、毫、微、纳进制转换的简单运算方法几个简化运算的例子计算机中使用的计量单位我国传统文化中的数量单位数据格式计算机中数值数据表示格式：定点表示：小数点位置固定浮点表示：小数点位置不固定定点格式容许的数值范围有限（字长一定），硬件简单。浮点格式容许的数值范围很大，硬件复杂。定点数的表示方法约定数据的小数点位置固定小数点不使用记号””表示将数据表示成纯小数或纯整数定点数表示：带符号数不带符号数运算器利用寄存器存储数据寄存器中每个位称bitBinaryDigit最高有效位MSB、最低有效位LSB定点数的表示方法xnxnxnxx数的表示范围符号：代表正号代表负号量值小数点位于符号位之后，不需专门存放位置带符号定点纯小数定点纯整数xnxnxnxxMSB为符号量值小数点固定于LSB之后例：字长位X纯整数：X正数，符号位取Y纯整数：Y（原码）负数，符号位取XY符号位取纯小数：X符号位取纯小数：X（原码）定点数的表示方法纯整数的表示范围n位定点数的表示方法受字长限制，表示数的范围有限定点小数表示的精度有限目前计算机中采用定点数表示纯整数，因此将定点数表示的运算简称为整数运算。浮点数的表示方法浮点数的表示方法指数e基数R尾数M浮点数的表示方法一个浮点数由阶码和尾数及其符号位组成尾数M：用定点小数表示，表明有效数字的位数，决定了浮点数的表示精度阶码E：用定点整数表示，指明小数点的位置，决定了浮点数的表示范围IEEE标准IEEE位单精度浮点数标准浮点数的规格化例：REM对于二进制数那么，计算机中究竟采用哪种数据形式？多种数据形式规格化表示法IEEE标准规格化：同一真值浮点数具有唯一的表示形式规格化尾数应为如下形式：xxxxxxxxx整数位的属于隐藏位，在实际存储时，尾数域只存储小数点后面的数值。规格化表示：当尾数不为，尾数左移位（小数点右移位），同时阶码减（左规）尾数右移位（小数点左移位），同时阶码加（右规）IEEE标准一个规格化的位浮点数x的真值表示为xSME位的浮点数（双精度浮点数）符号位位，阶码域位，尾数域位，指数偏移值是。规格化的位浮点数x的真值为：xSME浮点数的表示方法例若浮点数x的标准存储格式为，求其浮点数的十进制数值。解：将进制数展开后，可得二制数格式为指数e阶码包括隐藏位的尾数M于是xSMe浮点数的表示方法例将数转换成标准的位浮点数的二进制存储格式（进制表示）。解首先分别将整数和分数部分转换成二进制数：规格化，尾数右移位e，于是得到：SEM最后得到位浮点数的二进制存储格式为：AC真值的机器数（机器零）阶码E，尾数M正：S，负：S非规格化浮点数：阶码E，尾数M规格化浮点数：阶码E（）无穷大的机器数阶码E全（），尾数M：S，：SNaN（notanumber，不是一个数）阶码E全（），尾数M用来通知异常情况IEEE标准位单精度浮点数单精度IEEE浮点数区间EEEMMMM规格化浮点数的范围正或负正负无穷大NaN非规格化数浮点数的表示范围浮点数所表示的范围远比定点数大一般计算机中同时采用定点、浮点表示。单片机中多采用定点表示。IEEE单精度在线转换httpswwwhschmidtnetFloatConverterIEEEhtml十进制数串的表示方法有时十进制数在计算机中需要以十进制的方式进行运算，需要对十进制进行编码二十进制编码（BCD码）每个十进制符号由位二进制数表示有权码名称表示每一位的位权（、、、）每位的数码与相应的位权相乘，再求和，得到它所代表的十进制数码表示：数的机器码表示一般书写表示的数，称为真值计算机中表示的数，称为机器数在计算机中，为了妥善的处理好符号位问题，主要是负数的运算问题，引入种表示方法：原码、补码、反码、移码。原码表示法定点整数的原码形式为xnxnxx字长位：X，则X原X，则X原使用原码有两种表达形式原原原码表示法特点：表示简单，易于同真值之间进行转换，实现乘除运算简单。进行减法运算麻烦。要比较绝对值的大小，然后绝对值大的数减去绝对值小数，最后给结果选择符号。为了解决这些矛盾，找到了补码表示法。补码表示法补码表示法反码表示法定义：正数的反码表示与原码相同负数的反码符号位不变，数值位是将原码的数值位按位取反。电路很容易实现，触发器的输出正负两值。反码表示法反码表示有正和负之分反反负整数补码：反码加解决了求补码还要减法的问题补负数求补负数原码“符号位不变，数值位取反加”得对应补码负数补码再求补得到负数原码补码：原码：求反移码表示法传统定义和标准浮点数阶码的定义不同移码和补码尾数相同，符号位相反例设机器字长位定点表示尾数位数符位问：定点原码整数表示时，最大正数是多少最小负数是多少解定点原码整数表示最大正数值最小负数值数的机器码表示正数的原码、反码、补码等于真值，只有负数才分别有不同的表示方法采用补码，减法运算可以用加法运算实现，节省硬件，目前机器中广泛采用补码表示法有些机器用原码进行存储和传送，运算时改用补码移码表示法主要用于表示浮点数的阶码，可以直接比较大小。表示范围和补码相同，只有最高位相反同一代码的不同含义一个代码，采用不同编码，其数值不一样计算机内一个二进制数：不同的含义无符号二进制数：BCD码：有符号整数的原码：有符号整数的反码：有符号整数的补码：字符和字符串的表示方法非数值数据通常指的是字符、字符串、图形符号、汉字等数据必须按照一定的规则用一组二进制编码来表示ASCII美国国家标准局（ANSI）制定的ASCII（AmericanStandardCodeforInformationInterchange，美国信息交换标准码）是现今最为通用的单字节编码系统主要用于显示现代英文字母和符号ASCII码用位二进制编码表示一个字符，总共可以表示个字符计算机用一个字节来存放一个ASCII字符，最高位固定为IBMPC键盘keyboardWindows格式汉字的表示方法汉字的输入编码用西文标准键盘上对汉字进行编码：数字编码：是用数字串代表一个汉字的输入如区位码等。最大优点是无重码但难记字音编码：以汉语拼音作为编码基础。简单易学但重码很高有微软拼音、智能ABC输入法等。字形编码法：将汉字的字形信息分解归类而给出的编码。具有重码少的优点。常用的有表五笔字型、郑码等。音形编码法：音形编码吸取了音码和形码的优点，使编码规则简化重码少。常用的有全息码等。汉字的表示方法汉字内码汉字内码是汉字的机内代码。一般采用两个字节表示。为了与ASCII区别，汉字内码中两个字节的MSB规定为“”。汉字字符集编码查询httpswwwqqxiuzicnbianmazifujiphp汉字内码年，国标码字符集GB每个编码个字节，共收集常用简体汉字个年，BIG字符集称大五码，共收录个中文字，港台地区使用年，GBK字符集共收录汉字个，支持繁体中文、日韩汉字年，GB字符集收录了个汉字，覆盖中、日、朝鲜语和中国少数民族文字向下兼容GBK、GB年月日星期三Unicode码容纳全世界所有语言中任意一种符号为每种语言中的每个字符设定惟一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求UCSbyteUniversalCharacterSet，每个字符占用个字节，实际使用比较多UCS每个字符占用个字节，理论上可以表示个字符Unicode码为了解决Unicode的传输、存储问题，主要是网络传输，对Unicode进行二次编码UTF：UnicodeTransformationFormatUTF可变长格式对英文使用个字节，中文使用个字节来编码UTF拿个字节来表示字符字符编码查询httpswwwqqxiuzicnbianmazifujiphpChrome浏览器中打开的web页面，点击右键，选择“查看网页源代码”华电主页wwwncepueducn的编码记事本编码区别？汉字的表示方法汉字输出码为了能显示和打印汉字，必须先存储汉字的字形，这就是汉字字形码两类字形码：点阵字形和矢量字形汉字输出码点阵字形又称字模码每个字由mn个像素的位图表示，称mn点阵点阵中的每个点都只有两种状态表示有笔画，对应像素应置为字符颜色；表示无笔画，对应像素应置为背景颜色或不改变汉字的表示方法一个点阵字形（左图），一行用个字节描述，总供有行，它的信息量是个字节。一个点阵字形用个字节乘行组成，它的信息量是个字节。复原字形速度快，但缩放后的字形质量难以保证汉字的表示方法矢量字形通过数学方程来描述包含了字形边界上的关键点、连线的导数信息等在显示、打印时，要经过一系列的数学运算输出结果字体可以无限放大而不产生变形目前主流的矢量字体格式有种：Type，TrueType和OpenType校验码数据在存取和传送的过程中可能会发生错误产生错误的原因可能有很多种设备的临界工作状态外界高频干扰收发设备中的间歇性故障等为减少和避免错误提高硬件本身的可靠性对数据采用专门的逻辑电路进行编码，以检测错误，甚至校正错误校验码方法在每个字上添加一些校验位，用来确定字中出现错误的位置计算机中常用的检错或纠错技术奇偶校验ParityCheckCRC循环冗余校验CyclicRedundancyCheckHamming码，ECC校验若干位有效信息（如个字节）加上位校验位组成校验码奇校验：校验码中的个数为奇数偶校验：校验码中的个数为偶数奇偶校验码奇校验码设位信息码组为DDDDDDDD：若DD中有奇数个“”，则奇校验位奇校验位D奇DDDDDDDD读出数据时，将位校验码送入校验电路GDDDDDDDDD奇若G，则无错误若G，则传输出现错误例已知下表中左面一栏有个字节的数据。请分别用奇校验和偶校验进行编码填在右面栏。解假定最低一位为校验位，高位为数据位，列表如下：校验位的值取还是取，是由数据位中的个数决定的奇偶校验码奇偶校验码是一种最简单且应用广泛硬件成本很低可以检测出一位或奇数位错误，但不能确定出错位置，也不能检测出偶数位错误一位出错的概率比多位同时出错的概率要高得多常用于存储器读写检查或ASCII字符传送过程检查定点加法、减法运算补码加法补码减法溢出概念与检测方法基本的二进制加法减法器补码加法补补补证明补补补证明则或这种情况和第种情况一样把和的位置对调即得证。则相加两数都是负数则其和也一定是负数。补n补n补补nnnn补在模n意义下任意两数的补码之和等于该两数之和的补码。例设字长位用补码求解补补补补补所以例设字长位用补码求解补补补补补所以例设字长位用补码求。解补补补补补所以补码加法的特点，一是符号位要作为数的一部分参加运算二是符号位的进位要丢掉补码减法数用补码表示时，减法运算的公式为补补补补补只要证明补补上式即得证。现证明如下：补补补模n补补补又补补补补补补补将式与相加得补补补补补补补补补补补补故补补模n从补求补的法则：对补包括符号位“按位求反且加”，即可得到补。写成运算表达式，则为其中符号表示对补作包括符号位在内的求反操作例设字长位，已知求：补补补补。解补补补补补补例设字长位，求。解补补补补补补所以练习设字长位，求。解补补补补补补所以例求。解补补补补补两个正数相加的结果成为负数这显然是错误的。例求。解补补补补补两个负数相加的结果成为正数这同样是错误的。溢出的概念与检测方法溢出的概念与检测方法溢出的检测方法单符号位法和双符号位法双符号位法：用两个符号位表示一个数据，也称为“变形补码”两个符号位一样参与运算最高符号位产生的进位要丢弃溢出的概念与检测方法用双符号位法检测溢出结果的两个符号位一致则没有溢出如果两个符号位不一致则发生溢出判断溢出的逻辑表达式为VSfSf可以用异或门来实现溢出的概念与检测方法二、检验举例：求求结果出现了或的情况就为溢出例设字长位求。解补补补补补结果两个符号不同，表示溢出溢出的概念与检测方法、单符号位法其中Cf为符号位产生的进位C为最高有效位产生溢出检测VCfC基本的二进制加法减法器X补XnXnXY补YnYnYnn多位加法运算依赖于各位逐位相加的运算，所以先讨论一位全加器基本的二进制加法减法器半加器两个二进制位相加SiAiBiCiAiBi全加器的真值表与表达式SiAiBiCiCiAiBiBiCiCiAiAiBiAiBiCi输入加数Ai、Bi、低位进位输入Ci输出和Si，进位输出CiFA逻辑电路和框图FA（全加器）逻辑电路图延迟分析：设异或门延迟为T，与非门延迟为T对一位全加器FA来说，Si的时间延迟为T，Ci的时间延迟为T。FA框图位补码加法器FAFAFAFABBBBAAAACSCSSSCCC溢出符号位单符号法检测溢出只能完成补码加法加法器的改造FAFAFAFAAMSCSSSCCC溢出符号位BABABAB能完成补码加法和补码减法补补补补补补位补码加法器进位依次从地位传递高位，称为行波进位当M，加法A补B补运算；当M，减法A补B补转化成A补B补运算，异或。位补码加法器延迟分析：找出时延最长的路径BC为TTTTCC为TCC为TCC为T溢出为Tn位行波进位补码加法器总延迟：从C到溢出产生的延迟为nTTBCnTCCnT溢出nTnT加法器是算术运算电路的核心所有算术运算都基于加法器实现加法器不区分符号数与无符号数定点乘法运算采用软件实现乘法运算利用加法运算指令，编写实现乘法的循环子程序所需的硬件最少，但速度最慢采用硬件实现乘法运算串行乘法器被乘数每次和一位乘数相乘并行乘法器被乘数同时和乘数所有二进制位相乘硬件乘法器，需要乘法指令硬件增加新的功能需要提供必要的指令当前CPU支持的新指令原码并行乘法人工算法步骤设人工算法步骤设求部分积：从乘数y的最低位开始逐位与被乘数相乘（与运算）根据权重移位：每个部分积根据乘数的权相应左移部分积相加：部分积统统加起来得到乘积z（z的位数扩大一倍）。人工算法步骤求部分积：从乘数y的最低位开始逐位与被乘数相乘（与运算）根据权重移位：每个部分积根据乘数的权相应左移部分积相加：将移位后的部分积统统加起来便得到最后乘积z（z的位数扩大一倍）。计算机乘法的困难两大困难其一：两个n位数相乘，乘积为n位。部分积、乘积如何存储其二：只有两个操作数相加的加法器如何将n个部分积相加？设计高速并行乘法器的基本问题就在于缩短部分积的加法时间aaaaa两个位的二进制无符号数相乘乘数a和被乘数b都为位，乘积P为位阵列乘法器bbbbbababababababababababababababababababababab两个位的二进制无符号数相乘乘数a和被乘数b都为位，乘积P为位生成所有部分积ppababababababababababababababababababababab表示全加器斜线表示进位，竖线表示和pppababababababababababababababababababababab表示全加器斜线表示进位，竖线表示和pppababababababababababababababababpababababab表示全加器斜线表示进位，竖线表示和pppababababababababababababababababppababababab表示全加器斜线表示进位，竖线表示和pppababababababababababababababababpppababababab表示全加器斜线表示进位，竖线表示和pppababababababababababababababababppppababababab表示全加器斜线表示进位，竖线表示和pppababababababababababababababababpppppababababab表示全加器斜线表示进位，竖线表示和ppppababababababababababababababababppppppababababab表示全加器斜线表示进位，竖线表示和ppppababababababababababababababababppppppababababab个全加器斜线表示进位，竖线表示和表示全加器进位保留加法器行波进位加法器、不带符号的阵列乘法器不带符号阵列乘法器逻辑图、不带符号的阵列乘法器、带符号的阵列乘法器对于补码表示的乘数和被乘数在使用阵列乘法器前，需先将补码转换为原码求补电路E，求补E，直通输出求补电路、带符号的阵列乘法器求补器与原码阵列乘法器结合组成带符号的阵列乘法器共使用三个求补器。两个算前求补器：将操作数A和B变成正整数。算后求补器：输出结果的补码。、带符号的阵列乘法器原码补码定点除法运算商q原码除法运算原理设被除数，除数，模仿十进制除法运算，以手算方法求的过程如下：r被除数小于除数，不够减，商被除数低位补零，够减除数商r得余数r低位补零够减除数商r得余数r低位补零不够减除数商r余数r低位补零够减除数商r得余数r商q原码除法运算原理设被除数，除数，模仿十进制除法运算，以手算方法求的过程如下：原码除法运算原理二进制除法实质“被除数（余数）减除数，求新余数”人工算法：求商时从高位向低位逐位求，商符单独处理每次上商都是由心算来比较余数和除数的大小，确定商还是每做一次减法，总是保持余数不动，低位补，再减去右移后的除数。重复上一步骤，直到余数为，或商的位数满足要求原码除法运算原理原码除法运算原理补充：编码的移位机器数为正时，不论左移或右移，添补代码均为。负数原码在移位时符号位不变，其空位均添。负数反码在移位时符号位不变，其空位均添。负数补码在移位时，符号位不变，左移添，右移添补充：编码的移位实例：A，用位二进制表示，写出三种机器数左移一位、右移一位、左移两位和右移两位后的表示形式及其真值。例求。（恢复余数法计算）解补补被除数减余数为负q不够减，恢复余数加y右移位减余数为正q右移位减余数为负q不够减，恢复余数加右移位减余数为正q故得商qqqqq原码除法运算原理恢复余数法不恢复余数法（加减交替法）YN结束YNYN、不恢复余数的除法定点运算器的组成逻辑运算多功能算术逻辑运算单元ALU内部总线定点运算器的基本结构逻辑运算计算机中的逻辑运算，主要是指逻辑非、逻辑加、逻辑乘、逻辑异或四种基本运算。非运算：按位反逻辑加：按位或逻辑乘：按位与异或运算：又称“按位加”移位运算左移n位等于乘n右移n位等于除n移位和加法结合，实现乘（除）运算有符号数的移位称算术移位空出位补或无符号数的移位称逻辑移位空出位补移位运算算术移位有符号数的移位叫算术移位机器数为正时，不论左移或右移，添补代码均为。负数原码在移位时符号位不变，其空位均添。负数反码在移位时符号位不变，其空位均添。负数补码在移位时，符号位不变，左移添，右移添补充：编码的移位实例：A，用位二进制表示，写出三种机器数左移一位、右移一位、左移两位和右移两位后的表示形式及其真值。多功能算术逻辑运算单元ALU由全加器构成的加法器，可以实现补码的加法减法运算。问题：由于串行进位它的运算时间很长不能完成逻辑运算以加法器为核心的算术逻辑运算单元ALUArithmeticLogicUnit具有算术和逻辑运算的功能先行进位逻辑，能实现高速加法运算多功能算术逻辑运算单元ALU改变FA的输入端Ai和Bi来实现算术运算和逻辑运算功能。一位全加器FA将Ai和Bi输入一个函数发生器得到输出Xi和Yi，作为一位全加器的输入。位ALU的逻辑图与逻辑表达式控制参数多功能算术逻辑运算单元ALU可以处理种算术逻辑运算，每种运算只针对位二进制多功能算术逻辑运算单元ALU进一步化简得到下式代入全加器的求和与进位表达式，可得如下逻辑表达式多功能算术逻辑运算单元ALU多功能算术逻辑运算单元ALU多功能算术逻辑运算单元ALU位ALU个位ALU串行连接能进行位算术和逻辑运算进位信号太慢多功能算术逻辑运算单元ALU串行进位，速度慢CnCnCnCn对串行进位的改进串行改并行先行进位（CLACarryLookAhead）多功能算术逻辑运算单元ALUCnYYXYXXYXXXXXXXCn令GYYXYXXYXXXPXXXXGGeneration为进位发生函数PPropagation为进位传递函数增加P和G的目的在于实现多片ALU之间的先行进位CnGPCn逻辑电路图GYYXYXXYXXXPXXXX位ALU逻辑图函数发生器先行进位运算方式控制AB？功能多功能算术逻辑运算单元ALU片组成位ALU片内先行进位，片间串行进位多功能算术逻辑运算单元ALU片组成位ALUCGPCCGPCCGPCCGPCCnGPCnCnGPCnGGPPPCnCnGPCnGGPGPPPPPCnCnGPCnGGPGPPGPPPPPPPCnGPCnPPPPPGGGPGPPGPPP根据以上表达式实现的部件称为（组间先行进位产生器），与个配合使用的逻辑电路图位先行进位ALU片内先行进位，片间先行进位位ALU片片位先行进位系统片，片芯片组成多级先行进位内部总线将计算机各个部件之间的数据传送通路加以归并，组成总线结构任何一个时刻，总线上只能有一个来源的数据，数据源独占总线不同来源的信息在总线上分时传送只要数据源不撤销数据，该数据在总线上一直存在根据所在位置分类：内部总线：CPU内各部件的连线外部总线：CPU与存储器、IO系统之间的连线内部总线按总线的逻辑结构分：单向总线：信息只能向一个方向传送。传送地址信息或控制信息的总线双向总线：信息可以两个方向传送数据总线既可以发送数据，也可以接收数据。总线的基本电路是三态门逻辑、逻辑、高阻定点运算器的基本结构基本组成包括：ALU：核心部件乘除法器，组合逻辑电路数据存储部件：存放参与计算的数据及运算结果暂存器：只对硬件设计者可见通用寄存器：可以被软件设计者所访问内部总线：连接各个部件的通道定点运算器的基本结构一个二元运算需要两个操作数，产生一个结果操作数op操作数操作结果按照数据从存储部件传输到ALU的方式将ALU分为三种结构单总线，双总线，三总线、单总线结构的运算器两个操作数要分两次输入到ALU需要A、B两个暂存器临时保存操作数操作速度慢、控制简单一次运算要三步完成：通用寄存器A通用寄存器BABALU通用寄存器、双总线结构的运算器两个操作数通过两条总线同时输入到ALU进行运算ALU的输出经过缓冲器送入通用寄存器因为ALU的输入数据没有暂存器，计算过程中，两条总线都被输入数据占据，必须在ALU输出端设置缓冲器。一次运算要两步完成：通用寄存器总线，通用寄存器总线，总线总线缓冲器缓冲器通用寄存器、三总线结构的运算器总线旁路器：总线之间的数据传送一次运算一步完成：通用寄存器总线，通用寄存器总线，总线总线总线，总线通用寄存器速度快，硬件复杂，成本高Intel运算器结构通用寄存器暂存器标志寄存器位ALU单总线结构ARM的ALU三总线结构通用寄存器Intelpentuim的ALU三总线结构通用寄存器CPU和GPUGPU中有海量的ALU，因而其计算能力很强大GPU的ALUGTX的核心GP每个SM有个CUDA内核（绿色方块）CUDA内部浮点运算方法和浮点运算器浮点加法、减法运算浮点乘法、除法运算浮点运算流水线浮点运算器实例浮点加法、减法运算浮点加法、减法运算浮点加减运算步骤如下：操作数检查；比较阶码大小并完成对阶；尾数求和差运算；结果规格化舍入处理溢出处理浮点加法、减法运算操作数检查能否简化操作、节省运算时间比较阶码大小并完成对阶对阶：使得小数部分可以按位权值相加变为定点数定点加法器运算小数点位置是否对齐对阶小阶向大阶看齐浮点加法、减法运算两个浮点数相加：浮点格式中，尾数为定点小数如果向小阶对齐，尾数左移易导致高位数据丢失如果向大阶对齐，尾数右移丢失的是低位数据浮点加法、减法运算浮点加法、减法运算IEEE的四种舍入方法就近舍入：类似于四舍五入，多余位：最低有效位之后的若干位，用于舍入判断多余位中间值位：多余位比大，进位；比小，舍去对于的情况：有效位末尾是：进有效位末尾是：舍弃例：保留有效位到IEEE的四种舍入方法朝舍入：截尾保留有效位到：IEEE的四种舍入方法IEEE的四种舍入方法M例题：真值，求位单精度浮点数移动小数点，使其在第、位之间Se，E得到位浮点数的二进制存储格式为：ECCCCD位就近舍入浮点加法、减法运算真值的机器数（机器零）阶码E，尾数M正：S，负：S非规格化浮点数：阶码E，尾数M规格化浮点数：阶码E（）无穷大的机器数阶码E全（），尾数M：S，：SNaN（notanumber，不是一个数）阶码E全（），尾数M用来通知异常情况IEEE标准位单精度浮点数浮点加法、减法运算浮点乘法、除法运算浮点乘法、除法运算浮点乘、除法运算步骤浮点数的乘除运算大体分为六步：操作数检查；阶码加减操作；尾数乘除操作；结果规格化；舍入处理；确定积的符号；浮点乘法、除法运算浮点数的阶码运算乘法：两阶码求和，减偏移量除法：两阶码求差，加偏移量尾数处理规格化与舍入与浮点加减法相同现代处理中的浮点运算单元浮点运算单元FPU，floatingpointUnit华为海思麒麟个ALU、个FPUARMA中的FPURISCV中的FPU用于物联网的一种处理器架构平头哥玄铁个ALU、个FPU龙芯AFP浮点性能比较以CNN为例，用于输入图像大小为的分类任务的典型CNN模型需要高达亿次GFLOP和MB以上的模型参数。第二章小结一个定点有符号数由符号位和数值域两部分组成。按小数点位置不同，定点数有纯小数和纯整数两种表示方法。按IEEE标准，一个单精度浮点数由符号位S、阶码E、尾数M三个域组成。阶码E等于指数的真值e加上固定偏移值第二章小结数的真值变成机器码时四种表示方法：原码，反码、补码和移码移码主要用于表示浮点数的阶码字符信息属于符号数据，国际上采用的字符系统是位的ASCII码。汉字有输入码、汉字内码和输出码三种不同用途的编码。为运算器构造的简单性，运算方法中算术运算通常采用补码加、减法，原码乘除法。第章教学要求掌握定点整数（有符号数和无符号数）的表示范围掌握IEEE单精度浮点格式的表示，规格化，与真值的相互转换理解真值和机器数，掌握定点整数的补码、反码、原码，理解移码表示法了解汉字输入编码、机内码、输出码理解检验码的作用，掌握奇偶校验第章教学要求掌握补码加减法运算掌握溢出的概念及检测方法理解运算器的三种组成方式掌握浮点加减法运算步骤理解IEEE标准的种舍入处理方法，掌握就近舍入C语言数据表示非数值数据char位数值数据定点整数signedunsignedchar位short（位）int（位）long（位）浮点数Float（位）double（位）C语言中的整数（定点数）无符号整数unsignedcharunsignedshortunsignedint一般用于地址运算有符号整数charshortintlong采用补码表示无符号整数带符号整数的最大值位无符号整数最大是（）位带符号整数最大为（）编程实践在线编程网站httpscrunoobcomcompilec、c、python等httpsgccgodboltorg离线python：anacondac：ubuntu、gcc数据的真值、机器码、存储值间的关系C语言中的机器码？excintmaincharabcdprintfdnaprintfdnbprintfdncprintfdnd？？？？无符号数赋值补码真值输出变量abcd机器码实际存储值是多少？变量的内存值excmaincharabcdprintfadXnaaprintfbdXnbbprintfcdXnccprintfddXnddaFbFFFFFFcFFFFFFd补码输出机器码输出位补码表示范围，twotwotwotwotentwotentwotentwotentwotentwotentwotentwoten程序excmainintxunsigneduprintfxuXdnxxxprintfuuXdnuuu机器码输出真值赋值xFFFFFFFFu无符号数输出一个奇怪的程序excmaindoubleabcintdbcabcdbcprintffdnadifaprintfReallyanReallya二进制存储浮点数不是精确数浮点转整数只保留浮点数的整数部分Doubleexcmaindoubleabcbcabcprintfafnaprintfbfnbprintfcfncprintfafnaabca一个奇怪的程序excmainfloatabcintdbcabcdbcprintffdnadifaprintfYeahnFloatexcmainfloatabcbcabcprintffnaprintfbfnbprintfcfncabca舍入的影响例题假定变量i、f和d的数据类型分别为int、float和double（int用补码表示，float和double分别用IEEE单精度和双精度浮点数格式表示），已知i，fe，de。若在位机器中执行下列关系表达式，则结果为“真”的是IiintfloatiIIffloatintfIIIffloatdoublefIVdfdfA仅I和IIB仅I和IIIC仅II和IIID仅III和IV解答float到double的转换完全相等double到float转换可能会发生舍入floatdouble到int，小数部分会丢弃int到float，当int有效数字超过位，转换时需要舍入int到double，double尾数位，能精确表示int型Iiintfloatifloat是单精度，尾数位int型有效数字有位i能实现精确转换，条件成立若iIIffloatintffe浮点转换整数，只保留整数部分，小数部分舍去条件不成立IIIffloatdoublef双精度尾数位fe单精度float转double有效数字不变条件成立若doublefefdoublefloatf则不成立IVdfdf浮点运算不满足交换律、结合律dfd不等于ddfdfd不等于dfdC语言中单双精度混合运算，都按照双精度处理大数吃小数，两个差别巨大的浮点数相加，较小的数由于有效数字位数不够，会被舍去浮点处理精度造成的事故年月日，海湾战争期间，在沙特的爱国者导弹防御系统未能拦截一枚伊拉克飞毛腿导弹，造成名美军死亡。原因是浮点数舍入误差导致爱国者反导系统的计算机精度仅有位，存在的计时误差，所以有效时间阙值是个小时。当系统运行个小时以后，已经积累了秒的误差。这个误差导致导弹系统不能正确地瞄准目标。浮点处理精度造成的事故失之毫厘，谬以千里浮点处理精度问题解决办法制度：每隔二十小时重启一次硬件：修改位为位或位软件：升级软件其他案例年月日，在阿丽亚娜五号运载火箭发射后秒，偏离预定轨道炸毁。原因是软件系统将位浮点数转换为位浮点数，造成计算错误。温哥华证券交易所在年推出一项股票指数，指数的值是。后来，重新计算时多次运用舍入到小数点后三位的操作。个月以后，指数的值是，然而事实上应该是浮点处理精度问题树立计算机系统的思想，理解软硬件的相互影响小概率事件常会导致大损失，在工程实践中要精益求精第三章多层次存储器存储器概述SRAM存储器DRAM存储器只读存储器和闪速存储器并行存储器Cache存储器虚拟存储器奔腾系列机的虚存组织存储器概述存储器是计算机系统中的记忆设备，用来存放程序和数据存储器中最小的存储单位叫存储元，可存储bit若干个存储元组成一个存储单元许多存储单元组成一个存储器存储器的分类按存储介质满足两个基本要求：有两个明显区别的状态，分别表示和两个状态的改变速度要快，影响存储器的读写速度半导体存储器：内存，闪存速度快、容量小，成本高磁表面存储器：磁带、磁盘容量大，速度慢、成本低光盘存储器：DVD、蓝光容量大，速度慢，成本低按存取方式随机存储器RAM（RandomAccessMemory）任何存储单元的内容都能被随机存取，且存取时间和存储单元的物理位置无关内存顺序存储器按顺序存取，存取时间和存储单元的物理位置有关磁带、磁盘存储器的分类按信息掉电易失性非易失性存储器NonVolatileMemory断电后仍能保存信息磁表面存储器、光盘存储器、闪存易失性存储器VolatileMemory断电后信息立即消失内存SRAM、DRAM半导体存储器按其存储内容可变性只读存储器ROMReadOnlyMemory存储的内容一般是固定不变的，只能读出而不能写入随机读写存储器RAM：既能读出又能写入存储器的分类按在计算机系统中的作用主存储器：和CPU直接交换信息辅助存储器：主存的后援存储器高速缓冲存储器Cache：用于两个速度不同的部件之间，起到缓冲作用控制存储器等存储器的层次结构CPU对存储器的要求容量大、速度快、价格低（每位价格）目前技术下，存储器的特点是：速度快的存储器价格贵，容量小；价格低的存储器速度慢，容量大不可能三角既要。。。又要。。。。还要。。。。从在容量，速度和价格作折中考虑，建立存储器层次结构存储系统层次结构存储速度访问频率单位成本存储容量外存辅存内存存储器分级结构三级存储系统存储器的编址和端模式存放一个字节的单元称为字节存储单元，其地址称为字节地址一个字由多个字节组成，存放一个字的单元称为字存储单元，其地址称为字地址存储器编址编址的最小单位是字单元，称为按字编址编址的最小单位是字节单元，称为按字节编址既可以按字编址，也可以按字节编址存储器访问按地址访问：按字节地址访问、按字地址访问。字的概念字：wordawordisthenaturalunitofdatausedbyaparticularprocessordesign一串固定长度的二进制数，对应部件处理数据的固定长度。不同的部件其字长不同计算机字长、机器字长、运算器字长存储器字长、存储芯片字长指令字长存储器的编址字节地址机器字长位个字节存储单元组成存储器按字节编址存储器的编址机器字长位个字节存储单元组成存储器按字编址存储器的编址字节地址机器字长位，个字节存储单元字节编址下按字访问存储该字的第一个字节的字节单元地址为该字的字地址存储器的编址字节地址机器字长位，个字节存储单元存储器的编址设有一个MB容量的存储器，字长位，问：按字节编址，按字编址各自的寻址范围按字节编址：位字节地址，xxFFFFF按字编址：位字地址，xxFFFF数据的存储和排列顺序上世纪年代开始，几乎所有计算机都以字节编址存储系统和指令设计时要考虑的问题（按字节编址，按字访问）：一个字如何在字节单元存放？字的存放顺序问题端模式字节序端序尾序字地址与字节地址关系字的边界对齐问题存储器的端模式：存储字为多个字节时，在存储器中存放顺序大端bigendian：大尾端优先存储，高字节在低地址MIPS，IBMSparc网络传输小端littleendian：小尾端优先存储，低字节在低地址。X高高低低ARM的端模式可通过寄存器改变FLSBMSBADDFLSBMSBADD数据在内存中的存放顺序将x写入到以x开始的内存中内存地址对齐内存按字节编址位访问对齐位访问对齐字节编址下的按字访问：以一个字中最低字节的字节地址作为该字的字地址对齐：字地址能被字节数整除。字长为位，包含个字节，其字地址能被整除，地址最低位为；字长为位，包含个字节，其字地址能被整除，最低两位为Alignment对齐如：intishortkdoublexcharcshortj则：ikxcjx：个周期j：个周期目前来看，浪费一点存储空间没有关系！则：ikxcjx：个周期j：个周期存储器按字节编址，CPU按字对齐访问，字长位变量地址没有对齐变量地址对齐虽节省了空间，但增加了访存次数！includestdioh内存对齐测试intmemorydisplaylongunsignedintaddr以进制输出addr开始的个内存字节单元intijforiiiprintfxlXtaddriforjjjprintfxXtunsignedcharaddrijprintfnreturnintmainintishortjcharcAintkprintfixXniprintfjxXnjprintfcxXncprintfkxXnkprintfintImemoryaddressisxlXnlongunsignedintiprintfshortjmemoryaddressisxlXnlongunsignedintjprintfcharcmemoryaddressisxlXnlongunsignedintcprintfintkmemoryaddressisxlXnlongunsignedintkmemorydisplaylongunsignedintimemorydisplaylongunsignedinti内存对齐是一种软硬件协同提高性能的一种方式主存储器的技术指标SRAM存储器内部存储器是半导体存储器根据信息存储的机理不同可以分为两类：静态读写存储器SRAMStatic：速度快、成本高、容量小、功耗低，一般用作Cache动态读写存储器DRAMDynamic：容量大、成本低、速度慢、功耗高、用作主存基本的静态存储元阵列存储位元SRAM的存储位元是由两个MOS反相器交叉耦合而成的触发器，一个存储位元存储一位二进制代码六管SRAM存储元的电路结构示意图基本的静态存储元阵列三组信号线地址线字数数据线字长控制线单译码结构：个译码器N位地址，寻址n个存储单元存储元阵列又称存储芯片芯片容量字数X字长存储单元数量X存储单元字长基本的SRAM逻辑结构大容量SRAM芯片采用双译码方式：将地址分成行、列两部分，降低译码电路的规模CS：ChipSelect片选读写周期波形图先给地址，再给片选和读信号读写周期波形图先给地址，再给片选和是写信号DRAM存储位元的记忆原理DRAM存储器的存储位元是由一个MOS晶体管和电容器组成的记忆电路电容用于存储电荷，有电荷代表，否则代表MOS管电容器读放读出是破坏性读出由于c中读出是破坏性读出，必须恢复存储位元中原存的输入缓冲器关闭，刷新缓冲器打开，输出缓冲器读放打开，DOUT经刷新缓冲器送到位线上，再经MOS管写到电容上DRAM芯片的逻辑结构两个电源Vcc两个地线脚一个空管教NC个地址线AA个数据线DD方法：复用地址线AA存储器需要地址位，但芯片物理地址引脚只有位，如何处理？M位DRAM芯片的管脚图DRAM芯片的逻辑结构与SRAM芯片不同之处增加了行地址锁存器和列地址锁存器增加了刷新控制电路DRAM读出后必须刷新，而未读写的存储元也要定期刷新（电容自放电），按行刷新，刷新计数器的长度等于行地址锁存器刷新操作与读写操作交替进行通过选开关来选择刷新行地址或正常读写的行地址读写周期、刷新周期先给行地址和行选通，再给列地址和列选通读写周期、刷新周期刷新周期刷新：DRAM存储元基于电容器上的电荷存储信息，电荷量随着时间和温度而减少，因此必须定期地刷新，以保持原来记忆的正确信息刷新过程：将原有信息读出，再由刷新放大器形成原信息并重新写入的过程刷新按行进行刷新周期：从上次对整个存储器刷新结束到下次对整个存储器全部刷新一遍为止的时间间隔称为刷新周期集中式刷新分散式刷新集中刷新方式例行工作周期ns刷新周期msms内集中安排所有刷新周期总工作周期数msns个用在实时要求不高的场合集中式刷新：DRAM的所有行在每一个刷新周期中都被刷新刷新期间停止正常读写分散刷新方式各刷新周期分散安排在ms内每隔一段时间刷新一行每隔微秒提一次刷新请求，刷新一行；毫秒内刷新完所有行用在大多数计算机中ms行微秒ns主存储器特点由半导体存储器组成存储单元：字存储单元，字节存储单元编址：按字节编址按地址进行访问：字节地址访问字，访问字节属于随机访问存储器RAMDRAM需要刷新高级的DRAM结构FPMDRAM：快速页模式动态存储器SDRAM同步动态存储器读写操作与CPU时钟同步猝发式读取：输入一个行地址，一个列地址，连续读出后续几个列地址数据输入一个行地址，连续输入多个列地址，该行中的对应列的存储单元数据就连续输出DDRSDRAMDDR：DoubleDateRateDDR在相同时钟频率下的数据传输速率比SDRAM提高一倍上下沿都传输数据DDR、DDR：时钟频率比上一代提高一倍，速率提高一倍DDRSDRAM全球DRAM产业三星技术最先进，产量最大年月开始大规模生产基于EUV的nmDDR中国DRAM产业发展年，中国第一块KDRAM诞生，但总体技术力量薄弱，和国外差距比较大，没有竞争力。世纪后，通过政府扶持、自主研发、技术引进、收购等方式逐步建立起国产DRAM产业。年的紫光收购德国奇梦达、收购美国ISSI。目前，国产DRAM市场的主要厂家紫光国芯、福建晋华、合肥长鑫、长江存储等。年月，合肥长鑫宣布正式量产DDR年预计将试产nmDDR产能大约能占到全球内存产能的，目前最被看好困难和阻力全球半导体需求将近来自中国年开始，美光开始对福建晋华发起诉讼年月日，美国商务部将福建晋华添加进实体清单，导致整个企业进度不理想年，美光曾对从台湾华亚科跳槽到合肥长鑫的上百名员工发存证信函砥砺前行从DRAM内存的角度来说，中国企业在技术、产业链方面，距离全球顶尖的厂商都有较大的差距，产品自给率方面更是不容乐观。我们需要进一步加大企业自主创新国家意志支持的力度，坚定IDM的发展模式，进行产业全链路的布局，高度重视技术、专利的原创性，避开巨头们的干扰、阻挠。只有做到这些，才能在机遇和风险并存的产业环境中不断前行，实现我们在半导体产业独立自主的目标。只读存储器只读存储器概述Flash存储器存储器容量扩展只读存储器概述只读存储器ROM：ReadOnlyMemory在正常工作状态下只能读取数据，不能写入数据掉电不易失ROM和RAM都属于内部存储器，属于同一个内存空间用于保存计算机运行所需的最基础、最核心的程序。BIOS：基本输入输出系统引导程序等内存空间总容量MBRAMROMRAMROM只读存储器概述ROM中写数据称为编程program，包括擦除和写入根据是否可编程，分为：掩模ROM：制造中写入信息，用户无法更改可编程ROM：用户可写入内容PROM：可编程一次EPROM和EPROM：可多次编程EPROM：紫外线擦除，专用设备写入EPROM：电擦除，联机写入EPROMErasePROM紫外线擦除，编程器写入EPROM上方有一个石英窗口。将芯片置于紫外灯下，以擦除其中的内容，相当于存储器又存了全“”。然后用专用的设备将信息重新写入EPROMEPROM为ElectricErasePROM电擦除，擦除时间较快联机写入无需把器件从电路板取下EPROM允许改写上千次，编程大约需ms，数据可存储年以上Flash存储器在EPROM基础上发展而来高密度、非失易失性有很高的读取速度，易于擦除和重写，功耗小FLASH存储器的逻辑结构重点存储器容量扩充一、存储芯片简介二、存储器容量扩展的三种方法位扩展字扩展字位扩展一、背景知识存储芯片简介存储芯片的引脚芯片容量：字数字长存储单元数量存储单元的位数二、存储器容量扩展的三种方法、位扩展给定芯片的字长较短，不满足存储器字长要求，要用多片来扩展字长、字扩展给定的芯片字数少，用多片给来扩展字数、字位扩展从字长和字数两个方向扩展、位扩展、位扩展存储器一个存储单元分为高位和低位分别位于两个芯片中两个芯片并行工作、位扩展总容量位、位扩展、字扩展、字扩展、字扩展分析地址：存储器地址线AAA用于选择芯片AA用于选择芯片内的某一存储单元、字扩展、字扩展、字扩展、字位扩展需扩展的存储器容量为MN位已有芯片的容量为LK位LMKN用ML组芯片进行字扩展每组内有NK个芯片进行位扩展每片一组进行位扩展组进行字扩展存器容量与地址范围的关系高位通过：译码器产生每组的片选信号组进行字扩展字位扩展一起画例：设CPU有根地址线，根数据线，并用MREQ作访存控制信号，用RW作读写控制信号。现有下列存储芯片：SRAM：K、K、K；ROM：K、K、K；及：译码器和各种门电路主存的地址空间满足下述条件：最小KB地址为系统程序区ROM区，与其相邻的KB地址为用户程序区RAM区，最大KB地址空间为系统程序区ROM区。请画出CPU与存储器的连接图。三、主存储器与CPU的连接确定各区域地址范围；根据存储器容量，确定存储芯片的数目和扩展方法；分配地址线地址线低位直接连接存储芯片的地址线；高位地址线参与形成存储芯片的片选信号；连接数据线、读写控制等其他信号线MREQ可用作地址译码器的使能信号解：）根据题目的地址范围写出相应的二进制地址码。存器容量与地址范围的关系并行存储器加速CPU与存储器之间的数据传输的方式：采用更高速性能的存储器，加大字长采用并行操作的双端口存储器在CPU和主存之间使用高速缓存Cache在每个存储周期中存取多个字多模块交叉存储器DDR双端口存储器结构特点：具有左右两个端口，每一个端口都有独立的读写控制电路读写冲突：若左、右端口同时对相同的存储单元进行读写操作左读右写、右读左写、左写右写解决方法：判断逻辑决定对哪个端口优先进行读写操作，而暂时关闭另一个被延迟的端口，即置其忙信号BUSY。双端口存储器IDT逻辑框图R双端口存储器读写时序CE判断：如果地址匹配且在CE之前有效，片上的控制逻辑在CEL和CER之间进行判断来选择端口。多模块交叉存储器设存储器由M个的独立的存储模块组成，每个模块有相同的容量和存取速度存储模块就是存储芯片存储器地址的编排方式：顺序方式和交叉方式。顺序方式：地址按顺序分配给一个模块后，又按顺序为下个模块分配内存地址模块bit字bitMMMM数据总线顺序方式位地址：高位选模块，低位选块内地址故障隔离扩充容量比较方便连续地址单元在同一个模块，各模块串行工作带宽没有提升多模块交叉存储器交叉方式：两个相邻地址的物理单元不属于同一个存储模块，一般在相邻的存储模块中；同一个存储模块内的地址都不连续。内存地址模块bit字bitMMMM数据总线交叉方式位地址：高位选块内地址，低位选模块连续地址单元在不同同模块，各模块并行工作存储对齐（软件）交叉编址（硬件）可以系统运行速度并行存储器地址总线ABUSMMMM单字长数据总线DBUS交叉编址ARARARARCPU每个模块独立工作各模块分时使用数据总线进行信息传递。流水线方式数据总线是瓶颈多体交叉存储器流水线方式存取示意图连续读取m个字所需的时间为模块内访问一个存储单元（字）的存储周期是T多体并行存储器地址总线ABUSMMMM多字长数据总线DBUS交叉编址ARARARARCPU也称为多通道优化瓶颈多模块应用两条G内存条单条G内存条性能差异？双通道内存实例bit双通道内存性能评测SiSoftwareSandraProBusinessHPDLGIntelSandyBridge新型存储器PCRAM相变储存器又称PCM和CRAM，它利用相变材料作为储存介质。相变材料在非晶相态时具有较高的电阻值；在结晶相态时具有较低的电阻值非易失性存储器对相变材料施加不同时长的电脉冲，使相变材料呈现出不同的结晶状态，并在两种状态之间快速切换储存密度较DRAM更高新型存储器ReRAM电阻式存储器也称RRAM，是以非导性材料（金属氧化物）为存储介质的非易失性存储器施加电压，材料的电阻在高阻态和低阻态间发生相应变化，并利用这种性质储存各种信息。RRAM不仅高读写速度和高存储密度，同时延迟更低新型存储器MRAM和FRAMMRAM是一种利用磁性工作的非易失性随机存储器。基于两个铁磁层磁化状态来存储信息，当电流流过时会表现出不同的阻值。FRAM，采用铅锆钛形成结晶体存储数据。通过判断晶体内的电荷高低来读取数据。Cache存储器Cache存储器为什么要引入Cache？解决CPU和主存之间的速度不匹配问题延迟（ns）和带宽（GBs）CPU带宽简单测算个人电脑的DDR内存单通道带宽MBsCPU默认频率位MHz，核心位处理器，每次运算需要个数据CPU所需带宽：xxMBs内存墙（memorywall）Cache存储器在CPU和内存之间设置一个小容量的存储器Cache，保存的内容是主存内容的一个子集Cache存取速度要比主存快，用SRAM实现Cache功能全由硬件调度，对所有用户透明运行过程无需软件参与Cache基本原理程序的局部性原理在一段时间内，程序的执行仅限于程序中的某一部分。相应地，执行所访问的存储空间也局限于某个内存区域时间局部性：被访问过一次的内存区域在未来会被多次访问空间局部性：如果一个内存区域被访问，那么将来它附近的单元也会被访问sumforiinisumaixaiyreturnsum程序局部性举例数据数组元素访问空间结构体、数据库记录访问空间局部变量，计数器，指针等被重复使用时间指令顺序访问的指令空间重复使用的循环体时间子函数时间程序局部性举例程序：intaMNforiiMiforjjNjsumaij程序：intaMNforjjNjforiiMisumaij哪个程序具有更好的局部性Cache的命中率Cache的平均访问时间Cache的访问效率例CPU执行一段程序时，Cache完成存取的次数为次，主存完成存取的次数为次，已知Cache存取周期为ns，主存存取周期为ns，求Cache主存系统的效率和平均访问时间。解：背景：相联存储器（CAM）普通存储器都是按地址访问相联存储器是按内容访问ContentAddressableMemory相联存储器的基本原理存放在相联存储器中的内容：标记数据查找的主要操作是比较按地址访问存储器按地址访问：存储器只保存数据，数据的地址不保存寻址时译码器根据地址直接选中对应数据按地址访问：存储器只保存数据，数据的地址不保存寻址时译码器根据地址选中对应存储单元按地址访问存储器按内容访问：增加标记标识、Tag，一般用地址的部分或全部查找时，将访问地址和表中的所有标记比较，相同的一行就是要访问的存储单元CAM存储器按内容访问：增加标记标识、Tag存储，一般用地址的部分或全部作为标记查找时，将访问地址和标记存储中的所有标记比较，相同的一行就是要访问的存储单元CAM存储器相联存储器在计算机系统中，CAM主要用于需要快速查找的领域：虚拟存储器中存放段表、页表和快表；Cache网络设备中路由的查找主存与Cache的地址映射主存与Cache的地址映射Cache分为若干行（Line），每行的容量和主存块相同Cache与主存的数据交换是以块为单位Cache按内容访问，主存按地址访问必须应用某种方法，把主存的地址定位到Cache中的确切位置地址映射例题主存地址空间大小为MB，按字节编址。主存块大小为B。数据Cache有行假定int型数据为位补码，数组a按行优先方式存放，首地址为（十进制））数据Cache的总容量是多少？）数组元素aa所在主存块分别是多少intaCache原理图主存分块Cache替换管理Cache与主存之间的数据交换是以块为单位CPU与Cache主存之间的数据交换是以字为单位标记存储Cache数据存储Cache的基本工作原理示意图CPU将内存地址同时发往Cache和主存。Cache的四个问题当把一块调入Cache时，放在哪行（映射方式）全相联、直接映射、组相联如何判断当所要访问的地址在Cache中（地址变换）当发生失效时，应替换哪一行？（替换算法）当进行写操作时，应进行哪些操作（写策略）保证数据的一致性全相联多对多：主存一个块可以放到Cache任一行将整个块地址作为Cache行的标记XXXXXXXXXX主存地址：块号（s位）块内偏移（w位）r行s块w字BBBBBBBBBB全相联主存块，每块个字，Cache有行全相联地址变换CPU将内存地址同时发往Cache和主存发往Cache的访存地址会分为块地址和块内偏移块地址同时和Cache中所有行的Tag进行比较相同表示命中，再根据块内偏移从该行中读取一个字，同时撤销内存寻址过程若没有命中，则等待访存过程结束，然后将被访问内存的相对应块调入Cache块地址（块号）全相联地址变换内存地址全相联特点：优点：冲突概率小，Cache的利用高。冲突：所选择的Cache行包含近期要使用的信息缺点：比较电路实现成本高适用于小容量的Cache直接映射直接映射Cache将s位块地址分为两部分：低r位作为Cache的行号（index）rlogm高sr位作为该行tag直接映射的Cache组织直接映射地址变换第一步：用访存地址中的块号的r位行号找到Cache中对应的一行第二步：用块号的sr位与该行的tag比较。若命中，而后用低w位读取所要求的字若不命中，访问主存二、直接映射映射检索过程块号蓝色：行号；绿色：字地址Cache地址Cache地址Cache地址直接映射优点：硬件简单，成本低缺点：每个块只有一个固定的行可存放，容易产生冲突频繁置换会导致Cache抖动，效率下降适合大容量Cache采用更多行减小冲突组相联将Cache分成u组，每组v行组间采用直接映射，组内采用全相联映射主存中的每一块可以被放置到Cache中唯一的组的任何一行组相联是全相联和直接映射的折中方案q组号，j主存块地址、m为Cache总行数muv组号qjmodu设ud，qlogd组相联映射方式低d位表示组号组索引，组index高sd位作为tagCache分为组，每组行组相联映地址变换第一步：用块号的低d位找到对应组第二步：将块号的高sd位与该组中所有行的标记同时进行比较命中，选中该行，用内存地址的低w位选择相应的字不命中，则访问内存三、组相联映射地址变换块号蓝色：组号；绿色：字地址组相联映射方式特点：比全相联容易实现，冲突低u，则为全相联映射方式v表示每组的行数，称之为v路组相联Cache。v，则为直接映射方式得到普遍采用全相联映射载入过程载入载入命中命中载入载入命中载入t主存块，Cache行直接相联映射载入过程（）载入载入命中命中载入载入命中替换t（）主存块，Cache行路组相联映射载入过程载入载入命中命中载入载入命中载入t主存块，Cache行Cache基本概念Cache的作用：解决CPU和主存之间的速度不匹配问题小容量存储器，用SRAM实现对用户透明Cache的原理程序局部性：时间和空间Cache性能命中率、平均访问时间、效率Cache基本概念CAM按内容访问、比较器主存地址：块地址和块内偏移Cache分为若干行（Line），每行的容量和主存块相同Cache与主存的数据交换是以块为单位全相联多对多：主存一个块可以放到Cache任一行将全部块地址作为Cache行的标记全相联地址变换CPU发出的访存地址中的块地址同时和Cache中所有的Tag进行比较。特点冲突概率小，成本高适用于小容量的Cache直接映射多对一：一个主存块只能映射到Cache的一个特定行上直接映射地址变换地址变换用访存地址中的块号的r位行索引找到Cache中对应的行然后用块号的sr位与该行的tag比较。特点硬件简单，成本低，容易产生冲突频繁置换会导致Cache抖动，效率下降适合大容量Cache采用组相联将Cache分成u组，每组v行V路组相联组间采用直接映射，组内采用全相联映射组相联映地址变换地址变换首先访存地址的块地址的低d位找到对应组，然后将块地址的高sd位与该组v行中的所有tag同时进行比较。特点比全相联容易实现，冲突低全相联映射和直接映射的折衷得到普遍采用一个路组相联Cache由行组成，主存储器包含K个块，每块字。请表示主存地址的格式？典型题组相联映射下的主存地址格式如下：每块字块内的字地址需要位Cache由个行组成，每组行Cache共包含组，需位组号主存包含K个块主存块号为位标记位位位位位解：主存容量M，主存地址共位块大小字节，字号块内偏移w块地址：位全相联映射，标记位数等于块地址位数，为位主存格式主存地址F对应的标记字号有一个存储体系，主存容量MB，字长B，块大小B，Cache容量KB。若Cache采用全相联映射，对内存地址（FH）给出相应的标记和字号。例：某PC主存容量为KBCache容量KB每块B。主存多少块？块地址多少位？Cache多少行？主存块：KK，块地址占位Cache行：K用直接映射时，Cache标记几位？位块地址中，低位定位Cache行，高位为标记用全相联映射，Cache标记几位？位例：某计算机的Cache有行，采用二路组相联映射方式，每个主存块大小为字节，按字节编址。则主存号单元的主存块装如Cache的组号是：A、B、C、D、解：二路组相联，共有组，组号占位。每块字节，所以块内地址占位。转化为二进制：：前位为组号，组号为。，mod块地址块号块内偏移块内地址字地址字号替换策略当从主存向Cache传送一个新块，而Cache中可用位置已被占满时，就会产生替换问题直接映射：替换Cache中指定的一行全相联和组相联：从所有行或组内所有行中选取一行换出Cache的常用替换算法：最不经常使用LFU算法近期最少使用LRU算法随机替换策略最不经常使用LFULeastFrequentlyUsed算法每行设置一个计数器，开始计数每访问一次，被访行的计数器增。当需要替换时，将计数值最小的行换出，同时将该行的计数器都清零。不能严格反映近期访问情况。刚调入Cache的新行很容易被换出替换策略例子：设Cache有、、、共行全相联映射，a、b、c、d、e等为主存中的块访问顺序一次如下：a、b、c、d、c、b、c、e、d、d、ae。）采用LFU算法替换计数器从开始计数每访问一次，该行的计数器增。将计数值最小的行换出，该行计数器清零。替换策略近期最少使用LRULeastRecentlyUsed的算法将近期内长久未被访问过的行换出每行设置一个计数器访问时，命中行的计数器清零，其它各行的计数器增替换时，将计数值最大的行换出保护了刚拷贝到Cache中的新行，提高了命中率随机替换随机地选取一行换出命中行的计数器清零，其它各行的计数器增将计数值最大的行换出。Cache的写操作策略Cache的内容只是主存部分内容的副本对Cache的写入导致与主存内容的不一致三种写策略写回法（WriteBack）全写法（WriteThrough、写穿透、写直达）写一次法（WriteOnce）考虑写命中和写不命中两种情况写回法写命中：修改Cache的内容，而不立即写入主存只有当此行被替换时才写回主写未命中：首先将内存中对应块调入Cache，然后对其修改当此行换出时，写回主存特点减少了访问主存的次数存在不一致的隐患每行配置一个修改位，以反映此行是否被CPU修改过。被修改过的行称为脏行（dirty）例题全写法写命中时：同时写入Cache与主存写未命中时：直接向主存进行写入特点：无需增加修改位写Cache和写主存同步进行，不存在数据不一致的情况一定程度上降低了Cache的性能写一次法写回法全写法写命中时：第一次：采取全写法不是第一次：采取写回法写未命中时：与写回法相同主要用于多处理器系统InteliCache结构例题主存地址空间大小为MB，按字节编址。指令数据Cache，均有行，Cache行大小为B，数据Cache直接相联。现有两功能相同的程序A，B，其伪代码如下所示：假定int型数据为位补码，程序编译时ijsum均分配在寄存器中，数组a按行优先方式存放，首地址为（十进制）。）数组元素aa所在主存块对应的Cache行分别是多少，行号从零开始。程序A，B的数据访问命中率各是多少？那个程序的执行时间更短intaforiiiforjjjsumaijintaforjjjforiiisumaij程序A程序B虚拟存储器原因？多用户、多任务的出现，要求每个程序有自己独立的内存空间用户编程时希望不考虑实际程序的运行空间？虚拟存储器只是一个容量非常大的存储器的逻辑模型，它借助于磁盘等辅助存储器来扩大主存容量，使之为更大或更多的程序所使用。虚拟存储器实地址与虚地址用户编制程序时使用的地址称为虚地址或逻辑地址，其对应的存储空间称为虚存空间或逻辑地址空间；计算机物理内存的访问地址则称为实地址或物理地址，其对应的存储空间称为物理存储空间或主存空间。程序进行虚地址到实地址转换的过程称为程序的再定位。注意：物理地址由CPU地址引脚送出，用于访问主存的地址。虚拟地址由编译程序生成的，是程序的逻辑地址。主存外存层次所用的地址变换映射方法和替换策略与cache主存层次所用的方法和策略是相同的，即都基于程序局部性原理。它们遵循的原则是：虚拟存储器虚存访问过程：虚存空间用户程序按照虚地址编程并存放于辅存之中运行时，操作系统将程序的部分调入内存。每次访存时，判断：虚地址对应部分是否在内存？若在：虚实地址转换不在：从辅存中调入虚拟存储器虚存是概念模型，不是实物对系统程序不透明、对应用程序透明虚存能有效提高存储体系性能Cache主存辅存Cache主存访问机制主存辅存访问机制虚拟存储器Cache与虚存的异同：出发点相同：提高存储系统性能原理相同：局部性原理侧重点不同：Cache：解决速度差异，提高访存速度；虚存：容量、分配、保护等数据通路不同：CPU与主存和Cache有直接通路；CPU不能直接访问辅存虚拟存储器Cache与虚存的异同：透明性不同：Cache：完全由硬件完成，透明；虚存：硬件软件完成，仅对用户程序透明未命中损失不同：Cache：未命中时间损失小虚存：未命中时间损失大虚拟存储器虚存机制要解决的关键问题调度问题：哪些程序、数据调入主存？地址映射问题：虚实地址变换替换问题：决定哪些程序和数据应被调出主存更新问题：主存、辅存内容一致性虚拟存储器不同的虚拟存储器机制页式虚拟存储器段式虚拟存储器和段页式虚拟存储器不同的替换算法：FIFO、LRU、LFU页式虚拟存储器页式虚拟存储系统中，虚拟空间分成页，称为逻辑页；主存空间也分成同样大小的页，称为物理页。虚存地址分为两个字段：逻辑页号页内行地址。实存地址也分两个字段：物理页号页内行地址。页表中每一个虚存逻辑页号有一个表目，表目内容包含该逻辑页所在的主存页面地址物理页号，用它作为实存地址的高字段，与虚存地址的页内行地址字段相拼接，产生完整的实主存地址，据此来访问主存页式虚拟存储器结构页表通常在主存中，也至少要访问两次物理存储器才能实现一次访存，这将使虚拟存储器的存取时间加倍。为了避免对主存访问次数的增多，把页表中的最活跃的部分存放在高速存储器中，这个专用于页表缓存的高速存储部件通常称为转换后援缓冲器TLB。保存在主存中的完整页表则称为慢表。页式虚拟存储器TLB的地址映射过程段式虚拟存储器和段页式虚拟存储器、段式虚拟存储器段是按照程序的自然分界划分的长度可以动态改变的区域。子程序、操作数和常数等划分到不同的段中，并且每个程序可以有多个相同类型的段。虚地址由段号和段内地址（偏移量）组成。虚地址到实主存地址的变换通过段表实现。段式虚拟存储器地址变换段页式虚拟存储器是段式虚拟存储器和页式虚拟存储器的结合。它把程序按逻辑单位分段以后，再把每段分成固定大小的页。程序对主存的调入调出是按页面进行的，但它又可以按段实现共享和保护，兼备页式和段式的优点。缺点是在映象过程中需要多次查表。段页式虚拟存储器在段页式虚拟存储系统中，每道程序是通过一个段表和一组页表来进行定位的。段表中的每个表目对应一个段，每个表目有一个指向该段的页表起始地址及该段的控制保护信息。如果有多个用户在机器上运行，多道程序的每一道需要一个基号，由它指明该道程序的段表起始地址。虚拟地址格式如下：段页式虚拟存储器例假设有三道程序用户标志号为A，B，C，其基址寄存器内容分别为SA，SB，SC，逻辑地址到物理地址的变换过程如下图所示。在主存中，每道程序都有一张段表，A程序有段，C程序有段。每段应有一张页表，段表的每行就表示相应页表的起始位置，而页表内的每行即为相应的物理页号。请说明虚实地址变换过程。替换算法虚拟存储器中的页面替换策略和cache中的行替换策略有很多相似之处，但有三点显著不同：缺页至少要涉及一次磁盘存取，读取所缺的页，缺页使系统蒙受的损失要比cache未命中大得多。页面替换是由操作系统软件实现的。页面替换的选择余地很大，属于一个进程的页面都可替换。虚拟存储器中的替换策略一般采用LRU算法、LFU算法、FIFO算法，或将两种算法结合起来使用。对于将被替换出去的页面，假如该页调入主存后没有被修改，就不必进行处理，否则就把该页重新写入外存，以保证外存中数据的正确性。为此，在页表的每一行应设置一修改位。例假设主存只有abc三个页框，组成a进c出的FIFO队列，进程访问页面的序列是，，，，，，，，，，号。若采用FIFO算法，FIFO算法LRU算法，用列表法分别求两种替换策略情况下的命中率。虚拟存储器实例奔腾PC机的虚地址模式奔腾PC的存储管理部件MMU包括分段部件SU和分页部件PU两部份，可允许SU，PU单独工作或同时工作。分段不分页模式：虚拟地址由一个位的段参照和一个位的偏移组成。分段部件SU将二维的分段虚拟地址转换成一维的位线性地址。优点是无需访问页目录和页表，地址转换速度快。对段提供的一些保护定义可以一直贯通到段的单个字节级。分段分页模式：在分段基础上增加分页存储管理的模式。即将SU部件转换后的位线性地址看成由页目录、页表、页内偏移三个字段组成，再由PU部件完成两级页表的查找，将其转换成位物理地址。兼顾了分段和分页两种方式的优点。不分段分页模式：这种模式下SU不工作，只是分页部件PU工作。程序也不提供段参照，寄存器提供的位地址被看成是由页目录、页表、页内偏移三个字段组成。由PU完成虚拟地址到物理地址的转换。这种模式减少了虚拟空间，但能提供保护机制，比分段模式具有更大的灵活性。保护模式的分页地址转换奔腾页面大小为MB使用单级页表。位线性地址分为高位的页面和低位的页内偏移两个字段。页表项的I位指示页面大小，P位为出现位，A位为访问过位，D位为修改过位。RW位用于读写控制，US位用于用户监督控制，PCD位用于页cache禁止的控制，PWT位用于页全写法的控制。奔腾MB分页方式地址变换存储保护当多个用户共享主存时，就有多个用户和系统软件存于主存中，为使系统能正常工作，应防止由于一个用户程序出错而破坏其他用户的程序和系统软件，还要防止一个用户程序不合法地访问不是分配给它的主存区域。为此，系统应提供存储保护。通常采用的方式是：存储区域保护访问方式保护存储区域保护非虚拟存储器的主存系统可采用界限寄存器方式。由系统软件经特权指令设置上、下界寄存器，为每个程序划定存储区域，禁止越界访问。界限寄存器方式只适用于每个用户占用一个或几个连续的主存区域。在虚拟存储系统中，通常采用页表保护、段表保护和键式保护方法。页表保护和段表保护每个程序的段表和页表本身都有自己的保护功能。每个程序的虚页号是固定的，经过虚地址向实地址变换后的实存页号也就固定了。那么不论虚地址如何出错，也只能影响到相对的几个主存页面。不会侵犯其他程序空间。段表和页表的保护功能相同，但段表中除包括段表起点外，还包括段长。键保护方式为主存的每一页配一个键，称为存储键每个用户的实存页面的键都相同。为了打开这个锁必须有钥匙，称为访问键。访问键赋予每道程序，并保存在该道程序的状态寄存器中。当数据要写入主存的某一页时，访问键要与存储键相比较。若两键相符，则允许访问该页，否则拒绝访问。环保护方式对正在执行的程序本身的核心部分或关键部分进行保护。它是按程序的重要性及对整个系统的正常运行的影响程度进行分层，每一层叫做一个环。在现行程序运行前由操作系统定好程序各页的环号，并置入页表中。然后把该道程序的开始环号送入CPU的现行环号寄存器。程序可以访问任何外层空间；访问内层空间则需由操作系统的环控例行程序判断这个向内访问是否合法。访问方式保护对主存信息的使用可以有三种方式：读、写和执行。相应的访问方式保护就有R、W、E三种方式形成的逻辑组合。这些访问方式保护通常作为程序状态寄存器的保护位，并且和区域保护结合起来实现。表访问方式保护的逻辑组合本章小结对存储器的要求是容量大、速度快、成本低。为了解决了这三方面的矛盾，计算机采用多级存储体系结构，即cache、主存和外存。存储器的技术指标有存储容量、存取时间、存储周期、存储器带宽。SRAM、DRAM和ROM各自的特性第四章指令系统指令系统的发展与性能要求指令格式操作数类型指令和数据的寻址方式典型指令指令系统的发展与性能要求冯诺依曼结构主要思想五大部件存储程序程序控制计算机程序由一系列的机器指令组成指令是计算机执行某种操作的命令每个指令的执行过程依靠硬件实现指令系统的发展与性能要求指令是软件和硬件分界面Interface硬件设计人员采用各种手段实现它；软件设计人员则利用它编制系统软件和应用软件指令系统：一台计算机中所有机器指令的集合表征一台计算机性能的重要因素影响计算机的硬件结构、系统软件，机器的适用范围指令集架构InstructionSetArchitectureISA指令系统指令系统的发展系列计算机基本指令系统相同、基本体系结构相同的一系列计算机同一系列的各机种有共同的指令集指令集向下兼容X系列、ARM系列指令系统的发展复杂指令系统计算机CISCComplexInstructionSetComputer单条指令功能复杂，整个指令系统数量庞大控制器研制开发周期变长，正确性难以保证，调试维护困难X、IAIA、IBMSystemIntelMCS精简指令系统计算机RISCReducedInstructionSetComputer克服CISC缺点，便于VLSI技术实现单条指令功能简单规则：的指令完成的功能控制器设计难度降低ARMAdvancedRISCMachineRISCV、MIPSAVRAlfandVegardsRISCprocessor指令格式表示一条指令的二进制串称为指令字，指令指令格式：用二进制代码表示的结构形式操作码（OPOperationCode）该指令执行的操作，编码表示地址码（ACAddressCode）描述指令的操作对象，可以是操作数本身，也可以是操作数的位置存储器单元存储器地址寄存器寄存器编号IO设备中的缓冲端口号地址码操作数有被操作数、操作数及操作结果这三种数形成了三种指令格式三地址指令二地址指令一地址指令零地址指令地址码零地址指令指令字中只有操作码，而没有地址码一种是无需操作数如NOP、HLT停机指令等另一种是操作数为默认的（或称隐含的）如操作数在累加器或者堆栈中零地址指令地址码一地址指令常称为单操作数指令，指令中只有一个地址码可能是单操作数运算给出的地址既作为操作数的地址，也作为结果的地址OPAA也可能是二元运算指令中提供一个操作数，另一个操作数则是隐含的AOPACA一地址指令地址码二地址指令最常见的指令格式，又称为双操作数指令运算结果保存在其中一个地址码中，原来的数据被覆盖（A）OP（A）A地址码A兼做存放操作结果地址码三地址指令AOPAAA和A为源操作数A为目的操作数地址码在二地址和三地址指令格式中，从操作数的物理位置划分为三种类型存储器存储器StorageStorageSS型指令：从内存单元中取操作数，操作结果存放至内存单元需要多次访问内存寄存器寄存器RegisterRegisterRR型指令：从寄存器中取操作数，把操作结果放到另一寄存器这类指令的速度很快，因为不需要访问内存寄存器存储器RegisterStorageRS型指令：此类指令既要访问内存单元，又要访问寄存器指令字长度指令字长度：一条指令的二进制位数为了取指方便，一般为机器字长倍数半字长、单字长、双字长多字长指令指令字长度等于两个或多个机器字长优点：地址码更多，解决内存的寻址问题；缺点：多次访存才能取得一条指令，降低了速度，占用存储空间大指令字长度指令集中所有指令长度是否相等等长指令：所有指令长度相等结构简单，控制线路简单MIPS、ARM变长指令：指令字长度随功能而异结构灵活，控制较复杂X现在指令字长一般为位固定长度指令助记符为了便于书写和阅读，指令通常用个或个英文缩写字母来表示，叫做指令助记符指令格式举例：ARM指令格式指令长度为位，定长指令单字长指令RR型指令、三地址指令指令格式举例X指令格式变长指令，字节，典型的CISC指令系统多字长指令X指令格式JEHCallPUSHESIMOVEBXEDI例机器字长位，指令格式如下所示，其中OP为操作码，试分析指令格式的特点。解：单字长二地址指令操作码字段OP可以指定条指令源寄存器和目标寄存器都是通用寄存器（总共个），所以是RR型指令，两个操作数均在寄存器中例机器字长位，指令格式如下所示，OP为操作码字段，试分析指令格式特点。双字长二地址指令操作码字段OP为位，可以指定种操作一个操作数在源寄存器，另一个操作数在存储器中所以是RS型指令。通用寄存器（总共个HP和RISCJohnHennessyMIPS是在是其在Stanford的研究成果Hennessy于年在硅谷创立了MIPS公司后任Stanford大学校长DavidPatterson加州大学伯克利分校教授，研究成果发展出SUN公司SPARC处理器是谷歌的杰出工程师RISCVFoundation董事会副主席HP和RISC两人出版了两本著名的教科书：ComputerOrganizationandDesignTheHardwareSoftwareInterface计算机组成与设计：硬件软件接口ComputerArchitectureAQuantitativeApproach计算机体系结构：量化方法ACM图灵奖MIPS架构历史MIPS（MicroprocessorwithoutInterlockedPipelinedStages）ISA是经典的RISC架构之一年由斯坦福大学的Hennessy团队研制年被MIPSTechnologies公司商业化年SGI收购年ImaginationTechnologies公司收购年卖给Tallwood年WaveComputing收购（命运多舛）年成为MIPSOpen，正式开源（年闭源）MIPSISA版本MIPSMIPS多个版本基于MIPSISA的处理器龙芯系列，君正系列MIPS指令集特点单字长指令指令长度为字节位定长指令大部分为三地址指令，RR型个位的通用寄存器内存按字节编址，内存严格字节对齐访问MIPS里没有状态码，没有标志寄存器MIPS指令格式OPRSRtshamtRdbitsfunctbitsbitsbitsbitsbitsOPRSRtbits偏移量bitsbitsbitsOPbits地址bitsR型指令I型指令J型指令RegisterformatImmediateformatJumpformatMIPS指令格式（R型指令）OPRSRtshamtRdbitsfunctbitsbitsbitsbitsbits例：addsssMIPS指令格式R型指令xsssMIPS指令格式（I型指令）OP：操作码Rs：第个源操作数寄存器Rt：目的操作寄存器偏移量：第二个原操作数OPRSRtbits偏移量bitsbitsbitsMIPS指令格式（J型指令）OP：操作码跳转指令，用一个位的立即数作为跳转的目标地址OPbits立即数bits操作数类型操作数类型地址数据：地址是无符号整数。数值数据：定点数、浮点数字符数据：字符或字符串，使用ASCII码逻辑数据：一个单元中有几位二进制bit项组成，每个bit的值可以是或。当数据以这种方式看待时，称为逻辑性数据RISCV完全开放大道至简包含一个最小的核心ISA适合硬件实现轻装上阵的后发优势模块化的可扩展指令集方便简化硬件实现，提升性能更规整的指令编码、更简洁的运算指令和访存模式高效分支跳转指令（减少指令数目）、简洁的子程序调用无条件码执行、无分支延迟槽、无零开销硬件循环（支持for循环的硬件支撑）MIPSRISCV指令助记符及语法格式大同小异RISCV分支预测，MIPS延迟槽RISCV支持变长指令扩展RISCV将源寄存器rs，rs和目标寄存器（rd）固定在同样位置，以简化指令译码立即数分散在不同位置，但符号位固定在第位，可加速符号扩展电路RISCV（年）三大事件：第一，发布首台RISCV的便携式计算机第二，Intel设立创新基金，支持RISCV生态；第三，SiFive估值超亿美元RISCV全球会员超过家，超过个核开源；SPECint首次超过分，进入高性能计算行列在IoT领域的应用规模超过亿颗中国公司的出货量占据RISCV（年）阿里平头哥发布了高性能RISCV芯片平台“无剑”及SoC原型“曳影”，兼容龙蜥操作系统并成功运行LibreOffice无剑平台是当前全球性能最高的可量产RISCV平台：支持核RISCV处理器，主频可达GHz，CPUXPU异构架构；支持位LPDDRX，最高吞吐率MT；整合TOPs的IntAI算力RISC发展年SeymourCray设计的CDC采用了loadstore设计，被认为是RISC架构的先驱年代，RISC的概念由IBM的约翰科克（JohnCocke）和斯坦福大学的约翰亨尼（JohnHennessy）等人提出年，斯坦福大学的Hennessy发布了首款MIPS芯片年，加州大学伯克利分校的DavidPatterson推出了RISCI年RISCII；年发布了RISCIII；年发布了RISCIV年，发布了RISCV年，SUN公司在RISCII基础上开发了SPARC处理器RISC架构在年代末至年代得到了广泛的应用和普及。许多公司开始推出基于RISC架构的处理器，如IBM的POWER架构、DEC的Alpha架构和HP的PARISC架构等。RISCV是一种开源的RISC架构，在开始兴起，并得到了全球范围内的关注和采用。RISCV的开放性和灵活性使得它成为教育、研究和嵌入式系统等领域的理想选择。指令和数据的寻址方式存储器中既存放指令，也存放数据在存储器中，操作数或指令字写入或读出的方式，有地址指定方式、相联存储方式和堆栈存取方式几乎所有计算机在内存中都采用地址指定方式当采用地址指定方式时，形成操作数或指令地址的方式，称为寻址方式指令和数据的寻址方式寻址方式问题确定本条指令中各操作数的地址下一条指令的地址寻址方式分为两类顺序寻址方式指令寻址方式跳跃寻址方式数据寻址方式顺序寻址方式指令地址在内存中按序排放执行程序时，通常是顺序执行称为指令的顺序寻址方式使用程序计数器PC（programcounter）保存指令的顺序号顺序号就是指令在内存中的地址新指令地址：PCPC常量常量就是当前指令的长度MIPS：PC图指令的寻址方式跳跃寻址方式当程序转移执行顺序时，指令寻址采取跳跃寻址方式所谓跳跃，是指下条指令的地址码不是由PC给出，而是由本条指令直接给出程序跳跃后，按新的指令地址开始顺序执行PC的内容也必须相应改变，以便及时跟踪新的指令地址跳跃寻址方式跳跃寻址方式功能实现程序转移或构成循环程序或将某些程序作为公共程序引用（子程序调用）各种条件转移或无条件转移指令，属于跳跃寻址操作数寻址方式形成操作数的有效地址（EAEffectiveAddress）的方法，称为操作数的寻址方式地址码由形式地址（偏移量）和寻址方式特征位组合形成例如，一种单地址指令中用X，I，A各字段组成该指令的地址码寻址方式特征位指明如何对形式地址进行变换操作数基本寻址方式计算机中操作数的存放位置有操作数包含在指令中；操作数包含在CPU的某一个内部寄存器中；操作数包含在主存中；操作数包含在IO设备的端口中根据操作数放在不同的地方，从而派生各种不同的寻址方式操作数寻址方式、隐含寻址在指令中不明显的给出而是隐含着操作数的地址例如，单地址指令、双地址指令、立即寻址地址码中不是操作数的地址，而是操作数本身也叫立即数特点：操作码和操作数被同时取出，提高了指令的执行速度操作数是指令的一部分，不能修改操作数的大小将受到指令长度的限制，寻址方式灵活性差例如：ADDBXHH为立即数（X）addi为立即数（MIPS）直接寻址直接寻址：形式地址A就是操作数的有效地址EAEAA直接寻址方式由寻址方式特征位给予指示X：MOVAXEAAImm为寻址方式特征位直接寻址内存、间接寻址间接寻址：形式地址A是操作数内存地址的指示，A单元的内容才是操作数的有效地址。结合直接寻址和间接寻址，定义指令格式如下：I，表示直接寻址，有效地址EAAI，表示间接寻址，有效地址EAA、间接寻址间接寻址要比直接寻址灵活至少需要两次访问主存储器才能取出操作数间接寻址方式示意图、寄存器寻址操作数在通用寄存器中地址码为通用寄存器编号，即EAR从寄存器中取操作数比访问主存快X：MOVAXBXMIPSadd、寄存器间接寻址寄存器中存放的不是操作数，而是操作数的内存地址地址码给出通用寄存器的编号，有EARR偏移寻址偏移寻址是直接寻址和寄存器间接寻址的结合有效地址EAA（R）。寻址特征位指明某个专用寄存器常用的三种偏移寻址是相对寻址、基址寻址、变址寻址。偏移寻址相对寻址方式专用寄存器是程序计数器PC即有效地址EAAPC。“相对”寻址，就是相对于PC的地址形式地址A可正可负一种指令寻址方式相对寻址方式PC程序指令计数器基址寻址方式专用寄存器是基址寄存器形式地址A是通常是无符号整数可以扩大寻址能力，基址寄存器的位数长，可以访问较大的地址范围MIPSLWEA变址寻址方式专用寄存器是变址寄存器目的而在于实现程序块的规律性变化例如，一个数组在内存的首地址为X，将首地址X作为指令中的形式地址A，并在变址寄存器中指出元素的序号，便可访问任一元素X：MOVAXSISIDI都称为变址寄存器变址寻址方式X：MOVAXSISIDI都称为变址寄存器操作数R内存段寻址Intel微机中，ALU位运算，但其内存容量可到M，即地址有位将整个M空间存储器以K为单位划分成若干段。在形成位物理地址时，段寄存器中的位数会自动左移位，然后以位偏移量相加堆栈寻址方式堆栈有寄存器堆栈和存储器堆栈两种形式，都以先进后出的方式存取数据不论哪种堆栈，需要一个隐式或显式的堆栈寄存器来指明栈顶（栈指针）的位置（地址）X中，SPStackPoint栈顶指针BPBasePoint栈底堆栈寻址方式根据栈顶状态不同，堆栈分为：满栈：栈指针指向栈顶元素位置空栈：栈指针指向下一个空位置根据增长方向不同，堆栈分为：递减栈：堆栈向内存地址减小的方向生长，即向下生长。递增栈：堆栈向内存地址增加的方向生长，即向上生长。X满栈、递减栈栈指针指向最后压入堆栈的有效数据项，称为满栈（先改变SP，再放数据）；栈指针指向下一个待压入数据的空位置，称为空栈（先放数据，再改变SP）。x栈底栈区xx递增栈：递减栈：寻址方式举例：PentiumEA段寄存器描述符寄存器基址寄存器变址寄存器比例因子偏移量寻址方式举例：MIPS寻址方式举例：RISCV例一种二地址RS型指令的结构如下所示：位位位位位其中I为间接寻址标志位，X为寻址模式字段，A为偏移量字段。通过I，X，A的组合，可构成下表所示的寻址方式。请写出六种寻址方式的名称。OPXAPCR基寻址方式X操作数立即直接间接相对基址有效地址EAEAAEAAEAPCAEARA例设某机的指令格式、有关寄存器和主存内容如下，X为寻址方式，A为形式地址，请在下表中填入有效地址EA及操作数的值。？指令格式设计举例例某机字长位，采用三地址指令，支持种寻址操作，完成种操作，各寻址方式均可在K主存范围内取得操作数，并可在K范围内保存运算结果。问应采用什么样的指令格式？指令字长最少应为多少位？执行一条直接寻址模式指令最多要访问多少次主存？位指令字需占用个存储字取指需访存次，取源操作数访存次，写结果次，共次指令的分类按指令的功能：数据传送实现主存和寄存器之间，或寄存器和寄存器之间的数据传送数据处理定点或浮点算术运算，向量运算、逻辑运算与移位等程序控制用于控制程序的执行方向分支、转移、调用子程序其他指令系统控制，特权，安全等设存储字长和指令字长均为位，若指令系统可完成种操作，且具有直接、间接、变址、基址、相对和立即种寻址方式。在保证最大范围内直接寻址的前提下，指令字中操作码占几位？寻址特征位占几位？可直接寻址的范围是多少？间接寻址的范围是多少？某计算机的字长为位，数据用补码表示，存储器按字编址，访存指令格式为位，其中位操作码，位寻址方式字段，分别表示立即寻址、直接寻址、间接寻址、变址寻址和相对寻址这种，位地址码字段。设PC和Rx分别为程序计数器和变址寄存器其中Rx的位数为位问：立即寻址的数据范围多大？各种寻址方式的寻址范围大小是多少？下列关于各种寻址方式获取操作数快慢的说法中，正确的是I立即寻址快于堆栈寻址II堆栈寻址快于寄存器寻址III寄存器间接寻址快于变址寻址IV变址寻址快于间接寻址MIPS指令系统MIPS指令集特点定长指令，指令长度固定字节简单的loadstore结构，内存中的数据访问严格字节对齐loadstore结构：只有loadstore类指令可以访问存储器寻址方式简单，每条指令的操作也简单易于流水线设计易于编译器开发MIPS寄存器字长位个通用寄存器个特殊寄存器PC（程序计数器）HI和LOHI乘积高位余数，LO：乘积低位（商）；除了用在乘除法之外，也不能有做其他用途硬件没有强制性的指定寄存器使用规则，但是在实际使用中，这些寄存器的用法都遵循一系列约定MIPS里没有状态码，没有标志寄存器个通用寄存器IA的寄存器组织个通用寄存器两个专用寄存器个段寄存器MIPS寻址方式数据寻址方式立即寻址寄存器寻址基址寻址基址寄存器偏移量任一通用寄存器都可以作为基址寄存器MIPS寻址方式指令寻址顺序寻址：PCPCPC相对寻址PC偏移量左移两位PC伪直接寻址（跳跃寻址）位偏移量PCPC偏移量MIPS指令格式OPRSRtshamtRdbitsfunctbitsbitsbitsbitsbitsOPRSRtbits偏移量bitsbitsbitsOPbits偏移量bitsR型指令I型指令J型指令RegisterformatImmediateformatJumpformatMIPS指令格式（R型指令）主要是运算类指令OP：操作码，所有R型指令OP为全Rs：第个源操作数寄存器Rt：第个源操作数寄存器Rd：存放结果的目的操作数寄存器shamt：用于移位指令，指明移位次数funct：功能码，对操作码进行补充OPRSRtshamtRdbitsfunctbitsbitsbitsbitsbitsR型指令MIPS指令格式R型指令寄存器寻址汇编格式：opRdRsRt例：addsss指令编码：MIPS指令格式R型指令xsssMIPS指令格式（I型指令）LS指令和分支指令Rt：目的操作数寄存器Rs和偏移量：源操作数OPRSRtbits偏移量bitsbitsbitsI型指令汇编格式：opRt偏移量RsMIPS指令格式（I型指令）三地址，RR型，立即数运算指令Rs：第个源操作数寄存器Rt：目的操作寄存器偏移量：第个源操作数立即数OPRSRtbits偏移量bitsbitsbitsI型指令汇编格式：opRtRs偏移量MIPS指令格式I型指令立即寻址基址寻址相对寻址MIPS指令格式I型指令addioprs原操作数寄存器rt目的寄存器偏移量负数用补码表示请写出指令的机器码十进制指令格式二进制指令代码xDFFCE十六进制指令代码MIPS指令格式（J型指令）单地址指令跳转指令，用一个位的偏移量作为跳转的目标地址OPbits偏移量bitsJ型指令汇编格式：op偏移量MIPS指令格式（J型指令）伪直接寻址跳转地址为指令中的位偏移量与PC中的高位拼接得到新的PCPC目标地址例：jx指令编码：新PCMIPS指令系统（）数据传送类：（）算术逻辑运算类：（）控制类：、数据传送类：内存数据访问指令读内存指令：lwlblh（I型指令）wwordbbytehhalfword访问元素A，A保存在tlwtt基址寻址写内存指令：swsbsh（I型指令）t的数据保存到A；swtt、算术逻辑运算类：加减指令加法add（R型指令）addssssss减法sub（R型指令）subssssss、算术逻辑运算类：加减指令如何编译下面的C语言表达式abcde编译成多行汇编指令addtsstempbcaddttstemptempdsubstsatempe、算术逻辑运算类：加立即数立即数相加指令addi（I型指令）addissss立即数传送addiszeros寄存器间数据传送addssss利用zero实现寄存器之间的数据传输、算术逻辑运算类：逻辑运算逻辑移位指令sll、srl、sra（R型指令）sllsss左移两位srlsss右移两位逻辑运算andorxoraddiorixori（R型和I型指令）andttttttorttttttandittttoritttt、控制类指令跳转指令、控制类指令C语言条件判断指令Ifabielsei等效C指令IfabgotoLigotoLLiL等效MIPS指令beqssLaddiszerojLLaddiszeroL等效MIPS指令sasbsi、控制类指令比较指令sltslti比较指令sltSetonLessThansltregregreg如果regreg则reg先比较，再分支IfssgotoLessslttsstifssbnetLessiftgotoLess循环结构C语言简单循环结构，A为int数组doggAiiijwhileih重写代码LoopggAiiijifihgotoLoop编译后的变量映射循环结构最后编译的MIPS代码LoopslltstiaddttstAilwtttAiaddsstggAiaddsssiijbnessLoopifihgotoLoop原始C代码LoopggAiiijifihgotoLoop循环结构最后编译的MIPS代码LoopslltstiaddttstAilwtttAiaddsstggAiaddsssiijbnessLoopifihgotoLoop原始C代码LoopggAiiijifihgotoLoopMIPS函数调用C语言函数调用intfunctionintaintbreturnabMIPS实现函数调用的机制返回地址寄存器ra参数寄存器aaaa返回值寄存器vv局部变量ss堆栈指针sp过程调用实现机制sumababssintsumintxintyreturnxyaddaszeroxaaddaszeroybaddirazerorajsum调用函数sumsumaddvaa过程入口jrranew返回主程序instruction过程调用实现机制sumababssintsumintxintyreturnxyaddaszeroxaaddaszeroybaddirazerorajsum调用函数sumsumaddvaa过程入口jrranew返回主程序instructionJjalsum过程调用机制jallabellinkandjumpraPCsavenextinstructionaddressjLabel过程返回指令jrrareturntomainprogram在位MIPS体系结构下，最多可寻址GB地址空间xFFFFFFFFxAxCxBFFFFFFFxxFFFFFFFxFFFFFFFxMIPS内存地址空间数据通路流水线化MARS开源MIPS仿真器，汇编器MIPSX差异精简指令系统RISC选取使用频率最高的一些功能实现，指令条数少便于硬件实现，用软件实现复杂指令功能指令长度固定，指令格式简单，寻址方式简单只有存数取数指令可以访问存储器RS型，其余指令的操作都在寄存器之间进行RR型设置大量寄存器（）一个机器周期完成一条机器指令RISCCPU采用硬布线控制，CISC采用微程序CSIC与RISC互相融合研究生统考例题例某计算机字长为位，主存地址空间大小为KB，按字编址。采用单字长指令格式，指令各字段定义如图，转移地址采用相对寻址方式，相对偏移量用补码表示。寻址方式如图。注x表示存储器地址x或寄存器x的内容（）该指令系统最多可有多少条指令？该计算机最多有多少个通用寄存器？存储器地址寄存器MAR和存储器数据寄存器MDR至少需要多少位？研究生统考例题注x表示存储器地址x或寄存器x的内容（）转移指令的目标地址范围是多少？例某计算机字长为位，主存地址空间大小为KB，按字编址。采用单字长指令格式，指令各字段定义如图，转移地址采用相对寻址方式，相对偏移量用补码表示。寻址方式如表。研究生统考例题注x表示存储器地址x或寄存器x的内容（）若操作码B表示加法操作，助记符为add，寄存器R，R的编号分别为B和B，R的内容为H，R的内容为H，地址H中的内容为H，地址H中的内容为H，则汇编语句addRR逗号前为源操作数，逗号后为目的操作数，对应的机器码是多少？用十六进制表示。该指令执行以后，哪些寄存器和存储单元的内容会发生改变？改变后的内容是什么？例某计算机字长为位，主存地址空间大小为KB，按字编址。采用单字长指令格式，指令各字段定义如图，转移地址采用相对寻址方式，相对偏移量用补码表示。寻址方式如图。MIPS仿真工具MARSMIPS汇编程序汇编源程序由数据声明段和代码段组成。汇编程序文件以s或asm为后缀数据声明以data开始，声明在代码中使用的变量、常量在主存中创建了对应的空间代码段以text开始，由指令构成的程序代码代码以main开始。程序的注释使用符号进行注释。MIPS汇编程序模板TitleFilenameAuthorDateDescriptionInputOutput数据段Datasegmentdata自定义的数据代码段Codesegmenttextgloblmainmainmainprogramentry自己写的代码livExitprogramsyscall数据声明格式：valnamestoragetypevalues创建一个以valname为变量名，values为初值，存储类型是storagetype的变量。变量名后要跟一个英文冒号数据存储类型storagetypeword，half，byte字、半字、字节asciiz字符串，以null结尾varwordvar为一个字变量，初值为，整数arraybyte‘a’‘b’array为两个元素的字节数组，初值分别为a和b的ASCII码arrayspace分配一块连续的内存区域，容量为字节stringasciiz“Printthisn”定义一个字符串汇编指令语句代码部分的语句格式：labelmnemonicoperandscommentLabel标记标记一条指令在内存中的位置，以英文冒号结尾Moemonic助记符MIPS机器指令、汇编伪指令（比如addsub等Operands操作数根据指令格式定义的操作数，可以是寄存器、内存变量、常量Laddiuttt加系统调用syscall取数、存数codesegmentdatavaluewordtextgloblmainmainmain入口latvalue将变量value的地址装入tla是伪指令lwtt将地址t的字数据装入tlwtt将地址t的字数据装入taddttttttswtt将t中的数据存入地址tliv退出syscall机器指令与汇编语言伪指令汇编器定义的，用于增强汇编程序可读性和提高编程效率编译时，汇编器将伪指令翻译为一条或多条机器指令汇编器建立符号表，以记录每个变量和标记的内存地址例符号表DATAvarbyteZstrasciizMyStringnvarwordxALIGNvarhalf符号表symboltableLabelvarstrvarvarAddressxxxx读取并显示一个整数codesegmenttextgloblmainmainmainprogramentryliv号功能调用，读取整数syscallv读取的值moveava要显示的整数值liv号功能调用，显示整数syscallliv退出程序syscallMARS仿真步骤点击工具栏编译程序（快捷键F）运行（快捷键F），“RunIO”窗口显示并输出程序运行结束，系统复位F，重新开始输入并显示字符串DatasegmentdatastrspacearrayofbytesCodesegmenttextgloblmainmainmainprogramentrylaastraaddressofstrliaamaxstringlengthlivreadstringsyscalllivPrintstringstrsyscalllivExitprogramsyscall三个整数相加（）Input分别输入三个整数Output输出和DatasegmentdatapromptasciizPleaseenterthreenumbersnsummsgasciizThesumisCodesegmenttextgloblmainmainlaaprompt显示提示字符串promptlivsyscallliv读第一个数到tsyscallmovetv三个整数相加（）liv读第二个数到tsyscallmovetvliv读第三个数到tsyscallmovetvadduttt累加addutttlaasummsgwritesummessagelivsyscallmoveat输出结果livsyscalllivexitsyscall运行结果小写字母到大写转换Objective小写字母转换到大写Input输入一个字符串Output以大写形式输出DatasegmentdatanamepromptasciizPleasetypeastringoutmsgasciizYournameincapitalsisinnamespacespaceforinputstringCodesegmenttextgloblmainmainlaanamepromptprintpromptstringlivsyscalllaainnamereadtheinputstringliaatmostcharsnullcharlivsyscall小写字母到大写转换laaoutmsgwriteoutputmessagelivsyscalllatinnamet为输入字符串的首地址looplbttload一个字节beqztexitloopift退出循环bltt‘a’nochanget‘a’表示大写，处理下一个字符bgtt‘z’nochanget‘z’表示非字母字符，处理下一个字符addiutt‘a’t‘z’小写转大写Aasbtt保存于字符原位置nochangeaddiuttt指向下一个字符jloopexitlooplaainname输出转换完成的大写字符串livsyscalllivexitsyscall第五章中央处理器本章讨论CPU的功能组成，控制器的工作原理和实现方法，微程序控制原理，基本控制单元的设计以及先进的CPU系统设计技术返回第五章中央处理器CPU功能和组成指令周期时序产生器和控制方式微程序控制器硬布线控制器流水CPURISCCPUCPU的功能和组成CPU的功能冯诺依曼的“存储程序、程序控制”用计算机解决某个问题时，首先编写程序程序是一个指令序列，这个序列明确告诉计算机应该逐步执行什么操作（操作码）在什么地方找到用来操作的数据，结果存到何处（地址码）CPU的功能计算机进行信息处理的过程可分为两步：将程序和数据装入存储器；从程序入口开始取指令，执行指令，得到所需结果，然后结束运行中央处理器是控制计算机自动完成取出指令和执行指令任务的部件计算机的核心部件，简称为CPU（CentralProcessingUnit）CPU的功能指令控制：保证控制器按顺序执行程序操作控制管理并产生一系列操作信号，将它们送往相应的部件时间控制：对各种操作实施时间上的定时数据加工：对数据进行算术和逻辑运算CPU的基本组成早期的CPU由运算器和控制器两大部分组成现在将外围的一些逻辑功能部件纷纷移入CPU，使CPU的组成越来越复杂运算器数据加工处理部件组成ALU、通用寄存器、DR和PSW主要功能执行算术运算执行逻辑运算控制器协调和指挥整个计算机系统的操作组成PC、IR、指令译码器、时序发生器和操作控制器功能从指令Cache中取出一条指令，生成下一条指令在指令Cache的位置；对指令进行译码，产生相应的操作控制信号控制CPU、内存和输入输出设备间的数据流动CPU中的主要寄存器在CPU中主要有以下六类寄存器数据寄存器（DRDataRegister）指令寄存器（IRInstructionRegister）程序计数器（PCProgramCounter）数据地址寄存器（ARAddressRegister）通用寄存器（RRGeneralRegister）状态字寄存器（PSWProgramStatusWord）数据寄存器（DR）暂时保存要写入寄存器的数据指令寄存器（IR）InstructionRegister保存当前正在执行的指令内容OP字段的输出作为指令译码器的输入程序计数器（PC）ProgramCounter保存下一条指令的地址在程序开始执行前必须将起始地址入口地址送入PC修改PC的内容顺序寻址：PCPC常量；常量与指令长度有关相对寻址：PCPC偏移量跳跃寻址：PC偏移量X：EIPMIPS：PC数据地址寄存器（AR）保存访问数据Cache的地址本例中为保持访问数据Cache单元的地址通用寄存器模型中有个通用寄存器（RR）作为ALU的数据源和目的寄存器用作地址指示器、变址寄存器、堆栈指示器等状态字寄存器（PSW）一个由各种状态标志拼凑而成的寄存器模型机中的PSW由ALU的运算结果设置还保存中断和系统工作状态等X：FLAGSMIPS：无操作控制器和时序发生器数据通路：部件之间传送信息的通路操作控制器在各部件之间建立数据通路操作控制器根据指令OP码和时序信号，生成各种操作控制信号，以便正确地建立数据通路，从而完成取指令和执行指令的控制操作控制器和时序产生器操作控制器分为硬布线控制器，采用时序逻辑技术实现微程序控制器，采用存储逻辑实现时序产生器产生并发出计算机所需要的时序信号对各种控制信号实施时间上的控制指令周期指令周期的基本概念MOV、的指令周期LAD指令的指令周期ADD指令的指令周期STO指令的指令周期JMP指令的指令周期用方框图语言表示指令周期指令格式设计编码操作码位数地址码位数：双地址码、单地址码偏移量、寄存器位数数据寻址方式直接寻址、寄存器寻址、寄存器间接寻址指令寻址方式顺序寻址、跳跃寻址不设定寻址特征位，由操作码默认指定寻址方式指令周期的基本概念运行程序第一步：从内存中取一条指令第二步：执行该指令周而复始指令周期的基本概念上述步骤所需时间从内存取出一条指令的时间：取指周期分析并执行这条指令的时间：执行周期指令周期取指周期执行周期从内存取出一条指令、分析并执行这条指令的时间总和指令功能不同，其指令周期不同指令周期的基本概念一个指令周期划分为若干CPU周期CPU周期又称机器周期通常指从内存读一个字的最短时间取指周期包含若干CPU周期执行周期包含若干CPU周期功能不同的指令，可能包含不同数目的CPU周期指令周期的基本概念一个CPU周期包含若干时钟周期时钟周期：T周期、节拍脉冲处理操作的最基本时间单位ALU完成一次正确的运算寄存器间的一次数据传送等相互关系：个指令周期取指周期执行周期若干个CPU周期个CPU周期若干时钟周期指令周期的基本概念指令周期取指周期执行周期取指周期个CPU周期执行周期个CPU周期CPU周期个T周期单周期CPU和多周期CPU单周期CPU在一个CPU周期内完成从取指、译码到执行的所有工作效率低多周期CPU把指令执行周期分成多个阶段，每个阶段在一个CPU周期完成容易流水线执行，效率高简单定义一个指令集条指令，单字长，字长为B，个寄存器MOV寄存器数据传输RR型LADSTO取数存数RS型ADDAND加法与RR型JMP转移RS型简单定义一个指令集指令寻址方式顺序寻址：PC跳跃寻址：PC偏移量数据寻址方式直接寻址：EA偏移量寄存器寻址：EAR寄存器间接寻址：EAR指令格式设计操作码（OP）定义条指令：MOVLADSTOADDANDJMPMOV寄存器寻址双地址码，功能：RsRdLAD直接寻址，功能：ARsSTO寄存器间接寻址，RsRd指令格式设计类MIPSJMP跳跃寻址APCADD寄存器寻址RsRdRdAND寄存器寻址RsRdRd指令格式设计一个小程序一个小程序六条典型指令组成的简单程序示例程序运行到地址时，各寄存器的值是多少？如何设计指令周期前提：掌握每个指令要执行的操作识别出各个部件的控制命令两个阶段取指阶段、执行阶段两个步骤找出数据通路：数据从哪里来，经过哪些部件，最终达到哪里确定操作信号：形成上述数据通路所需的操作控制信号图的结构控制信号总线三态门：C、C、C存储器：数据Cache读写RDD、指令Cache读RDI寄存器：每个寄存器都有输入和输出控制信号输入控制信号：PCin、Riin，DRin等输出控制信号：PCout、Riout等PC：PCALU：加、与、传送DCache读写ICache读MDRinPCoutPCinARinRioutRiinIRin如何设计指令周期时间设计：各个操作在哪个时钟周期发生取指周期？CPU周期执行周期？CPU周期个CPU周期定义从内存读写一个数据或使用共享总线传输一个数据，总线只能有一个源一个CPU周期内数据不能产生冲突图中IBUS是独占的、DBUS是共享的个CPU周期包括个T周期：TT指令周期从内存取出一条指令、分析并执行这条指令的时间总和指令周期取指周期执行周期若干个CPU周期个CPU周期若干时钟周期如何设计指令周期前提：掌握每个指令完成的功能，要执行的操作识别出各个部件的控制命令分两个阶段取指阶段、执行阶段三个步骤找出数据通路：数据从哪里来，经过哪些部件总线，最终达到哪里确定操作信号：形成上述数据通路所需的操作控制信号分配CPU周期如何设计指令周期分配CPU周期：各个操作信号在哪个CPU周期发出取指周期？CPU周期执行周期？CPU周期个CPU周期定义从内存读写一个数据或使用共享总线传输一个数据，总线只能有一个源一个CPU周期内数据不能产生冲突DCache读写ICache读MDRinPCoutPCinARinRioutRiinIRinIBUS是独占的、DBUS是共享的个CPU周期包括个T周期：TTMOV指令的指令周期MOVRR单字长，RR型取指阶段：数据通路：从指令Cache中取出指令经过IBUS写入IRPCABUSIICacheIBUSIR操作控制：形成上述数据通路的控制信号PC内容输出到指令Cache指令Cache读操作，通过IBUS写入IRPC，为取下一条指令做好准备对IR中的OP译码，以确定进行什么操作PCoutIRinICache读MOV指令的指令周期取指周期：完成三件事从指令Cache取出指令到IRPC，为取下一条指令做好准备对IR中的OP译码，以确定进行什么操作执行周期将数据从R传送到R由于操作简单，只需要一个CPU周期PC中装入第一条指令地址；PC的内容被放到ABUS（I）上，指令Cache进行译码，发出读命令；R从号地址读出的MOV指令通过IBUS装入IR；PC，变成，为取下一条指令做好准备；对IR中的OP译码，识别出是MOV指令，取指阶段即告结束MOV指令的取指阶段MOV指令的取指周期操作PC内容输出到指令Cache读指令Cache取出，指令写入IRPC；对IR中的OP译码时间访问内存取一条指令，需要个CPU周期MOV指令的执行周期将数据从R传送到ROC送出控制信号到通用寄存器，选择R做源寄存器，选择R作目标寄存器；OC送出控制信号到ALU，指定ALU做传送动作；OC送出控制信号，打开ALU输出三态门C，将ALU输出送到DBUS上；OC送出控制信号，将DBUS上的数据打入到DROC送出控制信号，将DR中的数据打入R，R的内容由变为至此，MOV指令执行结束MOV指令的执行阶段MDRinRioutRiinMOV指令的指令周期MOVRR单字长，RR型执行阶段：数据通路：寄存器R的数据传输到RRALUDBUSDRR操作控制：形成上述数据通路的控制信号选择R做源寄存器，指定ALU做传送动作打开ALU输出三态门C，将ALU输出送到DBUS上将DBUS上的数据写入到DR将DR中的数据写入R，R的内容由变为OC送出控制信号到通用寄存器，选择R做源寄存器，指定ALU做传送操作MOC送出控制信号，打开C，将ALU输出送到DBUS上将DBUS上的数据打入到DR；将DR中的数据打入到R，R的内容由变为MOV指令的执行周期DRinRoutRinMOV指令的执行周期操作选择R做源寄存器，指定ALU做传送动作；打开ALU输出三态门C，将ALU输出送到DBUS上；将DBUS上的数据写入DR将DR中的数据写入R时间：使用一次共享总线DBUS，需要个CPU周期MOV指令的指令周期取指执行MOV指令的指令周期（简化）取指执行只考虑一个CPU周期内的操作MOV指令的指令周期（再简化）MOV指令的指令周期MOVRR取指周期个CPU周期执行周期个CPU周期LAD指令LADR单字长，RS型取指阶段同MOV指令相同执行阶段数据通路：访问内存地址的单元，取出数据写入RIRARABUSDDBUSDRR控制信号：打开C，将地址码放到DBUS上；将地址码装入AR，数存进行地址译码；读数存号单元，数读出到DBUS上；将DBUS上的数据写入DR；将DR中的数据写入RARinDCache读DRinRinLAD指令的执行周期控制信号：打开C，将地址码放到DBUS上；将地址码装入AR，DCache进行地址译码；读数存号单元，数读出到DBUS上；将DBUS上的数据写入DR；将DR中的数据写入RLAD指令的执行周期时间设计：序号和，访问一次内存并使用DBUS，需要个CPU周期序号、和，使用一次DBUS，需要个CPU周期LAD指令的执行周期（简化）LAD指令的指令周期LAD指令的指令周期LADR单字长RS型取指令PC译码指令取出操作数取下条指令PC取指周期开始执行周期装入通用寄存器LAD指令的指令周期LADR单字长RS型取指令PC译码指令取出操作数取下条指令PC取指周期开始执行周期装入通用寄存器ADD指令的指令周期ADDRR单字长，RR型执行阶段OC送出控制信号到通用寄存器，选择R和R做源寄存器OC送出控制信号到ALU，指定ALU做加法打开C，将运算结果输出送到DBUS上OC送出控制命令，将DBUS上的数据打入到DROC送出控制命令，将装入R，R的内容由变为ADD指令的执行RoutRoutDRinRinADD指令的执行数据通路RALU、RALU，ALUDBUSDRR操作控制选择R和选择R，R和R加法操作打开三态门C，将运算结果输出送到DBUS；将DBUS上的数据打入DR；将DR中的数据写入R，R的内容由变为ADD指令的执行周期选择R和R输出到ALU，指定让ALU做加法操作；打开C，运算结果输出送到DBUS；DBUS上的数据写入DR；DR中的数据写入R时间：占用一次DBUS总线，个CPU周期ADD指令的指令周期ADD指令的指令周期ADDRR单字长RR型取指周期：个CPU周期执行周期：个CPU周期STO指令的指令周期STORR单字长、RS型执行阶段数据通路：R通过DBUS到AR，数据Cache地址译码，R的内容通过Dbus写入数据Cache（）OC送出操作命令到通用寄存器，选择R；STO指令的执行Rout（）OC送出命令打开C，将地址放到DBUS上；STO指令的执行（）OC发出操作命令，将装入AR，数存开始地址译码STO指令的执行ARin（）OC发出命令到通用寄存器，选择RSTO指令的执行Rout（）OC发出操作命令，打开三态门C，将数据放到DBUS上；STO指令的执行（）OC发出命令，将数据写入号单元，它原先的数据被覆盖STO指令的执行DCache写STO指令的执行选择R，打开三态门C，将地址放到DBUS上；地址装入AR；选择R，打开三态门C，将数据放到DBUS上；将数据写入数存号单元时间：使用两次DBUS，需要两个CPU周期STO指令的指令周期STO指令的指令周期STORR单字长RS型个CPU周期JMP指令的指令周期JMP无条件转移指令，改变程序的执行顺序单字长、单地址执行阶段数据通路：IP中的通过DBUS到达PC操作控制（）打开三态门C，将IR中的地址码发送到DBUS上JMP指令的执行（）将DBUS上的地址码打入到PC中，PC中原先的内容被覆盖JMP指令的执行PCinJMP指令的执行周期打开C，地址码发送到DBUSDBUS上的地址码写入到PC时间：占用一次总线，需要个CPU周期JMP指令的指令周期JMP指令的指令周期JMP个CPU周期指令周期指令周期用方框图语言表示指令周期采用方框图（指令流程图）来表示指令周期一个矩形框代表一个CPU周期矩形框中的内容表示数据通路矩形框右边写出控制信号菱形框表示判断或测试时间上依附于前一个方框的CPU周期，不独占一个CPU周期公操作符号“”一条指令执行完毕后CPU进行的一些共性操作，中断请求、DMA请求等指令周期译码PCoutIRinPCPCIR方框图表示指令周期由上图可见，对于图的模型机所有指令的取指周期是完全相同的，而且是一个CPU周期。在执行周期，由于各条指令的功能不同，所用的CPU周期也是各不相同MOV、ADD、JMP指令是一个CPU周期LAD、STO指令是两个CPU周期，需要访问内存RiRoRoRi例的数据通路图RiRoRoRi画出下面指令的指令周期流程图，假设该指令的地址已放入PC中。列出相应的微操作控制信号序列“ADDR，R”指令完成RRR的功能“SUBR，R”指令完成RRR的操作基本步骤取指周期写出取指周期数据通路PCxxxxIR写出的控制信号形成上述数据通路要记得PC设定操作控制信号的时间使用一次总线或访问一次内存为一个CPU周期根据经验执行周期根据执行周期要完成的操作写出数据通路具体指令具体分析，依据具体功能写出形成上述数据通路的控制信号设定操作控制信号的时间RS型指令需要更多的CPU周期取指周期ADDR，R数据通路：PCBGAARMDRBGAIR取指周期ADDR，R数据通路：PCBGAARMDRBGAIR控制信号：PCo、G、ARiRDRo，G、IRi取指周期ADDR，R时间分配数据通路：控制信号PCBGAAR：PCo、G、ARi（个CPU周期）MDR：R（个CPU周期）DRBGAIR：DRo，G、IRi（个CPU周期）取指周期ADDR，RPCARPCo、G、ARiMDRRDRIRDRo，G、IRi，PCADD指令执行周期ADDR，RADDR，R”指令完成RRR的功能数据通路：RBGAX；RBGAY；ALUBGAR执行周期ADDR，RADDR，R”指令完成RRR的功能数据通路：控制信号RBGAXRo，G、XiRBGAYRo，G、YiALUBGAR，ALUo，G、Ri执行周期ADDR，R时间分配ADDR，R”指令完成RRR的功能数据通路：控制信号RBGAXRo，G、Xi（个CPU周期）RBGAYRo，G、Yi（个CPU周期）ALUBGAR，ALUo，G、Ri（个CPU周期）执行周期ADDR，RRXRo，G、XiRYRo，G、YiALUR，ALUo，G、Ri“ADDR，R”指令是一条RR型加法指令图的右边部分标注了每一个机器周期中用到的微操作控制信号序列。ALUR“SUBR，R”在执行阶段，微操作控制信号序列与ADD指令有所不同。ALU时序产生器和控制方式时序产生器作用和体制时序信号产生器控制方式时序产生器作用和体制计算机的协调动作需要时间标志，而时间标志则是用时序信号来体现用时序信号辨认从内存中取出的是指令还是数据，是取指周期还是执行周期一个CPU周期中时钟脉冲对CPU的动作有严格的约束操作控制器发出的各种信号是时间（时序信号）和空间（部件操作信号）的函数数据：电位控制信号：脉冲、时序产生器作用和体制时序信号的基本体制是电位脉冲制（以触发器为例）电位：用电平的高低进行控制脉冲：用信号的边沿进行控制在微程序控制器中，采用节拍电位节拍脉冲二级体制时序信号产生电路简单一个CPU周期称为一个节拍电位、时序产生器作用和体制TTTT节拍电位节拍脉冲CC在微程序控制器中，采用节拍电位节拍脉冲二级体制时序信号产生电路简单一个CPU周期称为一个节拍电位、时序产生器作用和体制TTTTCPU周期CPU周期节拍电位节拍脉冲硬布线控制器中，时序信号往往采用状态周期节拍电位节拍脉冲三级体制时序信号产生电路复杂状态周期是电位信号，指明当前指令处于哪个状态比如，一个指令的状态周期包括取值周期和执行周期两个状态，取指周期包括个CPU周期，执行周期包括个CPU周期、时序产生器作用和体制TTTTCPU周期CPU周期节拍电位节拍脉冲状态周期状态周期节拍电位节拍脉冲三级体制取指周期执行周期CCC、时序信号产生器时钟源石英晶体振荡器环形脉冲发生器节拍脉冲启停控制逻辑本书模型机启动时，一定要从T前沿开始；停机时一定要在T结束后关闭时序产生器时钟源时钟源用来为环形脉冲发生器提供频率稳定且电平匹配的方波脉冲信号它通常由石英晶体振荡器和与非门组成的正反馈振荡电路组成，其输出为一个理想的方波、环形脉冲发生器CCCC作用：产生一组有序间隔相等或不等的脉冲序列、节拍脉冲、节拍脉冲、时序信号举例MOVRR该指令的取指周期的需要一个节拍电位，即一个CPU周期，操作信号的节拍脉冲划分为：PCABusI：TIBusIR：TIR中OP指令译码器：T、时序信号举例MOVR，R该指令的执行周期需要一个节拍电位操作信号的节拍脉冲划分为：设置ALU完成传送操作：TRALU：TDBusDR：TDRR：T在一个节拍电位中完成四个有时序关系的操作TTTTCPU周期节拍脉冲DBusDR：T信号来自译码器，持续一个节拍电位时间、节拍脉冲和读写时序节拍脉冲节拍电位启停控制逻辑启动、停机具有随机性当计算机启动时，一定要从节拍点位T前沿开始工作停机时一定要在节拍点位T结束后关闭时序产生器控制方式指令周期由若干个CPU周期组成每条指令所需的时间各不相同每个操作控制信号所需的时间及出现的次序各不相同形成控制操作序列的方法，称作控制器的控制方式有同步控制、异步控制、联合控制三种方式同步控制方式CPU周期数固定、时钟周期数固定节拍电位数固定，节拍脉冲数固定与指令功能、操作复杂度、操作数类型无关设计时固定，与指令的执行无关具体方案：采用统一的CPU周期采用不定长CPU周期中央控制与局部控制结合大部分采用统一CPU周期，个别指令采用不定长CPU周期异步控制方式CPU周期数可变、时钟周期数可变可变：在指令执行时变化每条指令的指令周期所需的CPU周期数不等需要多少时间就占用多少时间反馈机制：执行部件完成操作后发“回答”信号联合控制方式同步控制和异步控制相结合的方式两种实现方法大部分指令同步控制，少数操作采用异步方式CPU周期数可变、时钟周期数固定微程序控制器英国剑桥大学的MVWilkes教授于年首先提出年，IBM公司在IBM系列机上成功地采用了微程序设计技术世纪年代以来，由于VLSI技术的发展，推动了微程序设计技术的发展和应用目前，x系列几乎都采用微程序设计技术，ARM采用微程序和硬连线相结合微程序控制器微程序控制（microprogrammingcontrol）基本思想把操作控制信号编制成微指令，存放到只读存储器（控制存储器）里；运行时，从控存中取出这些微指令，从而产生所需的各种操作控制信号微程序设计技术是用软件方法来设计硬件微程序控制原理微命令和微操作部件分为两种：控制部件和执行部件微命令：控制部件通过控制线向执行部件发出的控制命令微操作：执行部件接受微命令后所进行的操作微操作在执行部件中是最小、最基本的操作微命令和微操作微命令和微操作一一对应控制门电位信号的变化、寄存器输入端的控制、ALU的基本执行过程微操作可分为相容和互斥两种：互斥：是指不能同时或不能在同一个CPU周期内并行执行的微操作相容：是指能够同时或在同一个CPU周期并行执行的微操作（，，M）在同一个CPU周期中只能选择一个，因而是互斥的微命令类似地，，，也是互斥的微命令，，是可以同时进行的，所以是相容的微命令X输入控制，，和Y输入的，，中任意两个微命令也是相容的微指令和微程序微指令Microinstruction：在一个CPU周期中，一组实现一定操作功能的微命令的组合在同一CPU周期内并行或并发执行的微命令的组合微指令存储在控制器中的控制存储器中微指令和微程序微程序一系列微指令的有序集合就是微程序一段微程序对应一条机器指令微地址：存放微指令的控制存储器的单元地址机器指令微程序微指令微命令微操作以简单运算器通路图的微指令格式为例：PCLDIRLDARLDDRRD微指令和微程序微指令格式举例微指令字长为位，由操作控制和顺序控制两大部分组成微指令和微程序操作控制字段，发出控制信号每一位表示一个微命令某一位为表示发出相应的微命令，为不发出微指令和微程序顺序控制字段，产生下一条微指令的地址（微地址）后四位：直接微地址PP：判断测试标志PP：使用后四位直接微地址PP：P测试条件满足，新微地址直接微地址条件不满足，新微地址对直接微地址修改PP：P测试微程序控制器原理框图它主要由控制存储器、微指令寄存器和地址转移逻辑三大部分组成AR控制存储器CM：ControlMemoryCM是微程序控制器的核心部件存放微程序只读存储器CM的字长是微指令字的长度字数微指令数量存储容量微指令字的长度X微指令数量控制存储器用于存放微程序控制存储器与主存对比（）微指令寄存器IR微地址寄存器和微命令寄存器组成微地址寄存器AR：下一条微指令的微地址微命令寄存器：微指令的操作控制字段和判别测试字段（）地址转移逻辑修改微地址根据IP中的OP字段译码产生微地址（入口微地址）顺序控制字段中的直接微地址给出下一条微指令的地址通过判别测试字段P和执行部件的反馈信息，形成新的微地址微程序举例假设在某编程环境下，需要完成BCD码加法运算，代码：bba假定该代码的汇编语言是bR，aR对于该指令，共耗费个CPU周期异步控制指令ADDBRR十进制加法指令周期流程图取指令ab运算ab运算减运算P测试，表示译码操作，用OP字段作为形成微指令的地址加法运算P测试，用Cy的状态来修改微地址寄存器的最后一位本条微指令的微地址默认后继微地址微程序举例一条微指令对应一个方框微指令周期等于一个CPU周期一个方框对应与一个CPU周期指令流程图中有多少方框意味着该指令对应的微程序包含多少条微指令第一条是取指微指令，要发出的微命令是LDIR、PC，LDARP译码测试微程序举例微程序举例第二条微指令的二进制编码是第二条微指令发出的微命令是RX，RY，，LDR微程序举例第三条微指令的二进制编码是第三条微指令发出的微命令是RX，RY，，LDRP判断测试微程序举例第四条微指令的二进制编码是第四条微指令发出的微命令是RX，RY，，LDR微程序存放示意图顺序控制地址操作控制字段控制存储器CM取指微指令RRR微指令RRR微指令RRR微指令指令ADDBRR执行微程序一条机器指令的微程序由取指微程序和执行微程序组成微程序存放图的主存控存CM微程序控制器的工作过程取指微程序执行取指周期的操作PCIR，PC译码：OP字段输出到地址转移逻辑，产生对应的执行微程序的入口地址，送入AR微程序控制器的工作过程根据AR从CM中取出微指令，并产生下一条微指令的地址送入AR微程序控制器的工作过程执行微程序的最后一条微指令执行完毕后，将AR设为取指微程序的入口地址，从而返回第步周而复始，直到所有机器指令执行完毕CPU周期和微指令周期的关系一个微指令周期与CPU周期时间相等TTT时间执行微指令如运算等T上升沿打入结果至寄存器T时间读取微指令机器指令与微指令的关系一条机器指令对应一段微程序一段微程序由若干条微指令组成一个微指令包含多个微命令机器指令、程序和地址与内存有关微指令、微程序和微地址与控制存储器有关写控制读控制选择WAWAW选择RARAR不写入不读出RRRRRRRR例设某计算机运算器框图如图所示，其中ALU为位的补码加法器，SASB为位暂存器，个通用寄存器的读、写控制功能见下表机器采用微程序控制方式，微指令操作控制字段格式如下未考虑顺序控制字段：要求：写出如下指令执行周期微程序的编码：“ADDR，R”指令，即RRR“SUBR，R”指令，即RRR“MOVR，R”指令，即RR写出微程序：画出ADDR，R指令的流程图RARARLDSALDSBRARARSBALUWAWAW写出微程序：画出SUB指令的流程图RARARLDSALDSBRARARWAWAW写出微程序：画出MOV指令的流程图RARARLDSASBALUWAWAWReset微程序设计技术设计微指令应当追求的目标缩短微指令的长度减小控制存储器的容量提高微程序的执行速度便于对微指令的修改提高微程序设计的灵活性操作控制字段和顺序控制字段的设计如何用二进制表示各种操作控制信号如何形成下一个微地址目标可能是矛盾的！、微命令编码操作控制字段采用的表示方法直接表示法编码表示法混合表示法（）直接表示法每一位表示一个微命令“”表示不发出该微命令“”表示发出该微命令优点：结构简单，并行性强，操作速度快缺点：每条微指令要包含所有的微命令，微指令太长，导致CM容量较大（）编码表示法把相斥的微命令编成一个小组，然后通过译码器对小组信号进行译码，输出作为微命令微指令字缩短，译码电路使微指令的执行速度减慢比如：个微命令如何编码？要考虑不发出任何微命令的状态（）混合表示法直接表示法与编码法结合综合考虑指令字长、灵活性、执行微程序速度等方面的要求、微地址的形成方法确定下一条微指令的微地址下一条微指令的微地址成为后继微地址计数器方式多路转移方式（断定方式）（）计数器方式顺序执行时后继微地址当前微地址增量；类似指令的顺序寻址非顺序执行（分支）时后继微地址微地址字段类似跳跃寻址特点顺序控制字段较短，微地址产生机构简单多路并行转移功能较弱，速度较慢，灵活性较差）多路转移方式（断定方式）一条微指令具有多个转移分支的能力称为多路转移顺序执行时后继微地址微地址字段非顺序执行（分支）时按“判别测试”标志和“状态条件”信息产生一个微地址）多路转移方式特点：能以较短的顺序控制字段配合，实现多路并行转移，灵活性好，速度较快，需要设计地址转移逻辑某计算机采用微程序控制器，共有条机器指令，公共的取指令微程序包含条微指令，各指令对应的执行微程序平均由条微指令组成，采用多路转移法确定下条微指令地址，则微指令中下址字段微地址字段的位数至少是ABCD微指令分类微指令格式分成两类：水平型微指令和垂直型微指令（）水平型微指令一次能定义并执行多个并行操作微命令的微指令，叫做水平型微指令微指令中设置微操作码字段，由微操作码规定微指令的功能，称为垂直型微指令其结构类似于机器指令的结构每条微指令的功能简单采用较长的微程序结构去换取较短的微指令结构（）垂直型微指令垂直型微指令寄存器寄存器传送型运算控制型访问主存条件转移水平型微指令与垂直型微指令水平型微指令并行操作能力强，效率高，执行时间短、灵活性强微指令字较长，微程序短，控存容量大，性能佳垂直型微指令字长短，微程序长，控存容量小，性能差垂直型与指令相似，易于掌握微指令设计与微指令格式微程序设计静态微程序设计微程序设计好之后，存放在ROM中，无法修改动态微程序设计采用EPROMFlash作为控制存储器，微程序可以根据改变指令仿真在一台机器上实现不同类型的指令系统硬连线控制器硬连线控制器Hardwiredcontroller也称为硬布线控制器把控制器看作产生控制信号的逻辑电路由门电路和触发器构成返回基本思想输出信号微操作控制信号微命令CPU结构LDIRTLDDRTPCLDPCTRDIRDDWEDTLDRTLDARTCPU结构LDIRTLDDRTPCLDPCTRDIRDDWEDTLDRTLDART每个操作控制信号的含义是：RDI读指存RDD读数存WED写数存LDPC写入PCLDIR写入IRLDAR写入ARLDDR写入DRPCLDR写入R寄存器指令周期流程图如何区分不同的CPU周期？指令周期流程图如何区分不同的CPU周期？硬连线控制器时序设定M、M、M三个电位信号，各自等于一个CPU周期每个CPU周期包括个节拍脉冲（TT）三级时序同步控制MM固定个机器周期，个节拍M节拍电位硬连线控制器的指令周期流程图采用同步控制方式，将所有指令的指令周期都设为个CPU周期图中M、M、M为节拍电位信号，各自等于一个CPU周期MOV、ADD和JMP指令在M不执行任何操作微操作控制信号产生在微程序控制器中微命令由微指令产生。在硬连线控制器中微命令由布尔代数表达式描述的输出函数产生。硬连线控制器设计方法画出指令周期流程图，明确各节拍控制信号找出产生同一个微操作信号的所有条件，建立操作时间表与时序信号组合，写出逻辑表达式化简、用门电路或可编程器件物理实现。例根据图，写出以下操作控制信号RDI、RDD、WED、LDPC、LDIR、LDAR、LDDR、PC、LDR的逻辑表达式。其中每个操作控制信号的含义是：RDI指存读命令RDD数存读命令WED数存写命令LDPC打入程序计数器LDIR打入指令寄存器LDAR打入数存地址寄存器LDDR打入数据缓冲寄存器PC程序计数器加LDR打入R寄存器LDIRTLDDRTPCLDPCTRDIRDDWEDTLDRTLDART每个操作控制信号的含义是：RDI读指存RDD读数存WED写数存LDPC写入PCLDIR写入IRLDAR写入ARLDDR写入DRPCLDR写入R寄存器例根据图，写出以下操作控制信号RDI、RDD、WED、LDPC、LDIR、LDAR、LDDR、PC、LDR的逻辑表达式。解：（）画出指令周期流程图（）列出微操作时间表（根据数据通路和操作流程图）（）列出微操作时间表（根据数据通路和操作流程图）列出在每个微命令在哪个电位、哪个节拍、哪个指令发产生？（）列出微操作时间表（根据数据通路和操作流程图）设M、M、M是节拍电位信号；T、T、T、T为一个CPU周期中的节拍脉冲信号；MOV、LAD、ADD、STO、JMP是机器指令OP操作码字段译码输出信号（）进行微操作信号的组合得到如下逻辑表达式：LDIRMTLDARMTLADSTOLDDRMTMOVADDMTLADPCMLDRMTADD（）最后给出电路（省略）硬连线与微程序控制器比较硬连线控制器执行速度快硬连线控制器设计复杂，代价昂贵微程序控制器设计简单，便于维护修改PentiumCPU年初um工艺，万晶体管V电压，功耗W非固定长度指令格式，种寻址方式，条指令，兼具有RISC和CISC特性提供了更加灵活的存储器寻址结构，可以支持传统的k大小的页面，也可以支持M大小的页面（TLB）动态转移预测技术（BTB转移目标缓存）Pentium结构图哈佛结构Cache路超标量位CPU位FPU外部数据总线宽度为位，外部地址总线宽度为位微程序控制器RISCCPU三个要素：一个有限的简单的指令集；配备大量的通用寄存器；对指令流水线的优化编译技术RISCCPURISC机器的特征：使用等长指令（B）寻址方式少且简单只有取数指令、存数指令访问存储器指令数目相对较少，指令格式简单指令功能简单，控制器多采用硬连线方式指令的执行平均时间CPI为一个时钟周期。配置大量寄存器、优化使用。支持指令流水并强调指令流水的优化使用。RISC技术的复杂性在它的编译程序RISC与CISC的主要特征对比MIPSAptiv框图硬布线控制器指令缓存数据缓存总线接口内存管理单元算术与逻辑运算器协处理器指令译码器通用寄存器浮点运算器ARM处理器框图平均微程序为条微指令本章重点内容CPU的功能（控制器的功能、类寄存器）指令周期基本概念设计指令周期，画指令周期流程图时序产生器和控制方式基本原理微程序控制器工作原理微程序设计基本概念硬连线控制器基本概念本章容易混淆的一些概念周期表示一段时间。指令周期指机器指令从取指到执行完成所花的时间，包括取指周期和执行周期。CPU周期机器周期，一个CPU周期包括多个节拍脉冲。节拍脉冲T周期，处理操作的最基本单位指令周期CPU机器周期节拍脉冲数据通路举例某机字长位，指令位定长；指令ADDR，R的功能为RRR，即将R中数据与R内容所指向的主存单元的数据相加，并将结果送入R内容所指向的主存单元中；数据通路图中控制信号为表示有效，假设MAR输出一直处于使能状态；数据通路举例取指令周期CCCMARMDRPCIR下表为取指令和译码阶段每个节拍时钟周期的功能和控制信号，请按相同方式给出执行阶段各节拍的功能和有效控制信号。数据通路举例执行指令周期CCCMARMDRARA数据通路举例执行指令周期CCMARMDRAACRRR流水CPU并行处理技术流水CPU的结构流水线中的主要问题PentiumCPU并行处理技术并行性的两种含义：同时性指两个以上事件在同一时刻发生；并发性指两个以上事件在同一时间间隔内发生。计算机的并行处理技术主要有以下三种形式：时间并行空间并行时间并行空间并行时间并行让多个处理过程在时间上相互错开，轮流重叠地使用同一套硬件设备的各个部分，以加快硬件周转而赢得速度。实现方式是采用流水处理部件。目前的高性能微型机几乎无一例外地使用了流水技术。并行处理技术并行处理技术空间并行指资源重复（空间因素），以“数量取胜”VLSI为其提供了技术保证。时间并行空间并行指时间重叠和资源重复的综合应用流水线原理时间并行把任务分成若干子任务，使子任务在流水线的各阶段并发地执行空间并行资源重复多处理器系统和多计算机系统时间并行空间并行时间重叠和资源重复的综合应用。奔腾CPU采用超标量流水技术，一个机器周期执行两条指令。指令周期细分取指令IFInstructionFetch指令译码IDInstructionDecode执行运算EXExecution访存阶段MEM结果写回WBWriteBack一条指令不一定经历所有阶段IFIDEXMEMWB非流水线时空图流水线时空图完成N条指令需要的时间n超标量流水线时空图时间TIFIDEXWB空间SIIIIIIIIIIIIIIIIII具有两条以上的指令流水线。满载时，每一时钟周期可以执行条指令II流水线分类指令流水线取指译码取数执行算术流水线加法器乘法器快速傅里叶变换器处理机流水线由一串级连的处理机组成每台处理机负责某一特定任务一个计算机系统可以在不同的并行等级上采用流水线常见流水线有：处理机流水线：程序步骤的并行由一串级联的处理机构成流水线的各个过程段，每台处理机负责某一特定的任务。处理机流水线应用在多机系统中。指令流水线：指令步骤的并行将指令流处理过程分为取指令、译码、执行、写回等几个并行处理过程段。算术流水线：运算操作步骤的并行如流水加法器、流水乘法器、流水除法器等。流水线分类流水线的相关冲突（hazzard）资源相关取操作数与取指令都需要访问主存计算PC、分支地址，运算指令复用ALU增加部件消除数据相关指令操作数依赖于前一条指令的执行结果引起流水线停顿直到数据写回分支相关转移指令使得流水线发生中断提前取出的指令作废，流水线清空理想指令流水线将指令过程分成个阶段IF、ID、EX、MEM、WB不同阶段之间设置缓冲接口部件（绿色部分）接口部件本质是寄存器各段通过接口传递与指令相关的数据，控制，反馈信息对数据的加工处理依赖于前段接口传递过来的信息MIPS经典段流水线流水线段间寄存器流水线中的主要问题流水线要有良好的性能，必须能够畅通流动，不发生断流流水过程中通常会出现以下三种相关冲突（Hazard），使流水线断流。资源相关数据相关控制相关数据相关处理增加相关检测判定逻辑当前指令读寄存器与后续条指令写寄存器相同当前指令可能有个读寄存器后续条指令可能有个写寄存器相关处理逻辑流水线停顿数据重定向数据相关处理机制软件方法（编译器完成）插入空指令调整程序顺序，使相关性在流水线中消失硬件方法寄存器堆写入和读出分离（先写后读，下跳沿写）插入气泡（空操作）数据重定向bypass（数据旁路）将后端处理后的数据（还没来得及写回）重定向数据在哪就从哪送到运算器资源相关多条指令进入流水线后在同一段时间内争用同一个功能部件所发生的冲突。在时钟时，I与I两条指令发生争用存储器资源的相关冲突解决资源冲突的办法：冲突指令停顿若干周期，直到冲突消失；增设一个存储器，将指令和数据分别放在两个存储器中。数据相关在流水计算机中，由于多条指令的重叠处理，当后继指令所需的操作数，刚好是前一指令的运算结果时，便发生数据相关冲突。如下表所示，ADD指令与SUB指令发生了数据相关冲突。数据相关例：两条指令发生数据相关冲突ADDRRRRRRSUBRRRRRRANDRRRRRR数据相关RAWReadAfterWrite后面指令用到前面指令所写的数据WAWWriteAfterWrite两条指令写同一个单元WARWriteAfterRead后面指令覆盖前面指令所读的单元解决办法：可以推后后继指令对相关单元的读操作设置转发通路（Forwarding）例流水线中有三类数据相关冲突：写后读相关；读后写相关；写后写相关。判断以下三组指令各存在哪种类型的数据相关。IADDR，R，R；RRRISUBR，R，R；RRRISTOMx，R；RMx，Mx是存储器单元IADDR，R，R；RRRIMULR，R，R；RRRIADDR，R，R；RRR写后读RAW相关读后写WAR相关写后写WAW相关控制相关由转移指令引起的。当前指令有跳转，但流水已经开启后续指令处理过程解决技术：延迟转移法由编译程序重排指令序列，让跳转的指令接在最后流水入口转移预测法用硬件预测将来的行为，提前让转移指令进流水。指令调度为了充分发挥指令流水线的效率，减小断流，降低指令间的相关性，在保证程序正确执行的前提下，需要对指令的执行顺序进行重新编排静态调度由编译器在编译过程中对指令进行调度动态调度由控制器在指令执行过程中进行调度，对程序员透明乱序执行（OutOfOrder）记分牌算法，Tomasulo算法PentiumCPU年初um工艺，万晶体管V电压，功耗W非固定长度指令格式，种寻址方式，条指令，兼具有RISC和CISC特性提供了更加灵活的存储器寻址结构，可以支持传统的k大小的页面，也可以支持M大小的页面（TLB）动态转移预测技术（BTB转移目标缓存）Pentium结构图哈佛结构Cache路超标量位CPU位FPU外部数据总线宽度为位，外部地址总线宽度为位微程序控制器IntelHaswell结构图RISCCPU三个要素：一个有限的简单的指令集；配备大量的通用寄存器；对指令流水线的优化编译技术RISCCPURISC机器的特征：使用等长指令（B）寻址方式少且简单只有取数指令、存数指令访问存储器指令数目相对较少，指令格式简单指令功能简单，控制器多采用硬连线方式指令的执行平均时间CPI为一个时钟周期。配置大量寄存器、优化使用。支持指令流水并强调指令流水的优化使用。RISC技术的复杂性在它的编译程序RISC与CISC的主要特征对比多周期流水线MIPSAptiv框图硬布线控制器指令缓存数据缓存总线接口内存管理单元算术与逻辑运算器协处理器指令译码器通用寄存器浮点运算器ARM处理器框图平均微程序为条微指令本章重点内容CPU的功能（控制器的功能、类寄存器）指令周期基本概念五种基本指令的指令周期及其数据通路流程时序产生器和控制方式基本原理微程序控制器工作原理微程序设计基本概念硬连线控制器基本概念本章容易混淆的一些概念微命令控制部件通过控制线向执行部件发出的各种控制命令微操作执行部件接受微命令以后所进行的操作公操作一条指令执行完毕以后，CPU所进行的操作本章容易混淆的一些概念微指令在机器的一个CPU周期中，一组实现一定操作功能的微命令的组合，构成一条微指令微程序一条指令均对应一段微程序，微程序固化在控制存储器中。机器指令本章容易混淆的一些概念周期表示一段时间。指令周期指机器指令从取指到执行完成所花的时间，包括取指周期和执行周期。CPU周期机器周期，一个CPU周期包括多个节拍脉冲。节拍脉冲T周期，处理操作的最基本单位指令周期CPU机器周期节拍脉冲第六章总线系统总线的概念和结构形态总线接口总线仲裁总线的定时和数据传送模式PCI总线和PCIe总线总线的基本概念总线BUS是构成计算机系统的互连机构是多个系统功能部件之间进行数据传送的公共通路借助于总线各系统功能部件之间实现地址、数据和控制信息的交换在争用资源的基础上进行工作总线的基本概念一个单处理器系统中的总线大致分为：内部总线：CPU内连接各寄存器及运算器部件之间的总线系统总线：CPU和其他高速功能部件（如存储器、通道等）相互连接的总线IO总线：中低速IO设备相互连接的总线物理特性：总线的物理连接方式，包括根数、插头形状，引脚线的排列方式功能特性：描述总线中每一根线的功能：地址、数据、控制三类电气特性：定义每一根线上信号的传递方向（单双向）及有效电平范围时间特性：规定了总线上各信号有效的时序关系，每根总线在什么时间有效总线的特性总线的标准化对总线的四个特性定义一个广泛认可的标准实现不同厂家的功能部件互换使用USB、PCIE总线带宽常见总线带宽总线的连接方式外围设备和总线的连接部件称为适配器adapter：完成CPU和外设之间的数据传送和控制实现传输速率匹配和同步；通常称为接口interface总线的连接方式总线影响计算机系统性能，单处理器计算机中采用的总线结构有两种基本类型：单总线结构和多总线结构单总线结构CPU是主控设备（发起通信的设备）结构简单、容易扩充多部件共享总线，分时工作传输效率低处理器结构对总线有影响多总线结构主要解决各种设备速率不匹配的问题位于CPU内部，速度最快连接主存高速IO设备低速IO设备连接不同速率的总线总线的效率和吞吐量得以提高高速、中速、低速设备连接到不同的总线上同时进行工作现代计算机中的多总线结构总线接口信息的传送方式计算机系统中，传输信息有两种方式：串行传送并行传送串行传送按顺序传送一个数码（一个字节）的所有二进制位bit，每次一位一般先传低位，后传高位使用一条物理传输线：单端传输两条传输线：差分传输数据传送前：并串变换数据接收后：串并变换串行传送特点：成本较低、速度慢位时间：每个比特在传输线上占用的时间长度波特率baud：每秒钟传送的比特数波特率是位时间的倒数串行传送的数据格式编码起始位b数据位B校验位b停止位b例利用串行方式传送字符，设数据传送速率是个字符秒，每一个字符格式规定包含个比特位（起始位、停止位、个数据位）问波特率是多少位时间是多少解：波特率为：位秒波特位时间是波特率的倒数：Tdsms并行传送同时传输多个比特，对每个数据位都需要单独一条传输线数据传送比串行数据传送快得多（传输频率较低时）发展趋势并行传输距离受限频率越高，线间串扰越严重，带宽无法继续提高串行传输距离长无串扰现象、提供更高的带宽随着总线频率的增加，并行逐渐转向串行SCSISASPATASATAPCIPCIE分时传送功能复用：某个传输线上既传送地址信息，又传送数据信息分时复用：共享总线的部件分时使用总线必须划分时间片总线接口的基本概念IO接口即IO设备适配器指CPU和主存、外围设备之间通过总线进行连接的标准化逻辑部件IO接口部件在连接的两个部件之间起着“转换器”的作用，实现彼此之间的信息传送一个接口可连接一个设备，也可连接多个设备总线接口的基本概念外部设备有自己的设备控制器设备控制器通过IO接口和总线连接，进而与CPU交换信息外围设备的连接方法总线接口的基本概念一个适配器的两个接口：连接系统总线的接口连接外设的接口接口的典型功能：控制、缓冲、状态、转换、整理、程序中断总线仲裁总线上的设备有主方和从方两种形态主方启动一个总线周期、从方响应主方请求每次总线操作，只能有一个主方，可以有多个从方为了解决多个主方争用总线的问题，设置总线仲裁部件（arbitrator）采用优先级策略或公平策略按照总线仲裁电路的位置不同，分为集中式和分布式集中式仲裁一个中央仲裁器，连接线：送往仲裁器的总线请求信号线BRBusRequest仲裁器送出的总线授权信号线BGBusGrant表征总线是否空闲的信号BS（BusBusy）集中式仲裁采用三种方式链式查询方式（菊花链查询Daisychain）计数器定时查询方式独立请求方式链式查询方式接口发出总线请求信号BR（置BR为高）仲裁器在总线空闲的时候（BS为低）开始仲裁总线授权信号BG依次从一个IO接口传送到下一个IO接口（串行查询）假如BG到达的接口无总线请求，则继续往下传递；假如BG到达的接口有总线请求，该接口获得总线控制权（将BS置为），BG信号便不再往下传递BS总线忙BR总线请求BG总线授权查询过程链式查询方式特点：优先级固定：离仲裁器最近的设备具有最高优先级，离仲裁器越远，优先级越低用线少，易扩充对查询链的电路故障很敏感，单点故障计数器定时查询方式每个设备分配一个地址，设备内部有地址判别电路仲裁器内部有个计数器，其输出和设备地址线连接对设备地址计数计数器定时查询方式设备通过BR线发出总线请求仲裁器在BS为低时让计数器开始计数，计数值通过设备地址线广播设备内部的地址判别电路，判断地址线上的计数值与自身设备地址是否一致如果一致且该设备的BR为高，获得了总线使用权，则置BS线为如果没有设备获得总线使用权，计数值加一，再次广播仲裁器判断BS为高，中止计数查询计数器定时查询方式每次计数可以从“”开始，也可以从中止点开发始固定优先级：每次从“”开始计数，优先级的顺序是固定的公平优先级：从中止点开始计数，每个设备都有可能成为最高优先级可变优先级：软件修改计数器初值缺点：控制线较多、扩展性较差（与计数器的位数有关）计数器独立请求方式每个设备均有独立的总线请求线BRi和总线授权线BGi中央仲裁器中的排队电路决定首先响应哪个设备的请求，给设备以授权信号Bgi特点：响应速度快控制灵活，优先级可通过程序改变；控制线数多、总线裁决机构较复杂分布式仲裁每个功能设备都有自己的仲裁号以及仲裁器仲裁过程通过协商完成总线的定时总线信息传送过程，可分为：请求总线，总线仲裁，寻址，信息传送，状态返回定时：事件出现在总线上的时序关系同步定时：事件出现在总线上的时刻由总线时钟信号确定总线信号中包含公共时钟线异步定时：建立在应答式或互锁机制基础上后一事件出现在总线上的时刻取决于前一事件的完成不需要统一的公共时钟信号PCI总线和PCIe总线PCI（PeripheralComponentInterconnect）是美国SIG推出的位总线（并行总线）频率为MHz，数据传输率为MBs基于PCI总线计算机结构处理器处理器主存控制器主存PCI设备PCI设备HOST桥主设备目标设备PCILAGACY总线桥PCIPCI桥LAGACY设备LAGACY设备PCI设备PCI设备HOST总线PCI总线PCI总线LAGACY总线（遗留）现代计算机中的多总线结构PCI总线特点允许智能设备在适当的时候取得总线控制权以加速数据传输和对高度专门化任务的支持支持猝发传输模式与ISAEISAMCA兼容设有特别的缓存，实现外设与CPU隔离，外设或CPU的单独升级都不会带来问题同步时序、集中式仲裁PCIExpress总线PCIExpress是一种基于串行技术、高带宽连接点、点到点连接的新型总线技术PCIExpress采用根信号线差分传输，全双工、可靠性高、速度快多种连接方式，扩展性好如、、、以及通道的连接器支持热插拔和热交换软件层与PCI兼容PCIExpress总线PCIExpress总线插槽PCIExpress总线共享式hub独占式switchUSB（UniversalSerialBus）由Compaq、Intel、Microsoft、NEC等公司于年共同研制发布传输速度高、使用简单、编程复杂适合计算机中所有高、中、低速传输外部总线USB线传输、半双工USB（UniversalSerialBus）USB全双工TypeC物理接口不区分正反面USB标准演进USB标准演进第七章外围设备外围设备概述磁盘存储设备磁带存储设备光盘和磁光盘存储设备显示设备输入设备和打印设备外围设备的一般功能外围设备又称外部设备：功能在计算机和其他设备之间，以及计算机与用户之间提供联系每一种外围设备，都是在它自己的设备控制器控制下进行工作，而设备控制器则通过IO接口和主机相连，并受主机控制磁盘存储设备磁表面存储：将磁性材料涂在载磁体（铝或塑料）存储信息磁盘存储器、磁带存储器优点：存储容量大，位价格低；可以重复使用；信息可以长期保存；缺点：存取速度较慢，机械结构复杂磁性材料物理特性B磁感应强度H外加磁场强度I电流磁表面存储器的读写原理利用磁头来形成和判别磁性材料的不同磁化状态磁性材料排列方式磁性材料均匀排列在圆形载磁体上水平排列密度低、容量小垂直排列密度高、容量大磁盘的组成和分类目前硬磁盘主要是温彻斯特磁盘，简称温盘，是一种可移动磁头固定盘片的磁盘机密封组合、悬浮磁头防尘性能好，可靠性高，对使用环境要求不高优点：没有摩擦、寿命长硬盘磁头与盘片的接触方式：悬浮式优点：没有摩擦、寿命长温盘原理MB软盘软盘：固定磁头，可移动盘片硬磁盘驱动器主要个部件组成定位驱动系统：控制磁头臂径向运动主轴系统：控制磁盘旋转数据转换系统：磁电互换硬盘驱动器和控制器磁盘上信息的分布盘片的上下两面都能记录信息，称为记录面（surface）一个记录面对应一个磁头（Head），用磁头表示记录面记录面上一系列同心圆称为磁道（Track）由外向内依次编号，最外侧为磁道每个磁道等弧度分为若干个扇区（Sector）信息按扇区存放，每个扇区的存储信息量是相同的，为B磁盘上信息的分布扇区之间有间隙gap，用于隔离扇区spindlesurfacetrackstrackksectorsgaps磁头和盘片的运动盘片旋转磁头悬浮，沿半径方向运动磁盘上信息的分布所有记录面上相同编号的磁道形成一个圆柱面Cylinder，简称柱面柱面数等于磁道数柱面是逻辑、虚拟概念所有磁盘统一转动，所有磁头一起移动磁盘访问过程：OS计算出要访问的位置C、H、S控制磁头移动到对应的柱面磁盘旋转到起始扇区磁盘继续旋转，磁头开始读写信息硬盘上的一个扇区要用三个参数来定位（CHS模式）：柱面号、磁头号、扇区号标准记录格式硬盘容量柱面数磁头数扇区数字节磁盘上信息的分布磁盘上信息的分布如果某文件长度超过一个磁道的容量，应将它记录在同一个记录面上，还是记录在同一个柱面上磁头的移动都需要时间，而且在磁盘访问总时间中占比较大如果某文件长度超过一个磁道的容量，应将它记录在同一个柱面上，因为不需要移动磁头，读写速度快磁盘上信息的分布柱面号位，磁头号位，扇区为位，得到CHS模式容量限制G现代磁盘采用LBA（逻辑区块地址LogicalBlockAddress）磁盘存储器的技术指标存储密度：道密度：沿磁盘半径方向单位长度上的磁道数位密度：磁道单位长度上能记录的二进制位数面密度：位密度和道密度的乘积一个磁盘存储器所能存储的字节总数，称为磁盘存储器的存储容量格式化容量和非格式化容量磁盘存储器的技术指标磁盘存储器的技术指标磁盘存取时间例磁盘有片磁盘，每片有两个记录面，最上最下两个面不用存储区域内径cm，外径cm，道密度为道cm，内层位密度位cm，转速转分问：共有多少柱面总存储容量是多少数据传输率多少解：共有多少柱面有效存储区域cm因为道密度道cm，共有道，即个圆柱面总存储容量是多少内层磁道周长为Rcm每道信息量位cmcm位B每面信息量BB总容量BB数据传输率多少磁盘数据传输率DrrNN为每条磁道容量，NBr为磁盘转速，r转秒转秒DrrNBBs硬盘发展趋势充氦气：缩短碟片距离，增加碟片数量K扇区：与OS文件管理匹配，减少扇区浪费叠瓦SMR、二维TDMR、微波辅助磁记录MAMR、热辅助磁记录HAMR增大单碟容量容量将到达TB固态硬盘固态硬盘SSD（solidstateDisk）由控制单元和ROM存储单元（FLASH芯片）组成速度快、抗震、零噪音、重量轻等优点磁带存储设备磁带的记录原理与磁盘基本相同，只是它的载磁体是一种带状塑料，叫做磁带磁带采用顺序访问方式，速度比磁盘速度慢通常用作为数据备份的海量存储设备光盘和磁光盘存储设备光盘上的信息以坑点形式分布凹坑表示“”，凸点表示为“”读出时，当激光束照射在凹坑上时反射率低；而照射在凸点上时反射率高根据反射光的光强变化并进行光电转换，即可读出记录信息只读型CD光盘CDDA数字唱盘，记录数字化信息，分钟数字立体声信息CDROM容量MB可写CD写一次型CDR利用激光改变有机染料记录面对光的反射率可多次的重复写入磁光盘CDMOMagnetoOptical利用激光产生高温来改变磁场CDRWRewritable利用激光改变相变材料的晶态和非晶态两种状态DVDDVD使用较短波长的激光束，使盘片数据的密度达GB，是CD产品容量的倍，如果采取双面双层的记录方式，容量更可高达GBDVDROMDVDVideoDVDAudioDVDRDVDRAM不同盘片比较TrackPitchmMinimumPitLength：mStorageDensityGbinchTrackPitchmMinimumPitLength：mStorageDensityGbinchTrackPitchmMinimumPitLength：mStorageDensityGbinchCDGBDVDGBBlurayDiscGB光驱的速度倍速CD在小时内读完一张CD盘的速度定义为倍速，KBSDVD的倍速则在KBs左右X倍速：指是最初光驱读取速率的多少倍的读取速率的光驱第八章输入输出系统CPU和外设之间的信息交换方式程序查询方式程序中断方式DMA方式通道方式通用IO标准接口返回CPU与外设之间的信息交换方式IO设备同CPU交换数据的过程：输入过程：CPU把一个地址放在地址总线，选择某一输入设备；CPU等候输入设备的数据有效；CPU从数据总线读入数据，并放在一个相应的寄存器中输出过程：CPU把一个地址放在地址总线，选择输出设备；CPU把数据放在数据总线上；输出设备认为数据有效，从而把数据取走问题的关键在于：如何找到对应的外部设备编址方式什么时候数据才有效定时方式外围设备编址方式编址对象IO设备中的控制寄存器、数据寄存器、状态寄存器外围设备编址方式独立编址（IsolatedIO）内存单元和IO寄存器各自独立编址：两个地址空间IO寄存器地址称为端口号访问IO寄存器有专门的IO指令X：outHAX外围设备编址方式统一编址也称为内存映射IO：MemoryMappedIO，MMIOIO寄存器和内存单元一起编址：一个地址空间同一地址空间中的不同部分来区分IO寄存器和内存单元访存指令访问IO设备和内存，LoadStoreARM、RISCV、MIPSMIPS处理器内存映射IO例假设有一个运行时间为秒的基准程序，其中秒是CPU时间，剩下的是IO占用的时间如果在以后的年里，CPU的速度每年提高但IO时间保持不变，那么年后运行程序要耗费多少时间？IO时间所占的比例是多少解：耗费的时间CPU时间IO时间目前，IO时间秒今后五年内CPU时间、IO时间及其所占比例如下表：外设定时如何判断数据有效是外设定时的关键根据外围设备的速度分为种定时：速度极慢或简单的外围设备机械开关，显示二极管直接输入输出慢速或中速的外围设备异步定时高速的外围设备同步定时CPU与IO接口之间的数据传送CPU管理外围设备的方式：无条件传送方式（简单IO方式）程序查询方式程序中断方式直接内存访问DMA通道方式单片机多采用程序查询、程序中断PC采用程序中断和DMA通道方式用在大型计算机中程序查询方式又叫程序控制IO方式当需要输入输出时，CPU暂停执行主程序，转去执行设备输入输出的服务程序，进行数据传输异步定时：查询设备状态，判断是否有效、程序查询方式的接口设备选择电路用于判断地址总线上呼叫的设备是否为本设备数据缓存寄存器缓存从外设读出的数据或者CPU输出到外设的数据设备状态标志用于标志设备的工作状态，、程序查询输入输出方式信息交换完全由CPU执行程序实现启动设备反复查询设备直至设备准备好传输单个数据重复步直至数据传输完毕CPU和外设串行工作，反复查询设备状态占用较多CPU时间，系统效率低CPU占用率取决于查询频率用于单片机、程序查询输入输出方式有多个设备时，CPU周期性地轮询调用各IO设备的子程序程序查询方式处理器速度为MIPS，IO设备为键盘，其操作速度为字符s，采用程序查询方式进行控制，那么对于每个输入操作，CPU等待的时间可以执行万条指令程序查询方式特点：数据传输完全依赖于程序控制硬件结构简单频繁的查询动作浪费了大量的CPU时间实时性差，随机事件响应慢目前只用在单片机中程序中断方式中断的基本概念中断服务程序入口地址的获取程序中断方式的基本IO接口单级中断多级中断Pentium中断机制中断的基本概念中断（Interrupt）是指CPU暂时中止现行程序，转去处理随机发生的事件，处理完后自动返回原程序的功能和技术也称为异常exception中断系统是计算机实现中断功能的软硬件总称一般在CPU中设置中断机构在外设接口中设置中断控制寄存器在软件上设置相应的中断服务程序中断的基本概念中断源产生中断的事件与IO设备信息交换：网络通信故障处理：硬件故障：掉电、校验错软件故障：溢出、除数实时事件处理：键盘、鼠标程序调度，时间片划分软中断中断的基本概念中断处理过程：某一外设的数据准备就绪后，“主动”向CPU发出中断请求信号；当CPU响应此中断，暂停运行主程序，自动转去该设备的中断服务程序；当中断服务程序执行完毕后，CPU又回到原来的主程序继续执行中断适合于处理随机出现的事件中断的基本概念响应中断的时机什么时候对外设的中断请求进行响应？断点保护问题如何在处理完中断后正确返回主程序？多重中断处理中断处理过程中又有外设发出中断请求怎么办？中断功能实现的软硬件分工哪些功能用软件实现，哪些功能需要硬件支持？中断的基本概念单级中断处理过程流程图响应中断的时机外设的中断请求存放在接口中的中断源锁存器里，并通过中断请求线连至CPU外设的中断请求是随机的，CPU只有在当前指令执行完毕，转入公操作时才受理中断请求断点保护问题正确返主程序断点：主程序被中断的地方（PC）现场：当前指令执行结束后CPU的状态包括寄存器值和一些状态标志位保存现场：现场保存到堆栈中恢复现场从堆栈中恢复PC和CPU状态，以便从断点处继续执行主程序多重中断处理中断处理过程中又有新外设发出中断请求怎么办？在CPU中有一个中断屏蔽寄存器置“”设置屏蔽，关中断，不受理中断请求置“”取掉屏蔽，开中断，受理中断请求可以通过程序控制实现中断嵌套中断功能实现的软硬件分工中断周期的操作由硬件实现也称为“中断处理的隐操作”，程序员看不到响应中断、关中断、保存断点、找出中断源顺序很重要中断服务程序由软件实现保存现场、对发起中断的设备服务、恢复现场、开中断、返回主程序中断服务程序入口地址的获取转移到中断服务程序：找到中断服务程序的入口地址向量中断：当CPU响应中断时，由硬件直接产生一个地址即向量地址向量地址设备的中断服务程序入口地址查询中断：硬件为所有中断安排一个公共的中断服务程序该公共程序查询并跳转至相应中断服务程序入口程序中断方式的基本IO接口向量中断准备就绪的标志RDReady允许中断寄存器EIEnableInterrupt中断请求寄存器IRInterruptRequest中断屏蔽寄存器IMInterruptMask程序中断方式数据输入的执行过程由程序启动外设，将该外设接口的BS标志置“”，RD标志清“”；接口向外设发出启动信号；当设备动作结束或数据缓冲寄存器填满时，设备送出控制信号，将RD置“”；设备的中断向量逻辑讲中断向量发到数据总线，CPU将中断向量赋值给PC，跳转到中断服务程序外设传送数据到接口的数据缓冲寄存器；当EI为“”时，接口向CPU发出中断请求；在一条指令执行公操作时，CPU检查IR寄存器如果标志IM为“”，进入中断周期；中断服务程序把接口中数据缓冲寄存器的数据读至CPU中的寄存器；（）CPU发出控制信号C将接口中的BS和RD标志复位CPU受理中断请求，向外设发出中断响应信号INTA并关闭中断；单级中断所有中断源通过INTA链式查询方式连接，属于同一级离CPU近的中断源优先权高不允许任何中断源打断中断服务程序，即使优先权比它高也不能CPU中有个IM，个IRINTA：InterruptAuthorization中断授权信号单级中断源的识别串行排队链法IR，IR，IR为中断请求信号IS，IS，IS为中断选中信号多级中断中断源分成多个级别两级优先权每级有一个级别优先权每级内又有级内优先权中断级别高的中断源可以打断级别低的中断源，称为中断嵌套多级中断一维多级中断：每级中断只有一个中断源二维多级中断：每级中断有多个中断源一个系统有n级中断，则CPU中有n个IR，n个IM多级中断某级中断被响应后，则关闭本级和低于本级的IM，开放更高级的IM不同级别的中断可以嵌套，但同一级的中断不允许嵌套中断服务程序中使用多级堆栈保存现场（包括IM）中断请求的处理方法单级中断优先权顺序：ABC中断请求到达顺序中断请求的处理方法多级中断优先权顺序：ABC中断请求到达顺序多级中断源的识别采用了独立请求方式和链式查询方式相结合的方式级间采用独立请求方式优先排队电路中断向量产生电路级内采用链式查询方式开放和屏蔽中断屏蔽中断指CPU中的中断屏蔽寄存器IM置处于“关中断”所有可屏蔽中断源的中断请求得不到响应开放中断指CPU中的IM置处于“开中断”可以响应中断源的中断请求允许和禁止中断禁止中断指某个中断源接口中的中断允许寄存器EI被置对应的中断源不能发出中断请求处于“中断封锁”允许中断中断接口中的EI置中断源处于“中断开放”允许中断源发出中断请求例参见图所示的二维中断系统请问：在中断情况下，CPU和设备的优先级如何考虑请按降序排列各设备的中断优先级解在中断情况下，CPU的优先级最低各设备的优先次序降序排列是：ABCDEFGHICPU若CPU现执行设备B的中断服务程序，IM，IM，IM的状态是什么如果CPU执行设备D的中断服务程序，IM，IM，IM的状态又是什么解执行设备B的中断服务程序时IMIMIM；执行设备D的中断服务程序时，IMIMIM多级中断中，某级中断被响应后，则关闭本级和低于本级的IM，开放更高级的IM每一级的IM能否对某个优先级内的个别设备单独进行屏蔽如果不能，采取什么办法可达到目的解每一级的IM标志不能对某个优先级内的个别设备进行单独屏蔽。可将接口中的EI中断允许标志清“”，它禁止设备发出中断请求假如设备C一提出中断请求，CPU立即进行响应，如何调整才能满足此要求解要让设备C的中断请求及时得到响应，可将设备C从第级取出来，单独放在第级上，使第级的优先级最高即可例参见图所示的系统，只考虑A，B，C三个设备组成的单级中断结构，它要求CPU在执行完当前指令时对中断请求进行服务假设：CPU“中断批准”机构在响应一个新的中断之前，先要让被中断的程序的一条指令一定要执行完毕；TDC为查询链中每个设备的延迟时间；TA，TB，TC分别为设备A，B，C的服务程序所需的执行时间；TSTR为保存现场和恢复现场所需的时间；主存工作周期为TM试问：就这个中断请求环境来说，系统在什么情况下达到中断饱和例假定多级中断，其中断优先级由低到高为LLL，试设置中断屏蔽字，将中断优先级由低到高改为LLL原先的屏蔽字例假定多级中断，其中断优先级由低到高为LLL，试设置中断屏蔽字，将中断优先级由低到高改为LLL新的屏蔽字A、B、C是与主机连接的台设备，采用多级中断实现中断优先级处理，其各自的中断服务程序中对中断屏蔽码的设置如下表所示解：从中断屏蔽字看出，其处理优先级为：ACBCPU故CPU执行程序轨迹如下：A服务B服务C服务CPUABCPentium中断机制中断类型Pentium有两类中断：中断和异常中断通常称为外部中断，由外部硬件信号引发有两种情况：可屏蔽中断：可通过CPU中标志寄存器屏蔽非屏蔽中断：这类中断不能被屏蔽异常由指令执行引发执行异常：执行一条指令过程中出现错误、故障等执行软件中断指令：如执行INT，INT，INTn等指令Pentium共有种中断和异常，每一个有中断向量号中断优先级分为级中断服务程序中断服务程序的入口地址信息存于实模式为中断向量表IVT保护模式为中断描述符表IDTPentium取得中断向量号的途径有三种：指令给出：INTH外部提供：中断控制器CPU识别错误、故障现象DMA方式DMA的基本概念DMA传送方式基本的DMAC选择型和多路型DMACDMA的基本概念DirectMemoryAccess：直接内存访问完全由硬件执行IO数据交换DMAC（DMAController）接管对总线的控制数据交换不经过CPU，直接在内存和IO设备之间进行DMAC向内存发出地址和控制信号用于高速传送成组数据DMA的基本概念优点数据传输速度快省去了CPU取指令、取数、送数等操作没有保存现场、恢复现场之类的工作主存地址的修改、传送字个数的计数用硬件实现DMA的基本概念基本操作：外围设备发出DMA请求；CPU响应请求，DMAC接管总线的控制；单总线系统中CPU具有总线仲裁功能DMAC对内存寻址，即决定数据传送的内存地址及传送个数，并执行数据传送的操作；向CPU报告DMA操作结束数据传送前的准备，传送结束后的处理，均由程序承担，而DMAC仅负责数据传送的工作DMA传送方式DMA方式进行数据传送时，CPU仍执行主程序DMAC与CPU可能同时要访问主存，引起冲突处理访存冲突停止CPU访问内存周期挪用DMAC与CPU交替访内存原则：IO的数据要尽快处理，以防丢失停止CPU访问内存DMAC使用总线，控制内存，CPU处于等待状态优点：控制简单缺点：内存的效能没有充分发挥一个数据块的传送过程、周期挪用CPU让出一个或多个周期（内存读写周期）的总线控制权，由DMAC挪用，进行一次数据传送传送结束后，CPU继续工作重复，直到数据块传送完较好地发挥了内存和CPU的效率、DMAC和CPU交替访问内存工作周期分为C和C两个子周期，一个供CPU访存，一个供DMAC访存总线分时控制适合DMAC频繁访问内存的场合硬件逻辑复杂DMA传送效率很高，没有总线申请时间基本的DMAC、DMAC的基本组成、DMAC数据传输过程三个阶段：传送前预处理、正式传送、传送后处理停止CPU访内方式的DMA流程图、DMA数据传输过程传输前，主机向DMAC传送以下信息软件：测试设备状态向内存地址计数器送数据块在内存中的首地址启动设备向字计数器送数据字个数这些工作做完之后，CPU继续原来的工作、DMA数据传输过程数据传送阶段（硬件）：外设准备好收发数据，由DMAC向主机发DMA请求CPU响应该请求，让出总线使用权DMAC接管总线控制权，发送内存地址、读写命令每传送一个字，内存地址计数器加，字计数器加若字计数器为时，进入传送后处理阶段传送后处理阶段（软件）：DMAC向CPU发出中断请求，报告数据传送结束选择型和多路型DMAC选择型selectorDMAC物理上可以连接多个设备：物理多个同时只能为一个设备服务：逻辑一个多路型DMACMultiplexerDMAC物理上连接多个外围设备：物理多个允许外围设备同时工作：逻辑多个适合于同时为多个慢速外围设备服务每个DMA通路都有独立的寄存器组保存各自的传送参数DMA方式与中断方式比较数据传送方式不同中断方式通过程序实现数据传送，而DMA直接用硬件来实现响应时机不同执行完一条指令后响应中断，而在一个机器周期结束后响应DMA请求功能不同中断方式不仅能传送数据，还能处理异常事件；而DMA只能进行数据传送DMA利用了中断技术响应时间不同中断方式需要切换程序、保护现场和恢复现场；DMA不改变CPU现场DMA请求比中断请求优先级高，为防止丢失DMA高速传送的数据通道方式Channel通道是一个特殊功能的处理器设有专用通道指令专门负责数据输入输出的传输控制CPU只负责“数据处理”进一步提高了CPU的效率通道结构通道的类型选择通道theselectorchannels在物理上可以连接多个设备，设备不能同时工作，只能选择一个设备工作多路通道themultiplexorchannels在同一时间能处理多个IO设备的数据传输分为数组多路通道和字节多路通道本章小结在计算机系统中，CPU对外围设备的管理方式有：程序查询方式；程序中断方式；DMA方式；通道方式程序中断方式使用广泛它“主动”向CPU发出请求信号CPU响应中断请求后，暂停运行主程序，自动转移到该设备的中断服务子程序，为该设备进行服务，结束时返回主程序中断处理过程可以嵌套进行，优先级高的设备可以中断优先级低的中断服务程序DMA技术使得外围设备可以直接访问内存，CPU可以继续程序DMA采用以下三种方法：停止CPU访内；周期挪用；DMA与CPU交替访问计算机组成原理教师：闫江毓办公室：主楼E邮箱：yabjyncepueducn微信计算机组成原理课程目的：掌握计算机的工作原理深刻理解程序在计算机硬件上执行的过程课程任务：掌握计算机硬件系统各组成部件的工作功能、原理和逻辑实现理解各部件联结成整机并协调运转的方法了解当代计算机系统的新技术和新成果计算机组成原理课程依赖关系主要内容编译技术操作系统组成原理数字电路数理逻辑布尔逻辑掌握逻辑描述的方法编译器操作系统计算机软件计算机组成原理课时安排：学时（讲课复习）周最后成绩：到课情况课堂派考勤作业情况课堂派习题实验期末考试闭卷白中英主编第六版主要教材电子版图书馆网址电子图书科学文库httpreadingsciencepresscn搜索“计算机组成原理”只能在校园网内使用北京大学计算机组成慕课httpswwwicourseorgcoursepreviewPKUtid华中科技大学计算机组成原理慕课httpswwwicourseorgcourseHUST慕课资源目录第一章计算机系统概论第二章运算方法和运算器第三章多层次的存储器第四章指令系统第五章中央处理器第六章总线系统第七章外存与IO设备第八章输入输出系统课程安排（学时）第一章计算机系统概论计算机的分类计算机的发展简史计算机的硬件计算机的软件计算机系统的层次结构计算机的分类电子计算机从总体上来说分为两大类：电子模拟计算机特点是数值由连续量来表示，运算过程也是连续的。电子数字计算机主要特点是按位运算，并且不连续地跳动计算。年完成的我国自行研制的模拟计算机红旗，慈云桂年，我国自行设计的第一台电子数字计算机机中科院计算机夏培肃领导研制她也是我国计算机事业的奠基者现在计算机中的一些术语和专业名词都是她翻译的。中国计算机之母计算机的分类根据性能、经济性和适应性，可以划分为两类：专用计算机：专用机是最有效、最经济和最快速的计算机，但是它的适应性很差。通用计算机：通用计算机适应性很大，但是牺牲了效率、速度和经济性。通用计算机分类可以分为：超级计算机大型机服务器工作站微型机单片机区别在于：体积、简易性、功耗、性能指标、数据存储容量、指令系统规模和机器价格等计算机发展简史计算机的五代变化年，电子管计算机：数据处理年，晶体管计算机：工业控制年，中小规模集成电路计算机：小型计算机年，大规模和超大规模集成电路计算机：微型计算机年至今，甚大规模集成电路计算机：单片机半导体存储器的发展世纪年代，所有计算机存储器都是由微小的铁磁体环构成年，仙童半导体公司生产出了第一个较大容量半导体存储器从年起，半导体存储器经历了若干代：单个芯片KBMBGB。其中KMKGMbit表示个二进制位，Bbit规范的二进制位计数：KiMiGi微处理器的发展年Intel公司开发出。年出现的，这是第一个位微处理器年出现了，这是第一个通用微处理器。微处理器的发展世纪年代末出现通用位微处理器Intel于年推出了位微处理器。到现在的位处理器和多核处理器我国计算机技术的发展年起步，年第一台型通用计算机年来相继研究出了第二代，第三代计算机。年代研究出每秒亿次的巨型机，银河III曙光等。年月，第一台实现中文化系统、并量产的国产微机长城CH正式研发成功。在高性能计算，并行计算上已紧跟国际先进水平，但计算机的核心部件CPU技术还远远落后。微处理器的发展微处理器一般称为CPU：CentralProcessUnit目前CPU芯片主要设计生产商Intel：酷睿、奔腾、赛扬、至强！AMD：速龙、闪龙、皓龙、APU天津海光VIA：C、C上海兆芯IBM：苏州国芯龙芯：嵌入式、桌面、专用计算机ARM：三星、高通、华为海思、华为鲲鹏微处理器的发展龙芯属于MIPS架构（LoongArch）上海兆芯属于X架构华为麒麟鲲鹏属于ARM架构阿里平头哥属于RISCV架构中国有着全球数量最多的芯片设计公司展讯、寒武纪等小米，百度、VIVO、OPPO都在布局芯片还未形成规模效益、人才缺口非常大通用计算机分类可以分为：超级计算机大型机服务器工作站微型机单片机区别在于：体积、简易性、功耗、性能指标、数据存储容量、指令系统规模和机器价格等超级计算机Top（）、Frontier美处理器核：；峰值PFlops；AMD处理器、Fugaku日处理器核：；峰值PFlops；ARM处理器、LUMI芬兰处理器核：；峰值PFlops；AMD处理器NVIDIATeslaV、神威太湖之光处理器核：；峰值PFlops；神威处理器、天河A处理器核：；峰值PFlops；Intel国产Matrix加速卡超级计算机Top（）、Frontier美处理器核：；峰值EFlops；AMD处理器、Aurora美处理器核：；峰值EFlops；Intel处理器、Eagle美处理器核：；峰值PFlops；Intel处理器NVIDIAH、Fugaku日处理器核：；峰值PFlops；ARM处理器、LUMI芬兰处理器核：；峰值PFlops；AMD处理器NVIDIATeslaVTop组织在最新发布的报告中指出，中国已决定不再参加Top的HPL基准测试。日本Fugaku富岳富士通和日本理化学研究所共同研制拥有超过个核心，内存TB富士通AFX处理器，ARMvA，配备GBHBM内存，带宽TBs，浮点性能TFLOPS，使用台积电nm工艺生产，晶体管数量亿AFX包含个计算核心和个辅助核心，没有GPU加速器，封装HBM内存。神威太湖之光年TOP第一，年第四拥有个计算节点，内存PB使用了国产众核芯片申威采用nm制程工艺，主频GHz拥有个核心，浮点峰值达到TFlops位计算机的性能指标计算机的性能指标CPU执行时间：表示一段程序执行过程中所占用的CPU时间。CPU时间执行某段程序所使用的CPU周期数CPU时钟周期CPI：CyclePerInstruction执行一条指令所需的平均周期数执行某段程序所使用的CPU周期数程序总指令数MIPS：MillionInstructionsPerSecond每秒百万指令数MIPS程序总指令数程序执行时间计算机的性能指标CPU性能公式CPU性能公式CPU性能公式例用一台MHz处理机执行标准测试程序，它包含的混合指令数和相应所需的平均时钟周期如下表所示：解计算机的硬件硬件组成要素控制器运算器存储器输入设备输出设备冯诺依曼型计算机VonNeumann计算机的硬件冯诺依曼型计算机五大组成部分二进制表示存储程序程序控制冯诺依曼架构运算器ALUArithmeticLogicUnit（算术逻辑运算单元）算术运算和逻辑运算在计算机中参与运算的数是二进制运算器的长度一般是、、或位计算机的字长存储器存储数据和程序运算开始前，必须先将程序和数据存入存储器（存储程序思想）一个存储单元中存入一个二进制数据串。存储器按存储单元组织，存储器中有大量的存储单元。为了方便查找，每个存储单元都被分配一个地址。通常，存储器都是按地址查找，线性编址。存储器存储器的容量一般都按字节计算存储器单位：ByteKiBKiBMiBMiBGiBGiBTiB分类：内存、外存存储器内存有两种操作：写入：数据存入存储器写入新数据后，会“覆盖”旧数据读出：从存储器取出数据读出并不破坏存取器中的数据可以从同一存储单元中反复的读出同一数据控制器控制器是计算机中发号施令的部件控制计算机的各部件有条不紊地工作任务：从内存中取出指令加以分析然后执行某种操作（指令控制）一条指令（instruction）完成一种操作算术运算或者逻辑运算、传输数据等将复杂的问题简化为一系列简单操作每个简单操作用一条指令完成，一系列指令的有序集合叫做程序（program）控制器指令的形式指令的内容由两部分组成，即操作的性质和操作数的地址。每条指令应当明确告诉控制器，从存储器的哪个单元取数，并进行何种操作。指令系统：计算机的全部指令集合。范例模型计算机存储器运算器和控制器存储单元模型计算机存储器运算器和控制器范例范例存储器中的机器语言程序指令集构造机器指令将汉语表达转为二进制表示汇编源程序同一个问题在不同实现的计算机上解决，步骤是不同的。编译器要考虑两个问题：数据存储数据处理模型计算机存储器表计算yaxbc的程序表指令的操作码定义指令的形式数码化的指令和数据都放入存储器，两种方式：冯诺依曼结构（VonNeumannArchitecture）：存储器的任何位置既可以存放数据也可以存放指令哈佛结构（HarvardArchitecture）：指令和数据存储器物理上独立冯诺依曼结构哈佛结构指令的形式存储程序：将程序（指令序列）和数据存放到存储器中程序控制：控制器依据存储的程序来全机协调地计算任务控制器执行程序的过程取指令执行（）A取指令执行BABA取指令执行BABA取指令执行BABA取指令执行A取指令执行StopSTOLADMULADDSUBSLT控制器的基本任务按照特定的顺序一条接着一条取指令、执行指令。取指令执行（）A取指令执行BABA取指令执行BABA取指令执行BABA取指令执行A取指令执行Stop控制器的基本任务每取出一条指令，控制器中的指令计数器就加，下一条指令做好准备指令计数器ProgramcounterPC保存指令的地址指令要顺序存放每条指令在存储器都有地址存储器中的机器语言程序指令地址控制器的基本任务时间因素取指周期：从存储器中取指令到控制器的时间执行周期：在控制器中执行指令的时间时间t（）指令流和数据流如何区分内存输出的是指令流？还是数据流？根据不同的时间取指周期中从内存读出的信息流是指令流，它流向控制器执行周期中从内存读出的信息流是数据流，它由内存流向运算器。控制器其他任务：保证指令按规定序列自动连续地执行。对各种异常情况及时响应和处理。控制器向计算机各功能部件提供每一时刻协同运行所需要的控制信号适配器与输入输出设备输入设备：把人们所熟悉的信息形式变换为二进制信息形式输出设备：把计算机处理结果变换为人或其他机器设备所能接收和识别的信息形式总线：构成计算机系统的骨架，是多个系统部件之间进行数据传送的公共通路。计算机的软件软件的组成与分类软件的发展演变编程语言的发展手编程序：机器语言程序，手工编译二进制码汇编程序：符号语言程序，汇编程序汇编可执行程序目的程序机器语言可执行程序目的程序汇编语言手工编写汇编源程序汇编程序翻译软件的发展演变编程语言的发展高级程序：算法语言高级语言编译系统：把源程序全部翻译成目的程序，然后机器执行目的程序解释系统：逐一翻译源程序语句并立即执行该语句。源程序可执行程序目标程序编辑程序汇编或编译程序联接程序高级语言软件的发展演变系统软件的发展操作系统：用来管理计算机软硬件资源和自动用户作业调度，而使多个用户能有效地共用一套计算机系统。数据库管理系统：数据库和数据库管理软件分布式系统软件计算机系统的层次结构计算机是一个硬、软件结合而成的整体。它通常由五级组成。不同的计算机使用者看到的计算机的形式是不同的计算机系统的层次结构高级语言级：方便用户编写应用程序，由各种高级语言编译程序支持和执行。汇编语言级：提供一种符号形式语言，以便能够精确地操作控制硬件。操作系统级：它由操作系统程序实现，管理所有的硬件资源计算机系统的层次结构一般机器级：由微程序解释机器指令系统。微程序设计级：实际执行指令、处理数据的数字电路。软件与硬件逻辑等价性随着大规模集成电路技术的发展任何操作可以由软件来实现，也可以由硬件来实现；采用哪种方案？应综合考虑各个因素：价格、速度、可靠性、存储容量、变更周期固件：介于传统的软件和硬件间的实体。功能软件形态硬件实现软件写入ROM固化第一章小结计算机的分类冯诺依曼型计算机特点计算机硬件的基本组成部分五大部件运算器、控制器、存储器计算机软件计算机的性能指标计算机层次结构返回作业P：、、、、、一段C程序intmainintabintcdcabdab在线编程网站httpsgccgodboltorgX架构的指令序列X架构的指令序列单片机架构的指令序列SPARCV架构的指令序列人工智能四层架构AI不同计算任务需要不同芯片GPU与AI模型训练FPGA：分布式可定制ASIC：实现性能和功耗均衡国产服务器CPU自动驾驶芯片指标AI算力TOPS根据地平线数据，L级自动驾驶的算力需求为TOPS，L级自动驾驶算力需求为TOPSL级自动驾驶算力需求为TOPS以上，L级自动驾驶算力需求为TOPS以上。算力单位TOPSTOPSTeraOperationsPerSecond，表示每秒执行万亿次运算，用于衡量自动驾驶芯片的AI算力。TOPS描述芯片MACMultiplyAccumulate，乘积累加运算的运算能力，并没有指定数据类型，具体算力评估需要结合数据类型及精度。MAC运算包括相乘和相加aabc。对于卷积、点积、矩阵等运算而言，MAC指令可以大幅提高运算效率。TOPS计算公式：理论峰值MAC矩阵行MAC矩阵列主频现代GPU集群极度耗电。GPT在训练过程中使用了约GWh的能量。相当于辆普通汽车环绕地球次。谷歌表示一次搜索使用瓦时，而与谷歌搜索相比，GoogleGPT使用的能量大约是谷歌搜索的四倍。SM（StreamingMultiprocessors）称为流式多处理器，是NVIDIAGPU的基本构建模块。每个SM包含CUDA核心（用于通用计算的处理单元）、张量核心（专门用于AI工作负载）以及其他用于图形和计算操作的组件。SM具有高度并行性，使GPU能够同时执行许多操作。主芯片上共有个SM。但它们的参数产量约为，这意味着我们可以使用大约个。在生产过程中发生故障的部分会被关闭。此外，如果看一下主芯片的尺寸，那是一个相当大的芯片，非常接近现代工厂机器的限制。。HBM（高带宽内存）HBM是一种具有高带宽接口的堆叠内存类型。与传统的GDDR内存相比，HBM提供了显著更多的带宽，可以实现GPU和内存之间的数据传输速率更快，这对于对带宽需求高的任务（如深度学习和大数据分析）特别有益。如果查看内存控制器，您会看到有个，但NVIDIA只启用了其中的个。第二章运算方法和运算器数据与文字的表示方法定点加法、减法运算定点乘法运算定点除法运算定点运算器的组成浮点运算方法与浮点运算器返回数据与文字的表示方法数据格式数的机器码表示字符与字符串的表示方法汉字的表示方法校验码数据与文字的表示方法两大类数据：符号数据：非数字符号的表示（字符、汉字、图形等）数值数据：数字数据的表示方式（定点、浮点）编码：用少量、简单的基本符号，选择合适的规则表示尽量多的信息，同时利于信息处理（速度、方便）ASCII、GB、UnicodeMP、FLAC、JPG、H、H等二进制与易经系统的提出二进制观点的是德国的数学家和哲学家莱布尼茨据说他根据易经发明了二进制太极生两仪，两仪生四象，四象生八卦两仪：阴和阳易经八卦数据格式计算机数据的表示方式，考虑几个因素：数的类型（小数、整数、实数、复数）数值范围数值精度存储、处理、传送的硬件代价软件兼容性数据格式十进制转二进制整数部分除取余小数部分乘取整除尽为止低高求得位数满足要求为止进制转换的简单运算方法的二进制表示大数的转换方法，记住几个常用的的幂KiloMegaGiga吉Tera太更大的单位是多少？PetaExaZettaYotta千、兆、吉、太、拍、艾、泽、尧分、厘、毫、微、纳进制转换的简单运算方法几个简化运算的例子计算机中使用的计量单位我国传统文化中的数量单位数据格式计算机中数值数据表示格式：定点表示：小数点位置固定浮点表示：小数点位置不固定定点格式容许的数值范围有限（字长一定），硬件简单。浮点格式容许的数值范围很大，硬件复杂。定点数的表示方法约定数据的小数点位置固定小数点不使用记号””表示将数据表示成纯小数或纯整数定点数表示：带符号数不带符号数运算器利用寄存器存储数据寄存器中每个位称bitBinaryDigit最高有效位MSB、最低有效位LSB定点数的表示方法xnxnxnxx数的表示范围符号：代表正号代表负号量值小数点位于符号位之后，不需专门存放位置带符号定点纯小数定点纯整数xnxnxnxxMSB为符号量值小数点固定于LSB之后例：字长位X纯整数：X正数，符号位取Y纯整数：Y（原码）负数，符号位取XY符号位取纯小数：X符号位取纯小数：X（原码）定点数的表示方法纯整数的表示范围n位定点数的表示方法受字长限制，表示数的范围有限定点小数表示的精度有限目前计算机中采用定点数表示纯整数，因此将定点数表示的运算简称为整数运算。浮点数的表示方法浮点数的表示方法指数e基数R尾数M浮点数的表示方法一个浮点数由阶码和尾数及其符号位组成尾数M：用定点小数表示，表明有效数字的位数，决定了浮点数的表示精度阶码E：用定点整数表示，指明小数点的位置，决定了浮点数的表示范围IEEE标准IEEE位单精度浮点数标准浮点数的规格化例：REM对于二进制数那么，计算机中究竟采用哪种数据形式？多种数据形式规格化表示法IEEE标准规格化：同一真值浮点数具有唯一的表示形式规格化尾数应为如下形式：xxxxxxxxx整数位的属于隐藏位，在实际存储时，尾数域只存储小数点后面的数值。规格化表示：当尾数不为，尾数左移位（小数点右移位），同时阶码减（左规）尾数右移位（小数点左移位），同时阶码加（右规）IEEE标准一个规格化的位浮点数x的真值表示为xSME位的浮点数（双精度浮点数）符号位位，阶码域位，尾数域位，指数偏移值是。规格化的位浮点数x的真值为：xSME浮点数的表示方法例若浮点数x的标准存储格式为，求其浮点数的十进制数值。解：将进制数展开后，可得二制数格式为指数e阶码包括隐藏位的尾数M于是xSMe浮点数的表示方法例将数转换成标准的位浮点数的二进制存储格式（进制表示）。解首先分别将整数和分数部分转换成二进制数：规格化，尾数右移位e，于是得到：SEM最后得到位浮点数的二进制存储格式为：AC真值的机器数（机器零）阶码E，尾数M正：S，负：S非规格化浮点数：阶码E，尾数M规格化浮点数：阶码E（）无穷大的机器数阶码E全（），尾数M：S，：SNaN（notanumber，不是一个数）阶码E全（），尾数M用来通知异常情况IEEE标准位单精度浮点数单精度IEEE浮点数区间EEEMMMM规格化浮点数的范围正或负正负无穷大NaN非规格化数浮点数的表示范围浮点数所表示的范围远比定点数大一般计算机中同时采用定点、浮点表示。单片机中多采用定点表示。IEEE单精度在线转换httpswwwhschmidtnetFloatConverterIEEEhtml十进制数串的表示方法有时十进制数在计算机中需要以十进制的方式进行运算，需要对十进制进行编码二十进制编码（BCD码）每个十进制符号由位二进制数表示有权码名称表示每一位的位权（、、、）每位的数码与相应的位权相乘，再求和，得到它所代表的十进制数码表示：数的机器码表示一般书写表示的数，称为真值计算机中表示的数，称为机器数在计算机中，为了妥善的处理好符号位问题，主要是负数的运算问题，引入种表示方法：原码、补码、反码、移码。原码表示法定点整数的原码形式为xnxnxx字长位：X，则X原X，则X原使用原码有两种表达形式原原原码表示法特点：表示简单，易于同真值之间进行转换，实现乘除运算简单。进行减法运算麻烦。要比较绝对值的大小，然后绝对值大的数减去绝对值小数，最后给结果选择符号。为了解决这些矛盾，找到了补码表示法。补码表示法补码表示法反码表示法定义：正数的反码表示与原码相同负数的反码符号位不变，数值位是将原码的数值位按位取反。电路很容易实现，触发器的输出正负两值。反码表示法反码表示有正和负之分反反负整数补码：反码加解决了求补码还要减法的问题补负数求补负数原码“符号位不变，数值位取反加”得对应补码负数补码再求补得到负数原码补码：原码：求反移码表示法传统定义和标准浮点数阶码的定义不同移码和补码尾数相同，符号位相反例设机器字长位定点表示尾数位数符位问：定点原码整数表示时，最大正数是多少最小负数是多少解定点原码整数表示最大正数值最小负数值数的机器码表示正数的原码、反码、补码等于真值，只有负数才分别有不同的表示方法采用补码，减法运算可以用加法运算实现，节省硬件，目前机器中广泛采用补码表示法有些机器用原码进行存储和传送，运算时改用补码移码表示法主要用于表示浮点数的阶码，可以直接比较大小。表示范围和补码相同，只有最高位相反同一代码的不同含义一个代码，采用不同编码，其数值不一样计算机内一个二进制数：不同的含义无符号二进制数：BCD码：有符号整数的原码：有符号整数的反码：有符号整数的补码：字符和字符串的表示方法非数值数据通常指的是字符、字符串、图形符号、汉字等数据必须按照一定的规则用一组二进制编码来表示ASCII美国国家标准局（ANSI）制定的ASCII（AmericanStandardCodeforInformationInterchange，美国信息交换标准码）是现今最为通用的单字节编码系统主要用于显示现代英文字母和符号ASCII码用位二进制编码表示一个字符，总共可以表示个字符计算机用一个字节来存放一个ASCII字符，最高位固定为IBMPC键盘keyboardWindows格式汉字的表示方法汉字的输入编码用西文标准键盘上对汉字进行编码：数字编码：是用数字串代表一个汉字的输入如区位码等。最大优点是无重码但难记字音编码：以汉语拼音作为编码基础。简单易学但重码很高有微软拼音、智能ABC输入法等。字形编码法：将汉字的字形信息分解归类而给出的编码。具有重码少的优点。常用的有表五笔字型、郑码等。音形编码法：音形编码吸取了音码和形码的优点，使编码规则简化重码少。常用的有全息码等。汉字的表示方法汉字内码汉字内码是汉字的机内代码。一般采用两个字节表示。为了与ASCII区别，汉字内码中两个字节的MSB规定为“”。汉字字符集编码查询httpswwwqqxiuzicnbianmazifujiphp汉字内码年，国标码字符集GB每个编码个字节，共收集常用简体汉字个年，BIG字符集称大五码，共收录个中文字，港台地区使用年，GBK字符集共收录汉字个，支持繁体中文、日韩汉字年，GB字符集收录了个汉字，覆盖中、日、朝鲜语和中国少数民族文字向下兼容GBK、GB年月日星期三Unicode码容纳全世界所有语言中任意一种符号为每种语言中的每个字符设定惟一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求UCSbyteUniversalCharacterSet，每个字符占用个字节，实际使用比较多UCS每个字符占用个字节，理论上可以表示个字符Unicode码为了解决Unicode的传输、存储问题，主要是网络传输，对Unicode进行二次编码UTF：UnicodeTransformationFormatUTF可变长格式对英文使用个字节，中文使用个字节来编码UTF拿个字节来表示字符字符编码查询httpswwwqqxiuzicnbianmazifujiphpChrome浏览器中打开的web页面，点击右键，选择“查看网页源代码”华电主页wwwncepueducn的编码记事本编码区别？汉字的表示方法汉字输出码为了能显示和打印汉字，必须先存储汉字的字形，这就是汉字字形码两类字形码：点阵字形和矢量字形汉字输出码点阵字形又称字模码每个字由mn个像素的位图表示，称mn点阵点阵中的每个点都只有两种状态表示有笔画，对应像素应置为字符颜色；表示无笔画，对应像素应置为背景颜色或不改变汉字的表示方法一个点阵字形（左图），一行用个字节描述，总供有行，它的信息量是个字节。一个点阵字形用个字节乘行组成，它的信息量是个字节。复原字形速度快，但缩放后的字形质量难以保证汉字的表示方法矢量字形通过数学方程来描述包含了字形边界上的关键点、连线的导数信息等在显示、打印时，要经过一系列的数学运算输出结果字体可以无限放大而不产生变形目前主流的矢量字体格式有种：Type，TrueType和OpenType校验码数据在存取和传送的过程中可能会发生错误产生错误的原因可能有很多种设备的临界工作状态外界高频干扰收发设备中的间歇性故障等为减少和避免错误提高硬件本身的可靠性对数据采用专门的逻辑电路进行编码，以检测错误，甚至校正错误校验码方法在每个字上添加一些校验位，用来确定字中出现错误的位置计算机中常用的检错或纠错技术奇偶校验ParityCheckCRC循环冗余校验CyclicRedundancyCheckHamming码，ECC校验若干位有效信息（如个字节）加上位校验位组成校验码奇校验：校验码中的个数为奇数偶校验：校验码中的个数为偶数奇偶校验码奇校验码设位信息码组为DDDDDDDD：若DD中有奇数个“”，则奇校验位奇校验位D奇DDDDDDDD读出数据时，将位校验码送入校验电路GDDDDDDDDD奇若G，则无错误若G，则传输出现错误例已知下表中左面一栏有个字节的数据。请分别用奇校验和偶校验进行编码填在右面栏。解假定最低一位为校验位，高位为数据位，列表如下：校验位的值取还是取，是由数据位中的个数决定的奇偶校验码奇偶校验码是一种最简单且应用广泛硬件成本很低可以检测出一位或奇数位错误，但不能确定出错位置，也不能检测出偶数位错误一位出错的概率比多位同时出错的概率要高得多常用于存储器读写检查或ASCII字符传送过程检查定点加法、减法运算补码加法补码减法溢出概念与检测方法基本的二进制加法减法器补码加法补补补证明补补补证明则或这种情况和第种情况一样把和的位置对调即得证。则相加两数都是负数则其和也一定是负数。补n补n补补nnnn补在模n意义下任意两数的补码之和等于该两数之和的补码。例设字长位用补码求解补补补补补所以例设字长位用补码求解补补补补补所以例设字长位用补码求。解补补补补补所以补码加法的特点，一是符号位要作为数的一部分参加运算二是符号位的进位要丢掉补码减法数用补码表示时，减法运算的公式为补补补补补只要证明补补上式即得证。现证明如下：补补补模n补补补又补补补补补补补将式与相加得补补补补补补补补补补补补故补补模n从补求补的法则：对补包括符号位“按位求反且加”，即可得到补。写成运算表达式，则为其中符号表示对补作包括符号位在内的求反操作例设字长位，已知求：补补补补。解补补补补补补例设字长位，求。解补补补补补补所以练习设字长位，求。解补补补补补补所以例求。解补补补补补两个正数相加的结果成为负数这显然是错误的。例求。解补补补补补两个负数相加的结果成为正数这同样是错误的。溢出的概念与检测方法溢出的概念与检测方法溢出的检测方法单符号位法和双符号位法双符号位法：用两个符号位表示一个数据，也称为“变形补码”两个符号位一样参与运算最高符号位产生的进位要丢弃溢出的概念与检测方法用双符号位法检测溢出结果的两个符号位一致则没有溢出如果两个符号位不一致则发生溢出判断溢出的逻辑表达式为VSfSf可以用异或门来实现溢出的概念与检测方法二、检验举例：求求结果出现了或的情况就为溢出例设字长位求。解补补补补补结果两个符号不同，表示溢出溢出的概念与检测方法、单符号位法其中Cf为符号位产生的进位C为最高有效位产生溢出检测VCfC基本的二进制加法减法器X补XnXnXY补YnYnYnn多位加法运算依赖于各位逐位相加的运算，所以先讨论一位全加器基本的二进制加法减法器半加器两个二进制位相加SiAiBiCiAiBi全加器的真值表与表达式SiAiBiCiCiAiBiBiCiCiAiAiBiAiBiCi输入加数Ai、Bi、低位进位输入Ci输出和Si，进位输出CiFA逻辑电路和框图FA（全加器）逻辑电路图延迟分析：设异或门延迟为T，与非门延迟为T对一位全加器FA来说，Si的时间延迟为T，Ci的时间延迟为T。FA框图位补码加法器FAFAFAFABBBBAAAACSCSSSCCC溢出符号位单符号法检测溢出只能完成补码加法加法器的改造FAFAFAFAAMSCSSSCCC溢出符号位BABABAB能完成补码加法和补码减法补补补补补补位补码加法器进位依次从地位传递高位，称为行波进位当M，加法A补B补运算；当M，减法A补B补转化成A补B补运算，异或。位补码加法器延迟分析：找出时延最长的路径BC为TTTTCC为TCC为TCC为T溢出为Tn位行波进位补码加法器总延迟：从C到溢出产生的延迟为nTTBCnTCCnT溢出nTnT加法器是算术运算电路的核心所有算术运算都基于加法器实现加法器不区分符号数与无符号数定点乘法运算采用软件实现乘法运算利用加法运算指令，编写实现乘法的循环子程序所需的硬件最少，但速度最慢采用硬件实现乘法运算串行乘法器被乘数每次和一位乘数相乘并行乘法器被乘数同时和乘数所有二进制位相乘硬件乘法器，需要乘法指令硬件增加新的功能需要提供必要的指令当前CPU支持的新指令原码并行乘法人工算法步骤设人工算法步骤设求部分积：从乘数y的最低位开始逐位与被乘数相乘（与运算）根据权重移位：每个部分积根据乘数的权相应左移部分积相加：部分积统统加起来得到乘积z（z的位数扩大一倍）。人工算法步骤求部分积：从乘数y的最低位开始逐位与被乘数相乘（与运算）根据权重移位：每个部分积根据乘数的权相应左移部分积相加：将移位后的部分积统统加起来便得到最后乘积z（z的位数扩大一倍）。计算机乘法的困难两大困难其一：两个n位数相乘，乘积为n位。部分积、乘积如何存储其二：只有两个操作数相加的加法器如何将n个部分积相加？设计高速并行乘法器的基本问题就在于缩短部分积的加法时间aaaaa两个位的二进制无符号数相乘乘数a和被乘数b都为位，乘积P为位阵列乘法器bbbbbababababababababababababababababababababab两个位的二进制无符号数相乘乘数a和被乘数b都为位，乘积P为位生成所有部分积ppababababababababababababababababababababab表示全加器斜线表示进位，竖线表示和pppababababababababababababababababababababab表示全加器斜线表示进位，竖线表示和pppababababababababababababababababpababababab表示全加器斜线表示进位，竖线表示和pppababababababababababababababababppababababab表示全加器斜线表示进位，竖线表示和pppababababababababababababababababpppababababab表示全加器斜线表示进位，竖线表示和pppababababababababababababababababppppababababab表示全加器斜线表示进位，竖线表示和pppababababababababababababababababpppppababababab表示全加器斜线表示进位，竖线表示和ppppababababababababababababababababppppppababababab表示全加器斜线表示进位，竖线表示和ppppababababababababababababababababppppppababababab个全加器斜线表示进位，竖线表示和表示全加器进位保留加法器行波进位加法器、不带符号的阵列乘法器不带符号阵列乘法器逻辑图、不带符号的阵列乘法器、带符号的阵列乘法器对于补码表示的乘数和被乘数在使用阵列乘法器前，需先将补码转换为原码求补电路E，求补E，直通输出求补电路、带符号的阵列乘法器求补器与原码阵列乘法器结合组成带符号的阵列乘法器共使用三个求补器。两个算前求补器：将操作数A和B变成正整数。算后求补器：输出结果的补码。、带符号的阵列乘法器原码补码定点除法运算商q原码除法运算原理设被除数，除数，模仿十进制除法运算，以手算方法求的过程如下：r被除数小于除数，不够减，商被除数低位补零，够减除数商r得余数r低位补零够减除数商r得余数r低位补零不够减除数商r余数r低位补零够减除数商r得余数r商q原码除法运算原理设被除数，除数，模仿十进制除法运算，以手算方法求的过程如下：原码除法运算原理二进制除法实质“被除数（余数）减除数，求新余数”人工算法：求商时从高位向低位逐位求，商符单独处理每次上商都是由心算来比较余数和除数的大小，确定商还是每做一次减法，总是保持余数不动，低位补，再减去右移后的除数。重复上一步骤，直到余数为，或商的位数满足要求原码除法运算原理原码除法运算原理补充：编码的移位机器数为正时，不论左移或右移，添补代码均为。负数原码在移位时符号位不变，其空位均添。负数反码在移位时符号位不变，其空位均添。负数补码在移位时，符号位不变，左移添，右移添补充：编码的移位实例：A，用位二进制表示，写出三种机器数左移一位、右移一位、左移两位和右移两位后的表示形式及其真值。例求。（恢复余数法计算）解补补被除数减余数为负q不够减，恢复余数加y右移位减余数为正q右移位减余数为负q不够减，恢复余数加右移位减余数为正q故得商qqqqq原码除法运算原理恢复余数法不恢复余数法（加减交替法）YN结束YNYN、不恢复余数的除法定点运算器的组成逻辑运算多功能算术逻辑运算单元ALU内部总线定点运算器的基本结构逻辑运算计算机中的逻辑运算，主要是指逻辑非、逻辑加、逻辑乘、逻辑异或四种基本运算。非运算：按位反逻辑加：按位或逻辑乘：按位与异或运算：又称“按位加”移位运算左移n位等于乘n右移n位等于除n移位和加法结合，实现乘（除）运算有符号数的移位称算术移位空出位补或无符号数的移位称逻辑移位空出位补移位运算算术移位有符号数的移位叫算术移位机器数为正时，不论左移或右移，添补代码均为。负数原码在移位时符号位不变，其空位均添。负数反码在移位时符号位不变，其空位均添。负数补码在移位时，符号位不变，左移添，右移添补充：编码的移位实例：A，用位二进制表示，写出三种机器数左移一位、右移一位、左移两位和右移两位后的表示形式及其真值。多功能算术逻辑运算单元ALU由全加器构成的加法器，可以实现补码的加法减法运算。问题：由于串行进位它的运算时间很长不能完成逻辑运算以加法器为核心的算术逻辑运算单元ALUArithmeticLogicUnit具有算术和逻辑运算的功能先行进位逻辑，能实现高速加法运算多功能算术逻辑运算单元ALU改变FA的输入端Ai和Bi来实现算术运算和逻辑运算功能。一位全加器FA将Ai和Bi输入一个函数发生器得到输出Xi和Yi，作为一位全加器的输入。位ALU的逻辑图与逻辑表达式控制参数多功能算术逻辑运算单元ALU可以处理种算术逻辑运算，每种运算只针对位二进制多功能算术逻辑运算单元ALU进一步化简得到下式代入全加器的求和与进位表达式，可得如下逻辑表达式多功能算术逻辑运算单元ALU多功能算术逻辑运算单元ALU多功能算术逻辑运算单元ALU位ALU个位ALU串行连接能进行位算术和逻辑运算进位信号太慢多功能算术逻辑运算单元ALU串行进位，速度慢CnCnCnCn对串行进位的改进串行改并行先行进位（CLACarryLookAhead）多功能算术逻辑运算单元ALUCnYYXYXXYXXXXXXXCn令GYYXYXXYXXXPXXXXGGeneration为进位发生函数PPropagation为进位传递函数增加P和G的目的在于实现多片ALU之间的先行进位CnGPCn逻辑电路图GYYXYXXYXXXPXXXX位ALU逻辑图函数发生器先行进位运算方式控制AB？功能多功能算术逻辑运算单元ALU片组成位ALU片内先行进位，片间串行进位多功能算术逻辑运算单元ALU片组成位ALUCGPCCGPCCGPCCGPCCnGPCnCnGPCnGGPPPCnCnGPCnGGPGPPPPPCnCnGPCnGGPGPPGPPPPPPPCnGPCnPPPPPGGGPGPPGPPP根据以上表达式实现的部件称为（组间先行进位产生器），与个配合使用的逻辑电路图位先行进位ALU片内先行进位，片间先行进位位ALU片片位先行进位系统片，片芯片组成多级先行进位内部总线将计算机各个部件之间的数据传送通路加以归并，组成总线结构任何一个时刻，总线上只能有一个来源的数据，数据源独占总线不同来源的信息在总线上分时传送只要数据源不撤销数据，该数据在总线上一直存在根据所在位置分类：内部总线：CPU内各部件的连线外部总线：CPU与存储器、IO系统之间的连线内部总线按总线的逻辑结构分：单向总线：信息只能向一个方向传送。传送地址信息或控制信息的总线双向总线：信息可以两个方向传送数据总线既可以发送数据，也可以接收数据。总线的基本电路是三态门逻辑、逻辑、高阻定点运算器的基本结构基本组成包括：ALU：核心部件乘除法器，组合逻辑电路数据存储部件：存放参与计算的数据及运算结果暂存器：只对硬件设计者可见通用寄存器：可以被软件设计者所访问内部总线：连接各个部件的通道定点运算器的基本结构一个二元运算需要两个操作数，产生一个结果操作数op操作数操作结果按照数据从存储部件传输到ALU的方式将ALU分为三种结构单总线，双总线，三总线、单总线结构的运算器两个操作数要分两次输入到ALU需要A、B两个暂存器临时保存操作数操作速度慢、控制简单一次运算要三步完成：通用寄存器A通用寄存器BABALU通用寄存器、双总线结构的运算器两个操作数通过两条总线同时输入到ALU进行运算ALU的输出经过缓冲器送入通用寄存器因为ALU的输入数据没有暂存器，计算过程中，两条总线都被输入数据占据，必须在ALU输出端设置缓冲器。一次运算要两步完成：通用寄存器总线，通用寄存器总线，总线总线缓冲器缓冲器通用寄存器、三总线结构的运算器总线旁路器：总线之间的数据传送一次运算一步完成：通用寄存器总线，通用寄存器总线，总线总线总线，总线通用寄存器速度快，硬件复杂，成本高Intel运算器结构通用寄存器暂存器标志寄存器位ALU单总线结构ARM的ALU三总线结构通用寄存器Intelpentuim的ALU三总线结构通用寄存器CPU和GPUGPU中有海量的ALU，因而其计算能力很强大GPU的ALUGTX的核心GP每个SM有个CUDA内核（绿色方块）CUDA内部浮点运算方法和浮点运算器浮点加法、减法运算浮点乘法、除法运算浮点运算流水线浮点运算器实例浮点加法、减法运算浮点加法、减法运算浮点加减运算步骤如下：操作数检查；比较阶码大小并完成对阶；尾数求和差运算；结果规格化舍入处理溢出处理浮点加法、减法运算操作数检查能否简化操作、节省运算时间比较阶码大小并完成对阶对阶：使得小数部分可以按位权值相加变为定点数定点加法器运算小数点位置是否对齐对阶小阶向大阶看齐浮点加法、减法运算两个浮点数相加：浮点格式中，尾数为定点小数如果向小阶对齐，尾数左移易导致高位数据丢失如果向大阶对齐，尾数右移丢失的是低位数据浮点加法、减法运算浮点加法、减法运算IEEE的四种舍入方法就近舍入：类似于四舍五入，多余位：最低有效位之后的若干位，用于舍入判断多余位中间值位：多余位比大，进位；比小，舍去对于的情况：有效位末尾是：进有效位末尾是：舍弃例：保留有效位到IEEE的四种舍入方法朝舍入：截尾保留有效位到：IEEE的四种舍入方法IEEE的四种舍入方法M例题：真值，求位单精度浮点数移动小数点，使其在第、位之间Se，E得到位浮点数的二进制存储格式为：ECCCCD位就近舍入浮点加法、减法运算真值的机器数（机器零）阶码E，尾数M正：S，负：S非规格化浮点数：阶码E，尾数M规格化浮点数：阶码E（）无穷大的机器数阶码E全（），尾数M：S，：SNaN（notanumber，不是一个数）阶码E全（），尾数M用来通知异常情况IEEE标准位单精度浮点数浮点加法、减法运算浮点乘法、除法运算浮点乘法、除法运算浮点乘、除法运算步骤浮点数的乘除运算大体分为六步：操作数检查；阶码加减操作；尾数乘除操作；结果规格化；舍入处理；确定积的符号；浮点乘法、除法运算浮点数的阶码运算乘法：两阶码求和，减偏移量除法：两阶码求差，加偏移量尾数处理规格化与舍入与浮点加减法相同现代处理中的浮点运算单元浮点运算单元FPU，floatingpointUnit华为海思麒麟个ALU、个FPUARMA中的FPURISCV中的FPU用于物联网的一种处理器架构平头哥玄铁个ALU、个FPU龙芯AFP浮点性能比较以CNN为例，用于输入图像大小为的分类任务的典型CNN模型需要高达亿次GFLOP和MB以上的模型参数。第二章小结一个定点有符号数由符号位和数值域两部分组成。按小数点位置不同，定点数有纯小数和纯整数两种表示方法。按IEEE标准，一个单精度浮点数由符号位S、阶码E、尾数M三个域组成。阶码E等于指数的真值e加上固定偏移值第二章小结数的真值变成机器码时四种表示方法：原码，反码、补码和移码移码主要用于表示浮点数的阶码字符信息属于符号数据，国际上采用的字符系统是位的ASCII码。汉字有输入码、汉字内码和输出码三种不同用途的编码。为运算器构造的简单性，运算方法中算术运算通常采用补码加、减法，原码乘除法。第章教学要求掌握定点整数（有符号数和无符号数）的表示范围掌握IEEE单精度浮点格式的表示，规格化，与真值的相互转换理解真值和机器数，掌握定点整数的补码、反码、原码，理解移码表示法了解汉字输入编码、机内码、输出码理解检验码的作用，掌握奇偶校验第章教学要求掌握补码加减法运算掌握溢出的概念及检测方法理解运算器的三种组成方式掌握浮点加减法运算步骤理解IEEE标准的种舍入处理方法，掌握就近舍入C语言数据表示非数值数据char位数值数据定点整数signedunsignedchar位short（位）int（位）long（位）浮点数Float（位）double（位）C语言中的整数（定点数）无符号整数unsignedcharunsignedshortunsignedint一般用于地址运算有符号整数charshortintlong采用补码表示无符号整数带符号整数的最大值位无符号整数最大是（）位带符号整数最大为（）编程实践在线编程网站httpscrunoobcomcompilec、c、python等httpsgccgodboltorg离线python：anacondac：ubuntu、gcc数据的真值、机器码、存储值间的关系C语言中的机器码？excintmaincharabcdprintfdnaprintfdnbprintfdncprintfdnd？？？？无符号数赋值补码真值输出变量abcd机器码实际存储值是多少？变量的内存值excmaincharabcdprintfadXnaaprintfbdXnbbprintfcdXnccprintfddXnddaFbFFFFFFcFFFFFFd补码输出机器码输出位补码表示范围，twotwotwotwotentwotentwotentwotentwotentwotentwotentwoten程序excmainintxunsigneduprintfxuXdnxxxprintfuuXdnuuu机器码输出真值赋值xFFFFFFFFu无符号数输出一个奇怪的程序excmaindoubleabcintdbcabcdbcprintffdnadifaprintfReallyanReallya二进制存储浮点数不是精确数浮点转整数只保留浮点数的整数部分Doubleexcmaindoubleabcbcabcprintfafnaprintfbfnbprintfcfncprintfafnaabca一个奇怪的程序excmainfloatabcintdbcabcdbcprintffdnadifaprintfYeahnFloatexcmainfloatabcbcabcprintffnaprintfbfnbprintfcfncabca舍入的影响例题假定变量i、f和d的数据类型分别为int、float和double（int用补码表示，float和double分别用IEEE单精度和双精度浮点数格式表示），已知i，fe，de。若在位机器中执行下列关系表达式，则结果为“真”的是IiintfloatiIIffloatintfIIIffloatdoublefIVdfdfA仅I和IIB仅I和IIIC仅II和IIID仅III和IV解答float到double的转换完全相等double到float转换可能会发生舍入floatdouble到int，小数部分会丢弃int到float，当int有效数字超过位，转换时需要舍入int到double，double尾数位，能精确表示int型Iiintfloatifloat是单精度，尾数位int型有效数字有位i能实现精确转换，条件成立若iIIffloatintffe浮点转换整数，只保留整数部分，小数部分舍去条件不成立IIIffloatdoublef双精度尾数位fe单精度float转double有效数字不变条件成立若doublefefdoublefloatf则不成立IVdfdf浮点运算不满足交换律、结合律dfd不等于ddfdfd不等于dfdC语言中单双精度混合运算，都按照双精度处理大数吃小数，两个差别巨大的浮点数相加，较小的数由于有效数字位数不够，会被舍去浮点处理精度造成的事故年月日，海湾战争期间，在沙特的爱国者导弹防御系统未能拦截一枚伊拉克飞毛腿导弹，造成名美军死亡。原因是浮点数舍入误差导致爱国者反导系统的计算机精度仅有位，存在的计时误差，所以有效时间阙值是个小时。当系统运行个小时以后，已经积累了秒的误差。这个误差导致导弹系统不能正确地瞄准目标。浮点处理精度造成的事故失之毫厘，谬以千里浮点处理精度问题解决办法制度：每隔二十小时重启一次硬件：修改位为位或位软件：升级软件其他案例年月日，在阿丽亚娜五号运载火箭发射后秒，偏离预定轨道炸毁。原因是软件系统将位浮点数转换为位浮点数，造成计算错误。温哥华证券交易所在年推出一项股票指数，指数的值是。后来，重新计算时多次运用舍入到小数点后三位的操作。个月以后，指数的值是，然而事实上应该是浮点处理精度问题树立计算机系统的思想，理解软硬件的相互影响小概率事件常会导致大损失，在工程实践中要精益求精第三章多层次存储器存储器概述SRAM存储器DRAM存储器只读存储器和闪速存储器并行存储器Cache存储器虚拟存储器奔腾系列机的虚存组织存储器概述存储器是计算机系统中的记忆设备，用来存放程序和数据存储器中最小的存储单位叫存储元，可存储bit若干个存储元组成一个存储单元许多存储单元组成一个存储器存储器的分类按存储介质满足两个基本要求：有两个明显区别的状态，分别表示和两个状态的改变速度要快，影响存储器的读写速度半导体存储器：内存，闪存速度快、容量小，成本高磁表面存储器：磁带、磁盘容量大，速度慢、成本低光盘存储器：DVD、蓝光容量大，速度慢，成本低按存取方式随机存储器RAM（RandomAccessMemory）任何存储单元的内容都能被随机存取，且存取时间和存储单元的物理位置无关内存顺序存储器按顺序存取，存取时间和存储单元的物理位置有关磁带、磁盘存储器的分类按信息掉电易失性非易失性存储器NonVolatileMemory断电后仍能保存信息磁表面存储器、光盘存储器、闪存易失性存储器VolatileMemory断电后信息立即消失内存SRAM、DRAM半导体存储器按其存储内容可变性只读存储器ROMReadOnlyMemory存储的内容一般是固定不变的，只能读出而不能写入随机读写存储器RAM：既能读出又能写入存储器的分类按在计算机系统中的作用主存储器：和CPU直接交换信息辅助存储器：主存的后援存储器高速缓冲存储器Cache：用于两个速度不同的部件之间，起到缓冲作用控制存储器等存储器的层次结构CPU对存储器的要求容量大、速度快、价格低（每位价格）目前技术下，存储器的特点是：速度快的存储器价格贵，容量小；价格低的存储器速度慢，容量大不可能三角既要。。。又要。。。。还要。。。。从在容量，速度和价格作折中考虑，建立存储器层次结构存储系统层次结构存储速度访问频率单位成本存储容量外存辅存内存存储器分级结构三级存储系统存储器的编址和端模式存放一个字节的单元称为字节存储单元，其地址称为字节地址一个字由多个字节组成，存放一个字的单元称为字存储单元，其地址称为字地址存储器编址编址的最小单位是字单元，称为按字编址编址的最小单位是字节单元，称为按字节编址既可以按字编址，也可以按字节编址存储器访问按地址访问：按字节地址访问、按字地址访问。字的概念字：wordawordisthenaturalunitofdatausedbyaparticularprocessordesign一串固定长度的二进制数，对应部件处理数据的固定长度。不同的部件其字长不同计算机字长、机器字长、运算器字长存储器字长、存储芯片字长指令字长存储器的编址字节地址机器字长位个字节存储单元组成存储器按字节编址存储器的编址机器字长位个字节存储单元组成存储器按字编址存储器的编址字节地址机器字长位，个字节存储单元字节编址下按字访问存储该字的第一个字节的字节单元地址为该字的字地址存储器的编址字节地址机器字长位，个字节存储单元存储器的编址设有一个MB容量的存储器，字长位，问：按字节编址，按字编址各自的寻址范围按字节编址：位字节地址，xxFFFFF按字编址：位字地址，xxFFFF数据的存储和排列顺序上世纪年代开始，几乎所有计算机都以字节编址存储系统和指令设计时要考虑的问题（按字节编址，按字访问）：一个字如何在字节单元存放？字的存放顺序问题端模式字节序端序尾序字地址与字节地址关系字的边界对齐问题存储器的端模式：存储字为多个字节时，在存储器中存放顺序大端bigendian：大尾端优先存储，高字节在低地址MIPS，IBMSparc网络传输小端littleendian：小尾端优先存储，低字节在低地址。X高高低低ARM的端模式可通过寄存器改变FLSBMSBADDFLSBMSBADD数据在内存中的存放顺序将x写入到以x开始的内存中内存地址对齐内存按字节编址位访问对齐位访问对齐字节编址下的按字访问：以一个字中最低字节的字节地址作为该字的字地址对齐：字地址能被字节数整除。字长为位，包含个字节，其字地址能被整除，地址最低位为；字长为位，包含个字节，其字地址能被整除，最低两位为Alignment对齐如：intishortkdoublexcharcshortj则：ikxcjx：个周期j：个周期目前来看，浪费一点存储空间没有关系！则：ikxcjx：个周期j：个周期存储器按字节编址，CPU按字对齐访问，字长位变量地址没有对齐变量地址对齐虽节省了空间，但增加了访存次数！includestdioh内存对齐测试intmemorydisplaylongunsignedintaddr以进制输出addr开始的个内存字节单元intijforiiiprintfxlXtaddriforjjjprintfxXtunsignedcharaddrijprintfnreturnintmainintishortjcharcAintkprintfixXniprintfjxXnjprintfcxXncprintfkxXnkprintfintImemoryaddressisxlXnlongunsignedintiprintfshortjmemoryaddressisxlXnlongunsignedintjprintfcharcmemoryaddressisxlXnlongunsignedintcprintfintkmemoryaddressisxlXnlongunsignedintkmemorydisplaylongunsignedintimemorydisplaylongunsignedinti内存对齐是一种软硬件协同提高性能的一种方式主存储器的技术指标SRAM存储器内部存储器是半导体存储器根据信息存储的机理不同可以分为两类：静态读写存储器SRAMStatic：速度快、成本高、容量小、功耗低，一般用作Cache动态读写存储器DRAMDynamic：容量大、成本低、速度慢、功耗高、用作主存基本的静态存储元阵列存储位元SRAM的存储位元是由两个MOS反相器交叉耦合而成的触发器，一个存储位元存储一位二进制代码六管SRAM存储元的电路结构示意图基本的静态存储元阵列三组信号线地址线字数数据线字长控制线单译码结构：个译码器N位地址，寻址n个存储单元存储元阵列又称存储芯片芯片容量字数X字长存储单元数量X存储单元字长基本的SRAM逻辑结构大容量SRAM芯片采用双译码方式：将地址分成行、列两部分，降低译码电路的规模CS：ChipSelect片选读写周期波形图先给地址，再给片选和读信号读写周期波形图先给地址，再给片选和是写信号DRAM存储位元的记忆原理DRAM存储器的存储位元是由一个MOS晶体管和电容器组成的记忆电路电容用于存储电荷，有电荷代表，否则代表MOS管电容器读放读出是破坏性读出由于c中读出是破坏性读出，必须恢复存储位元中原存的输入缓冲器关闭，刷新缓冲器打开，输出缓冲器读放打开，DOUT经刷新缓冲器送到位线上，再经MOS管写到电容上DRAM芯片的逻辑结构两个电源Vcc两个地线脚一个空管教NC个地址线AA个数据线DD方法：复用地址线AA存储器需要地址位，但芯片物理地址引脚只有位，如何处理？M位DRAM芯片的管脚图DRAM芯片的逻辑结构与SRAM芯片不同之处增加了行地址锁存器和列地址锁存器增加了刷新控制电路DRAM读出后必须刷新，而未读写的存储元也要定期刷新（电容自放电），按行刷新，刷新计数器的长度等于行地址锁存器刷新操作与读写操作交替进行通过选开关来选择刷新行地址或正常读写的行地址读写周期、刷新周期先给行地址和行选通，再给列地址和列选通读写周期、刷新周期刷新周期刷新：DRAM存储元基于电容器上的电荷存储信息，电荷量随着时间和温度而减少，因此必须定期地刷新，以保持原来记忆的正确信息刷新过程：将原有信息读出，再由刷新放大器形成原信息并重新写入的过程刷新按行进行刷新周期：从上次对整个存储器刷新结束到下次对整个存储器全部刷新一遍为止的时间间隔称为刷新周期集中式刷新分散式刷新集中刷新方式例行工作周期ns刷新周期msms内集中安排所有刷新周期总工作周期数msns个用在实时要求不高的场合集中式刷新：DRAM的所有行在每一个刷新周期中都被刷新刷新期间停止正常读写分散刷新方式各刷新周期分散安排在ms内每隔一段时间刷新一行每隔微秒提一次刷新请求，刷新一行；毫秒内刷新完所有行用在大多数计算机中ms行微秒ns主存储器特点由半导体存储器组成存储单元：字存储单元，字节存储单元编址：按字节编址按地址进行访问：字节地址访问字，访问字节属于随机访问存储器RAMDRAM需要刷新高级的DRAM结构FPMDRAM：快速页模式动态存储器SDRAM同步动态存储器读写操作与CPU时钟同步猝发式读取：输入一个行地址，一个列地址，连续读出后续几个列地址数据输入一个行地址，连续输入多个列地址，该行中的对应列的存储单元数据就连续输出DDRSDRAMDDR：DoubleDateRateDDR在相同时钟频率下的数据传输速率比SDRAM提高一倍上下沿都传输数据DDR、DDR：时钟频率比上一代提高一倍，速率提高一倍DDRSDRAM全球DRAM产业三星技术最先进，产量最大年月开始大规模生产基于EUV的nmDDR中国DRAM产业发展年，中国第一块KDRAM诞生，但总体技术力量薄弱，和国外差距比较大，没有竞争力。世纪后，通过政府扶持、自主研发、技术引进、收购等方式逐步建立起国产DRAM产业。年的紫光收购德国奇梦达、收购美国ISSI。目前，国产DRAM市场的主要厂家紫光国芯、福建晋华、合肥长鑫、长江存储等。年月，合肥长鑫宣布正式量产DDR年预计将试产nmDDR产能大约能占到全球内存产能的，目前最被看好困难和阻力全球半导体需求将近来自中国年开始，美光开始对福建晋华发起诉讼年月日，美国商务部将福建晋华添加进实体清单，导致整个企业进度不理想年，美光曾对从台湾华亚科跳槽到合肥长鑫的上百名员工发存证信函砥砺前行从DRAM内存的角度来说，中国企业在技术、产业链方面，距离全球顶尖的厂商都有较大的差距，产品自给率方面更是不容乐观。我们需要进一步加大企业自主创新国家意志支持的力度，坚定IDM的发展模式，进行产业全链路的布局，高度重视技术、专利的原创性，避开巨头们的干扰、阻挠。只有做到这些，才能在机遇和风险并存的产业环境中不断前行，实现我们在半导体产业独立自主的目标。只读存储器只读存储器概述Flash存储器存储器容量扩展只读存储器概述只读存储器ROM：ReadOnlyMemory在正常工作状态下只能读取数据，不能写入数据掉电不易失ROM和RAM都属于内部存储器，属于同一个内存空间用于保存计算机运行所需的最基础、最核心的程序。BIOS：基本输入输出系统引导程序等内存空间总容量MBRAMROMRAMROM只读存储器概述ROM中写数据称为编程program，包括擦除和写入根据是否可编程，分为：掩模ROM：制造中写入信息，用户无法更改可编程ROM：用户可写入内容PROM：可编程一次EPROM和EPROM：可多次编程EPROM：紫外线擦除，专用设备写入EPROM：电擦除，联机写入EPROMErasePROM紫外线擦除，编程器写入EPROM上方有一个石英窗口。将芯片置于紫外灯下，以擦除其中的内容，相当于存储器又存了全“”。然后用专用的设备将信息重新写入EPROMEPROM为ElectricErasePROM电擦除，擦除时间较快联机写入无需把器件从电路板取下EPROM允许改写上千次，编程大约需ms，数据可存储年以上Flash存储器在EPROM基础上发展而来高密度、非失易失性有很高的读取速度，易于擦除和重写，功耗小FLASH存储器的逻辑结构重点存储器容量扩充一、存储芯片简介二、存储器容量扩展的三种方法位扩展字扩展字位扩展一、背景知识存储芯片简介存储芯片的引脚芯片容量：字数字长存储单元数量存储单元的位数二、存储器容量扩展的三种方法、位扩展给定芯片的字长较短，不满足存储器字长要求，要用多片来扩展字长、字扩展给定的芯片字数少，用多片给来扩展字数、字位扩展从字长和字数两个方向扩展、位扩展、位扩展存储器一个存储单元分为高位和低位分别位于两个芯片中两个芯片并行工作、位扩展总容量位、位扩展、字扩展、字扩展、字扩展分析地址：存储器地址线AAA用于选择芯片AA用于选择芯片内的某一存储单元、字扩展、字扩展、字扩展、字位扩展需扩展的存储器容量为MN位已有芯片的容量为LK位LMKN用ML组芯片进行字扩展每组内有NK个芯片进行位扩展每片一组进行位扩展组进行字扩展存器容量与地址范围的关系高位通过：译码器产生每组的片选信号组进行字扩展字位扩展一起画例：设CPU有根地址线，根数据线，并用MREQ作访存控制信号，用RW作读写控制信号。现有下列存储芯片：SRAM：K、K、K；ROM：K、K、K；及：译码器和各种门电路主存的地址空间满足下述条件：最小KB地址为系统程序区ROM区，与其相邻的KB地址为用户程序区RAM区，最大KB地址空间为系统程序区ROM区。请画出CPU与存储器的连接图。三、主存储器与CPU的连接确定各区域地址范围；根据存储器容量，确定存储芯片的数目和扩展方法；分配地址线地址线低位直接连接存储芯片的地址线；高位地址线参与形成存储芯片的片选信号；连接数据线、读写控制等其他信号线MREQ可用作地址译码器的使能信号解：）根据题目的地址范围写出相应的二进制地址码。存器容量与地址范围的关系并行存储器加速CPU与存储器之间的数据传输的方式：采用更高速性能的存储器，加大字长采用并行操作的双端口存储器在CPU和主存之间使用高速缓存Cache在每个存储周期中存取多个字多模块交叉存储器DDR双端口存储器结构特点：具有左右两个端口，每一个端口都有独立的读写控制电路读写冲突：若左、右端口同时对相同的存储单元进行读写操作左读右写、右读左写、左写右写解决方法：判断逻辑决定对哪个端口优先进行读写操作，而暂时关闭另一个被延迟的端口，即置其忙信号BUSY。双端口存储器IDT逻辑框图R双端口存储器读写时序CE判断：如果地址匹配且在CE之前有效，片上的控制逻辑在CEL和CER之间进行判断来选择端口。多模块交叉存储器设存储器由M个的独立的存储模块组成，每个模块有相同的容量和存取速度存储模块就是存储芯片存储器地址的编排方式：顺序方式和交叉方式。顺序方式：地址按顺序分配给一个模块后，又按顺序为下个模块分配内存地址模块bit字bitMMMM数据总线顺序方式位地址：高位选模块，低位选块内地址故障隔离扩充容量比较方便连续地址单元在同一个模块，各模块串行工作带宽没有提升多模块交叉存储器交叉方式：两个相邻地址的物理单元不属于同一个存储模块，一般在相邻的存储模块中；同一个存储模块内的地址都不连续。内存地址模块bit字bitMMMM数据总线交叉方式位地址：高位选块内地址，低位选模块连续地址单元在不同同模块，各模块并行工作存储对齐（软件）交叉编址（硬件）可以系统运行速度并行存储器地址总线ABUSMMMM单字长数据总线DBUS交叉编址ARARARARCPU每个模块独立工作各模块分时使用数据总线进行信息传递。流水线方式数据总线是瓶颈多体交叉存储器流水线方式存取示意图连续读取m个字所需的时间为模块内访问一个存储单元（字）的存储周期是T多体并行存储器地址总线ABUSMMMM多字长数据总线DBUS交叉编址ARARARARCPU也称为多通道优化瓶颈多模块应用两条G内存条单条G内存条性能差异？双通道内存实例bit双通道内存性能评测SiSoftwareSandraProBusinessHPDLGIntelSandyBridge新型存储器PCRAM相变储存器又称PCM和CRAM，它利用相变材料作为储存介质。相变材料在非晶相态时具有较高的电阻值；在结晶相态时具有较低的电阻值非易失性存储器对相变材料施加不同时长的电脉冲，使相变材料呈现出不同的结晶状态，并在两种状态之间快速切换储存密度较DRAM更高新型存储器ReRAM电阻式存储器也称RRAM，是以非导性材料（金属氧化物）为存储介质的非易失性存储器施加电压，材料的电阻在高阻态和低阻态间发生相应变化，并利用这种性质储存各种信息。RRAM不仅高读写速度和高存储密度，同时延迟更低新型存储器MRAM和FRAMMRAM是一种利用磁性工作的非易失性随机存储器。基于两个铁磁层磁化状态来存储信息，当电流流过时会表现出不同的阻值。FRAM，采用铅锆钛形成结晶体存储数据。通过判断晶体内的电荷高低来读取数据。Cache存储器Cache存储器为什么要引入Cache？解决CPU和主存之间的速度不匹配问题延迟（ns）和带宽（GBs）CPU带宽简单测算个人电脑的DDR内存单通道带宽MBsCPU默认频率位MHz，核心位处理器，每次运算需要个数据CPU所需带宽：xxMBs内存墙（memorywall）Cache存储器在CPU和内存之间设置一个小容量的存储器Cache，保存的内容是主存内容的一个子集Cache存取速度要比主存快，用SRAM实现Cache功能全由硬件调度，对所有用户透明运行过程无需软件参与Cache基本原理程序的局部性原理在一段时间内，程序的执行仅限于程序中的某一部分。相应地，执行所访问的存储空间也局限于某个内存区域时间局部性：被访问过一次的内存区域在未来会被多次访问空间局部性：如果一个内存区域被访问，那么将来它附近的单元也会被访问sumforiinisumaixaiyreturnsum程序局部性举例数据数组元素访问空间结构体、数据库记录访问空间局部变量，计数器，指针等被重复使用时间指令顺序访问的指令空间重复使用的循环体时间子函数时间程序局部性举例程序：intaMNforiiMiforjjNjsumaij程序：intaMNforjjNjforiiMisumaij哪个程序具有更好的局部性Cache的命中率Cache的平均访问时间Cache的访问效率例CPU执行一段程序时，Cache完成存取的次数为次，主存完成存取的次数为次，已知Cache存取周期为ns，主存存取周期为ns，求Cache主存系统的效率和平均访问时间。解：背景：相联存储器（CAM）普通存储器都是按地址访问相联存储器是按内容访问ContentAddressableMemory相联存储器的基本原理存放在相联存储器中的内容：标记数据查找的主要操作是比较按地址访问存储器按地址访问：存储器只保存数据，数据的地址不保存寻址时译码器根据地址直接选中对应数据按地址访问：存储器只保存数据，数据的地址不保存寻址时译码器根据地址选中对应存储单元按地址访问存储器按内容访问：增加标记标识、Tag，一般用地址的部分或全部查找时，将访问地址和表中的所有标记比较，相同的一行就是要访问的存储单元CAM存储器按内容访问：增加标记标识、Tag存储，一般用地址的部分或全部作为标记查找时，将访问地址和标记存储中的所有标记比较，相同的一行就是要访问的存储单元CAM存储器相联存储器在计算机系统中，CAM主要用于需要快速查找的领域：虚拟存储器中存放段表、页表和快表；Cache网络设备中路由的查找主存与Cache的地址映射主存与Cache的地址映射Cache分为若干行（Line），每行的容量和主存块相同Cache与主存的数据交换是以块为单位Cache按内容访问，主存按地址访问必须应用某种方法，把主存的地址定位到Cache中的确切位置地址映射例题主存地址空间大小为MB，按字节编址。主存块大小为B。数据Cache有行假定int型数据为位补码，数组a按行优先方式存放，首地址为（十进制））数据Cache的总容量是多少？）数组元素aa所在主存块分别是多少intaCache原理图主存分块Cache替换管理Cache与主存之间的数据交换是以块为单位CPU与Cache主存之间的数据交换是以字为单位标记存储Cache数据存储Cache的基本工作原理示意图CPU将内存地址同时发往Cache和主存。Cache的四个问题当把一块调入Cache时，放在哪行（映射方式）全相联、直接映射、组相联如何判断当所要访问的地址在Cache中（地址变换）当发生失效时，应替换哪一行？（替换算法）当进行写操作时，应进行哪些操作（写策略）保证数据的一致性全相联多对多：主存一个块可以放到Cache任一行将整个块地址作为Cache行的标记XXXXXXXXXX主存地址：块号（s位）块内偏移（w位）r行s块w字BBBBBBBBBB全相联主存块，每块个字，Cache有行全相联地址变换CPU将内存地址同时发往Cache和主存发往Cache的访存地址会分为块地址和块内偏移块地址同时和Cache中所有行的Tag进行比较相同表示命中，再根据块内偏移从该行中读取一个字，同时撤销内存寻址过程若没有命中，则等待访存过程结束，然后将被访问内存的相对应块调入Cache块地址（块号）全相联地址变换内存地址全相联特点：优点：冲突概率小，Cache的利用高。冲突：所选择的Cache行包含近期要使用的信息缺点：比较电路实现成本高适用于小容量的Cache直接映射直接映射Cache将s位块地址分为两部分：低r位作为Cache的行号（index）rlogm高sr位作为该行tag直接映射的Cache组织直接映射地址变换第一步：用访存地址中的块号的r位行号找到Cache中对应的一行第二步：用块号的sr位与该行的tag比较。若命中，而后用低w位读取所要求的字若不命中，访问主存二、直接映射映射检索过程块号蓝色：行号；绿色：字地址Cache地址Cache地址Cache地址直接映射优点：硬件简单，成本低缺点：每个块只有一个固定的行可存放，容易产生冲突频繁置换会导致Cache抖动，效率下降适合大容量Cache采用更多行减小冲突组相联将Cache分成u组，每组v行组间采用直接映射，组内采用全相联映射主存中的每一块可以被放置到Cache中唯一的组的任何一行组相联是全相联和直接映射的折中方案q组号，j主存块地址、m为Cache总行数muv组号qjmodu设ud，qlogd组相联映射方式低d位表示组号组索引，组index高sd位作为tagCache分为组，每组行组相联映地址变换第一步：用块号的低d位找到对应组第二步：将块号的高sd位与该组中所有行的标记同时进行比较命中，选中该行，用内存地址的低w位选择相应的字不命中，则访问内存三、组相联映射地址变换块号蓝色：组号；绿色：字地址组相联映射方式特点：比全相联容易实现，冲突低u，则为全相联映射方式v表示每组的行数，称之为v路组相联Cache。v，则为直接映射方式得到普遍采用全相联映射载入过程载入载入命中命中载入载入命中载入t主存块，Cache行直接相联映射载入过程（）载入载入命中命中载入载入命中替换t（）主存块，Cache行路组相联映射载入过程载入载入命中命中载入载入命中载入t主存块，Cache行Cache基本概念Cache的作用：解决CPU和主存之间的速度不匹配问题小容量存储器，用SRAM实现对用户透明Cache的原理程序局部性：时间和空间Cache性能命中率、平均访问时间、效率Cache基本概念CAM按内容访问、比较器主存地址：块地址和块内偏移Cache分为若干行（Line），每行的容量和主存块相同Cache与主存的数据交换是以块为单位全相联多对多：主存一个块可以放到Cache任一行将全部块地址作为Cache行的标记全相联地址变换CPU发出的访存地址中的块地址同时和Cache中所有的Tag进行比较。特点冲突概率小，成本高适用于小容量的Cache直接映射多对一：一个主存块只能映射到Cache的一个特定行上直接映射地址变换地址变换用访存地址中的块号的r位行索引找到Cache中对应的行然后用块号的sr位与该行的tag比较。特点硬件简单，成本低，容易产生冲突频繁置换会导致Cache抖动，效率下降适合大容量Cache采用组相联将Cache分成u组，每组v行V路组相联组间采用直接映射，组内采用全相联映射组相联映地址变换地址变换首先访存地址的块地址的低d位找到对应组，然后将块地址的高sd位与该组v行中的所有tag同时进行比较。特点比全相联容易实现，冲突低全相联映射和直接映射的折衷得到普遍采用一个路组相联Cache由行组成，主存储器包含K个块，每块字。请表示主存地址的格式？典型题组相联映射下的主存地址格式如下：每块字块内的字地址需要位Cache由个行组成，每组行Cache共包含组，需位组号主存包含K个块主存块号为位标记位位位位位解：主存容量M，主存地址共位块大小字节，字号块内偏移w块地址：位全相联映射，标记位数等于块地址位数，为位主存格式主存地址F对应的标记字号有一个存储体系，主存容量MB，字长B，块大小B，Cache容量KB。若Cache采用全相联映射，对内存地址（FH）给出相应的标记和字号。例：某PC主存容量为KBCache容量KB每块B。主存多少块？块地址多少位？Cache多少行？主存块：KK，块地址占位Cache行：K用直接映射时，Cache标记几位？位块地址中，低位定位Cache行，高位为标记用全相联映射，Cache标记几位？位例：某计算机的Cache有行，采用二路组相联映射方式，每个主存块大小为字节，按字节编址。则主存号单元的主存块装如Cache的组号是：A、B、C、D、解：二路组相联，共有组，组号占位。每块字节，所以块内地址占位。转化为二进制：：前位为组号，组号为。，mod块地址块号块内偏移块内地址字地址字号替换策略当从主存向Cache传送一个新块，而Cache中可用位置已被占满时，就会产生替换问题直接映射：替换Cache中指定的一行全相联和组相联：从所有行或组内所有行中选取一行换出Cache的常用替换算法：最不经常使用LFU算法近期最少使用LRU算法随机替换策略最不经常使用LFULeastFrequentlyUsed算法每行设置一个计数器，开始计数每访问一次，被访行的计数器增。当需要替换时，将计数值最小的行换出，同时将该行的计数器都清零。不能严格反映近期访问情况。刚调入Cache的新行很容易被换出替换策略例子：设Cache有、、、共行全相联映射，a、b、c、d、e等为主存中的块访问顺序一次如下：a、b、c、d、c、b、c、e、d、d、ae。）采用LFU算法替换计数器从开始计数每访问一次，该行的计数器增。将计数值最小的行换出，该行计数器清零。替换策略近期最少使用LRULeastRecentlyUsed的算法将近期内长久未被访问过的行换出每行设置一个计数器访问时，命中行的计数器清零，其它各行的计数器增替换时，将计数值最大的行换出保护了刚拷贝到Cache中的新行，提高了命中率随机替换随机地选取一行换出命中行的计数器清零，其它各行的计数器增将计数值最大的行换出。Cache的写操作策略Cache的内容只是主存部分内容的副本对Cache的写入导致与主存内容的不一致三种写策略写回法（WriteBack）全写法（WriteThrough、写穿透、写直达）写一次法（WriteOnce）考虑写命中和写不命中两种情况写回法写命中：修改Cache的内容，而不立即写入主存只有当此行被替换时才写回主写未命中：首先将内存中对应块调入Cache，然后对其修改当此行换出时，写回主存特点减少了访问主存的次数存在不一致的隐患每行配置一个修改位，以反映此行是否被CPU修改过。被修改过的行称为脏行（dirty）例题全写法写命中时：同时写入Cache与主存写未命中时：直接向主存进行写入特点：无需增加修改位写Cache和写主存同步进行，不存在数据不一致的情况一定程度上降低了Cache的性能写一次法写回法全写法写命中时：第一次：采取全写法不是第一次：采取写回法写未命中时：与写回法相同主要用于多处理器系统InteliCache结构例题主存地址空间大小为MB，按字节编址。指令数据Cache，均有行，Cache行大小为B，数据Cache直接相联。现有两功能相同的程序A，B，其伪代码如下所示：假定int型数据为位补码，程序编译时ijsum均分配在寄存器中，数组a按行优先方式存放，首地址为（十进制）。）数组元素aa所在主存块对应的Cache行分别是多少，行号从零开始。程序A，B的数据访问命中率各是多少？那个程序的执行时间更短intaforiiiforjjjsumaijintaforjjjforiiisumaij程序A程序B虚拟存储器原因？多用户、多任务的出现，要求每个程序有自己独立的内存空间用户编程时希望不考虑实际程序的运行空间？虚拟存储器只是一个容量非常大的存储器的逻辑模型，它借助于磁盘等辅助存储器来扩大主存容量，使之为更大或更多的程序所使用。虚拟存储器实地址与虚地址用户编制程序时使用的地址称为虚地址或逻辑地址，其对应的存储空间称为虚存空间或逻辑地址空间；计算机物理内存的访问地址则称为实地址或物理地址，其对应的存储空间称为物理存储空间或主存空间。程序进行虚地址到实地址转换的过程称为程序的再定位。注意：物理地址由CPU地址引脚送出，用于访问主存的地址。虚拟地址由编译程序生成的，是程序的逻辑地址。主存外存层次所用的地址变换映射方法和替换策略与cache主存层次所用的方法和策略是相同的，即都基于程序局部性原理。它们遵循的原则是：虚拟存储器虚存访问过程：虚存空间用户程序按照虚地址编程并存放于辅存之中运行时，操作系统将程序的部分调入内存。每次访存时，判断：虚地址对应部分是否在内存？若在：虚实地址转换不在：从辅存中调入虚拟存储器虚存是概念模型，不是实物对系统程序不透明、对应用程序透明虚存能有效提高存储体系性能Cache主存辅存Cache主存访问机制主存辅存访问机制虚拟存储器Cache与虚存的异同：出发点相同：提高存储系统性能原理相同：局部性原理侧重点不同：Cache：解决速度差异，提高访存速度；虚存：容量、分配、保护等数据通路不同：CPU与主存和Cache有直接通路；CPU不能直接访问辅存虚拟存储器Cache与虚存的异同：透明性不同：Cache：完全由硬件完成，透明；虚存：硬件软件完成，仅对用户程序透明未命中损失不同：Cache：未命中时间损失小虚存：未命中时间损失大虚拟存储器虚存机制要解决的关键问题调度问题：哪些程序、数据调入主存？地址映射问题：虚实地址变换替换问题：决定哪些程序和数据应被调出主存更新问题：主存、辅存内容一致性虚拟存储器不同的虚拟存储器机制页式虚拟存储器段式虚拟存储器和段页式虚拟存储器不同的替换算法：FIFO、LRU、LFU页式虚拟存储器页式虚拟存储系统中，虚拟空间分成页，称为逻辑页；主存空间也分成同样大小的页，称为物理页。虚存地址分为两个字段：逻辑页号页内行地址。实存地址也分两个字段：物理页号页内行地址。页表中每一个虚存逻辑页号有一个表目，表目内容包含该逻辑页所在的主存页面地址物理页号，用它作为实存地址的高字段，与虚存地址的页内行地址字段相拼接，产生完整的实主存地址，据此来访问主存页式虚拟存储器结构页表通常在主存中，也至少要访问两次物理存储器才能实现一次访存，这将使虚拟存储器的存取时间加倍。为了避免对主存访问次数的增多，把页表中的最活跃的部分存放在高速存储器中，这个专用于页表缓存的高速存储部件通常称为转换后援缓冲器TLB。保存在主存中的完整页表则称为慢表。页式虚拟存储器TLB的地址映射过程段式虚拟存储器和段页式虚拟存储器、段式虚拟存储器段是按照程序的自然分界划分的长度可以动态改变的区域。子程序、操作数和常数等划分到不同的段中，并且每个程序可以有多个相同类型的段。虚地址由段号和段内地址（偏移量）组成。虚地址到实主存地址的变换通过段表实现。段式虚拟存储器地址变换段页式虚拟存储器是段式虚拟存储器和页式虚拟存储器的结合。它把程序按逻辑单位分段以后，再把每段分成固定大小的页。程序对主存的调入调出是按页面进行的，但它又可以按段实现共享和保护，兼备页式和段式的优点。缺点是在映象过程中需要多次查表。段页式虚拟存储器在段页式虚拟存储系统中，每道程序是通过一个段表和一组页表来进行定位的。段表中的每个表目对应一个段，每个表目有一个指向该段的页表起始地址及该段的控制保护信息。如果有多个用户在机器上运行，多道程序的每一道需要一个基号，由它指明该道程序的段表起始地址。虚拟地址格式如下：段页式虚拟存储器例假设有三道程序用户标志号为A，B，C，其基址寄存器内容分别为SA，SB，SC，逻辑地址到物理地址的变换过程如下图所示。在主存中，每道程序都有一张段表，A程序有段，C程序有段。每段应有一张页表，段表的每行就表示相应页表的起始位置，而页表内的每行即为相应的物理页号。请说明虚实地址变换过程。替换算法虚拟存储器中的页面替换策略和cache中的行替换策略有很多相似之处，但有三点显著不同：缺页至少要涉及一次磁盘存取，读取所缺的页，缺页使系统蒙受的损失要比cache未命中大得多。页面替换是由操作系统软件实现的。页面替换的选择余地很大，属于一个进程的页面都可替换。虚拟存储器中的替换策略一般采用LRU算法、LFU算法、FIFO算法，或将两种算法结合起来使用。对于将被替换出去的页面，假如该页调入主存后没有被修改，就不必进行处理，否则就把该页重新写入外存，以保证外存中数据的正确性。为此，在页表的每一行应设置一修改位。例假设主存只有abc三个页框，组成a进c出的FIFO队列，进程访问页面的序列是，，，，，，，，，，号。若采用FIFO算法，FIFO算法LRU算法，用列表法分别求两种替换策略情况下的命中率。虚拟存储器实例奔腾PC机的虚地址模式奔腾PC的存储管理部件MMU包括分段部件SU和分页部件PU两部份，可允许SU，PU单独工作或同时工作。分段不分页模式：虚拟地址由一个位的段参照和一个位的偏移组成。分段部件SU将二维的分段虚拟地址转换成一维的位线性地址。优点是无需访问页目录和页表，地址转换速度快。对段提供的一些保护定义可以一直贯通到段的单个字节级。分段分页模式：在分段基础上增加分页存储管理的模式。即将SU部件转换后的位线性地址看成由页目录、页表、页内偏移三个字段组成，再由PU部件完成两级页表的查找，将其转换成位物理地址。兼顾了分段和分页两种方式的优点。不分段分页模式：这种模式下SU不工作，只是分页部件PU工作。程序也不提供段参照，寄存器提供的位地址被看成是由页目录、页表、页内偏移三个字段组成。由PU完成虚拟地址到物理地址的转换。这种模式减少了虚拟空间，但能提供保护机制，比分段模式具有更大的灵活性。保护模式的分页地址转换奔腾页面大小为MB使用单级页表。位线性地址分为高位的页面和低位的页内偏移两个字段。页表项的I位指示页面大小，P位为出现位，A位为访问过位，D位为修改过位。RW位用于读写控制，US位用于用户监督控制，PCD位用于页cache禁止的控制，PWT位用于页全写法的控制。奔腾MB分页方式地址变换存储保护当多个用户共享主存时，就有多个用户和系统软件存于主存中，为使系统能正常工作，应防止由于一个用户程序出错而破坏其他用户的程序和系统软件，还要防止一个用户程序不合法地访问不是分配给它的主存区域。为此，系统应提供存储保护。通常采用的方式是：存储区域保护访问方式保护存储区域保护非虚拟存储器的主存系统可采用界限寄存器方式。由系统软件经特权指令设置上、下界寄存器，为每个程序划定存储区域，禁止越界访问。界限寄存器方式只适用于每个用户占用一个或几个连续的主存区域。在虚拟存储系统中，通常采用页表保护、段表保护和键式保护方法。页表保护和段表保护每个程序的段表和页表本身都有自己的保护功能。每个程序的虚页号是固定的，经过虚地址向实地址变换后的实存页号也就固定了。那么不论虚地址如何出错，也只能影响到相对的几个主存页面。不会侵犯其他程序空间。段表和页表的保护功能相同，但段表中除包括段表起点外，还包括段长。键保护方式为主存的每一页配一个键，称为存储键每个用户的实存页面的键都相同。为了打开这个锁必须有钥匙，称为访问键。访问键赋予每道程序，并保存在该道程序的状态寄存器中。当数据要写入主存的某一页时，访问键要与存储键相比较。若两键相符，则允许访问该页，否则拒绝访问。环保护方式对正在执行的程序本身的核心部分或关键部分进行保护。它是按程序的重要性及对整个系统的正常运行的影响程度进行分层，每一层叫做一个环。在现行程序运行前由操作系统定好程序各页的环号，并置入页表中。然后把该道程序的开始环号送入CPU的现行环号寄存器。程序可以访问任何外层空间；访问内层空间则需由操作系统的环控例行程序判断这个向内访问是否合法。访问方式保护对主存信息的使用可以有三种方式：读、写和执行。相应的访问方式保护就有R、W、E三种方式形成的逻辑组合。这些访问方式保护通常作为程序状态寄存器的保护位，并且和区域保护结合起来实现。表访问方式保护的逻辑组合本章小结对存储器的要求是容量大、速度快、成本低。为了解决了这三方面的矛盾，计算机采用多级存储体系结构，即cache、主存和外存。存储器的技术指标有存储容量、存取时间、存储周期、存储器带宽。SRAM、DRAM和ROM各自的特性第四章指令系统指令系统的发展与性能要求指令格式操作数类型指令和数据的寻址方式典型指令指令系统的发展与性能要求冯诺依曼结构主要思想五大部件存储程序程序控制计算机程序由一系列的机器指令组成指令是计算机执行某种操作的命令每个指令的执行过程依靠硬件实现指令系统的发展与性能要求指令是软件和硬件分界面Interface硬件设计人员采用各种手段实现它；软件设计人员则利用它编制系统软件和应用软件指令系统：一台计算机中所有机器指令的集合表征一台计算机性能的重要因素影响计算机的硬件结构、系统软件，机器的适用范围指令集架构InstructionSetArchitectureISA指令系统指令系统的发展系列计算机基本指令系统相同、基本体系结构相同的一系列计算机同一系列的各机种有共同的指令集指令集向下兼容X系列、ARM系列指令系统的发展复杂指令系统计算机CISCComplexInstructionSetComputer单条指令功能复杂，整个指令系统数量庞大控制器研制开发周期变长，正确性难以保证，调试维护困难X、IAIA、IBMSystemIntelMCS精简指令系统计算机RISCReducedInstructionSetComputer克服CISC缺点，便于VLSI技术实现单条指令功能简单规则：的指令完成的功能控制器设计难度降低ARMAdvancedRISCMachineRISCV、MIPSAVRAlfandVegardsRISCprocessor指令格式表示一条指令的二进制串称为指令字，指令指令格式：用二进制代码表示的结构形式操作码（OPOperationCode）该指令执行的操作，编码表示地址码（ACAddressCode）描述指令的操作对象，可以是操作数本身，也可以是操作数的位置存储器单元存储器地址寄存器寄存器编号IO设备中的缓冲端口号地址码操作数有被操作数、操作数及操作结果这三种数形成了三种指令格式三地址指令二地址指令一地址指令零地址指令地址码零地址指令指令字中只有操作码，而没有地址码一种是无需操作数如NOP、HLT停机指令等另一种是操作数为默认的（或称隐含的）如操作数在累加器或者堆栈中零地址指令地址码一地址指令常称为单操作数指令，指令中只有一个地址码可能是单操作数运算给出的地址既作为操作数的地址，也作为结果的地址OPAA也可能是二元运算指令中提供一个操作数，另一个操作数则是隐含的AOPACA一地址指令地址码二地址指令最常见的指令格式，又称为双操作数指令运算结果保存在其中一个地址码中，原来的数据被覆盖（A）OP（A）A地址码A兼做存放操作结果地址码三地址指令AOPAAA和A为源操作数A为目的操作数地址码在二地址和三地址指令格式中，从操作数的物理位置划分为三种类型存储器存储器StorageStorageSS型指令：从内存单元中取操作数，操作结果存放至内存单元需要多次访问内存寄存器寄存器RegisterRegisterRR型指令：从寄存器中取操作数，把操作结果放到另一寄存器这类指令的速度很快，因为不需要访问内存寄存器存储器RegisterStorageRS型指令：此类指令既要访问内存单元，又要访问寄存器指令字长度指令字长度：一条指令的二进制位数为了取指方便，一般为机器字长倍数半字长、单字长、双字长多字长指令指令字长度等于两个或多个机器字长优点：地址码更多，解决内存的寻址问题；缺点：多次访存才能取得一条指令，降低了速度，占用存储空间大指令字长度指令集中所有指令长度是否相等等长指令：所有指令长度相等结构简单，控制线路简单MIPS、ARM变长指令：指令字长度随功能而异结构灵活，控制较复杂X现在指令字长一般为位固定长度指令助记符为了便于书写和阅读，指令通常用个或个英文缩写字母来表示，叫做指令助记符指令格式举例：ARM指令格式指令长度为位，定长指令单字长指令RR型指令、三地址指令指令格式举例X指令格式变长指令，字节，典型的CISC指令系统多字长指令X指令格式JEHCallPUSHESIMOVEBXEDI例机器字长位，指令格式如下所示，其中OP为操作码，试分析指令格式的特点。解：单字长二地址指令操作码字段OP可以指定条指令源寄存器和目标寄存器都是通用寄存器（总共个），所以是RR型指令，两个操作数均在寄存器中例机器字长位，指令格式如下所示，OP为操作码字段，试分析指令格式特点。双字长二地址指令操作码字段OP为位，可以指定种操作一个操作数在源寄存器，另一个操作数在存储器中所以是RS型指令。通用寄存器（总共个HP和RISCJohnHennessyMIPS是在是其在Stanford的研究成果Hennessy于年在硅谷创立了MIPS公司后任Stanford大学校长DavidPatterson加州大学伯克利分校教授，研究成果发展出SUN公司SPARC处理器是谷歌的杰出工程师RISCVFoundation董事会副主席HP和RISC两人出版了两本著名的教科书：ComputerOrganizationandDesignTheHardwareSoftwareInterface计算机组成与设计：硬件软件接口ComputerArchitectureAQuantitativeApproach计算机体系结构：量化方法ACM图灵奖MIPS架构历史MIPS（MicroprocessorwithoutInterlockedPipelinedStages）ISA是经典的RISC架构之一年由斯坦福大学的Hennessy团队研制年被MIPSTechnologies公司商业化年SGI收购年ImaginationTechnologies公司收购年卖给Tallwood年WaveComputing收购（命运多舛）年成为MIPSOpen，正式开源（年闭源）MIPSISA版本MIPSMIPS多个版本基于MIPSISA的处理器龙芯系列，君正系列MIPS指令集特点单字长指令指令长度为字节位定长指令大部分为三地址指令，RR型个位的通用寄存器内存按字节编址，内存严格字节对齐访问MIPS里没有状态码，没有标志寄存器MIPS指令格式OPRSRtshamtRdbitsfunctbitsbitsbitsbitsbitsOPRSRtbits偏移量bitsbitsbitsOPbits地址bitsR型指令I型指令J型指令RegisterformatImmediateformatJumpformatMIPS指令格式（R型指令）OPRSRtshamtRdbitsfunctbitsbitsbitsbitsbits例：addsssMIPS指令格式R型指令xsssMIPS指令格式（I型指令）OP：操作码Rs：第个源操作数寄存器Rt：目的操作寄存器偏移量：第二个原操作数OPRSRtbits偏移量bitsbitsbitsMIPS指令格式（J型指令）OP：操作码跳转指令，用一个位的立即数作为跳转的目标地址OPbits立即数bits操作数类型操作数类型地址数据：地址是无符号整数。数值数据：定点数、浮点数字符数据：字符或字符串，使用ASCII码逻辑数据：一个单元中有几位二进制bit项组成，每个bit的值可以是或。当数据以这种方式看待时，称为逻辑性数据RISCV完全开放大道至简包含一个最小的核心ISA适合硬件实现轻装上阵的后发优势模块化的可扩展指令集方便简化硬件实现，提升性能更规整的指令编码、更简洁的运算指令和访存模式高效分支跳转指令（减少指令数目）、简洁的子程序调用无条件码执行、无分支延迟槽、无零开销硬件循环（支持for循环的硬件支撑）MIPSRISCV指令助记符及语法格式大同小异RISCV分支预测，MIPS延迟槽RISCV支持变长指令扩展RISCV将源寄存器rs，rs和目标寄存器（rd）固定在同样位置，以简化指令译码立即数分散在不同位置，但符号位固定在第位，可加速符号扩展电路RISCV（年）三大事件：第一，发布首台RISCV的便携式计算机第二，Intel设立创新基金，支持RISCV生态；第三，SiFive估值超亿美元RISCV全球会员超过家，超过个核开源；SPECint首次超过分，进入高性能计算行列在IoT领域的应用规模超过亿颗中国公司的出货量占据RISCV（年）阿里平头哥发布了高性能RISCV芯片平台“无剑”及SoC原型“曳影”，兼容龙蜥操作系统并成功运行LibreOffice无剑平台是当前全球性能最高的可量产RISCV平台：支持核RISCV处理器，主频可达GHz，CPUXPU异构架构；支持位LPDDRX，最高吞吐率MT；整合TOPs的IntAI算力RISC发展年SeymourCray设计的CDC采用了loadstore设计，被认为是RISC架构的先驱年代，RISC的概念由IBM的约翰科克（JohnCocke）和斯坦福大学的约翰亨尼（JohnHennessy）等人提出年，斯坦福大学的Hennessy发布了首款MIPS芯片年，加州大学伯克利分校的DavidPatterson推出了RISCI年RISCII；年发布了RISCIII；年发布了RISCIV年，发布了RISCV年，SUN公司在RISCII基础上开发了SPARC处理器RISC架构在年代末至年代得到了广泛的应用和普及。许多公司开始推出基于RISC架构的处理器，如IBM的POWER架构、DEC的Alpha架构和HP的PARISC架构等。RISCV是一种开源的RISC架构，在开始兴起，并得到了全球范围内的关注和采用。RISCV的开放性和灵活性使得它成为教育、研究和嵌入式系统等领域的理想选择。指令和数据的寻址方式存储器中既存放指令，也存放数据在存储器中，操作数或指令字写入或读出的方式，有地址指定方式、相联存储方式和堆栈存取方式几乎所有计算机在内存中都采用地址指定方式当采用地址指定方式时，形成操作数或指令地址的方式，称为寻址方式指令和数据的寻址方式寻址方式问题确定本条指令中各操作数的地址下一条指令的地址寻址方式分为两类顺序寻址方式指令寻址方式跳跃寻址方式数据寻址方式顺序寻址方式指令地址在内存中按序排放执行程序时，通常是顺序执行称为指令的顺序寻址方式使用程序计数器PC（programcounter）保存指令的顺序号顺序号就是指令在内存中的地址新指令地址：PCPC常量常量就是当前指令的长度MIPS：PC图指令的寻址方式跳跃寻址方式当程序转移执行顺序时，指令寻址采取跳跃寻址方式所谓跳跃，是指下条指令的地址码不是由PC给出，而是由本条指令直接给出程序跳跃后，按新的指令地址开始顺序执行PC的内容也必须相应改变，以便及时跟踪新的指令地址跳跃寻址方式跳跃寻址方式功能实现程序转移或构成循环程序或将某些程序作为公共程序引用（子程序调用）各种条件转移或无条件转移指令，属于跳跃寻址操作数寻址方式形成操作数的有效地址（EAEffectiveAddress）的方法，称为操作数的寻址方式地址码由形式地址（偏移量）和寻址方式特征位组合形成例如，一种单地址指令中用X，I，A各字段组成该指令的地址码寻址方式特征位指明如何对形式地址进行变换操作数基本寻址方式计算机中操作数的存放位置有操作数包含在指令中；操作数包含在CPU的某一个内部寄存器中；操作数包含在主存中；操作数包含在IO设备的端口中根据操作数放在不同的地方，从而派生各种不同的寻址方式操作数寻址方式、隐含寻址在指令中不明显的给出而是隐含着操作数的地址例如，单地址指令、双地址指令、立即寻址地址码中不是操作数的地址，而是操作数本身也叫立即数特点：操作码和操作数被同时取出，提高了指令的执行速度操作数是指令的一部分，不能修改操作数的大小将受到指令长度的限制，寻址方式灵活性差例如：ADDBXHH为立即数（X）addi为立即数（MIPS）直接寻址直接寻址：形式地址A就是操作数的有效地址EAEAA直接寻址方式由寻址方式特征位给予指示X：MOVAXEAAImm为寻址方式特征位直接寻址内存、间接寻址间接寻址：形式地址A是操作数内存地址的指示，A单元的内容才是操作数的有效地址。结合直接寻址和间接寻址，定义指令格式如下：I，表示直接寻址，有效地址EAAI，表示间接寻址，有效地址EAA、间接寻址间接寻址要比直接寻址灵活至少需要两次访问主存储器才能取出操作数间接寻址方式示意图、寄存器寻址操作数在通用寄存器中地址码为通用寄存器编号，即EAR从寄存器中取操作数比访问主存快X：MOVAXBXMIPSadd、寄存器间接寻址寄存器中存放的不是操作数，而是操作数的内存地址地址码给出通用寄存器的编号，有EARR偏移寻址偏移寻址是直接寻址和寄存器间接寻址的结合有效地址EAA（R）。寻址特征位指明某个专用寄存器常用的三种偏移寻址是相对寻址、基址寻址、变址寻址。偏移寻址相对寻址方式专用寄存器是程序计数器PC即有效地址EAAPC。“相对”寻址，就是相对于PC的地址形式地址A可正可负一种指令寻址方式相对寻址方式PC程序指令计数器基址寻址方式专用寄存器是基址寄存器形式地址A是通常是无符号整数可以扩大寻址能力，基址寄存器的位数长，可以访问较大的地址范围MIPSLWEA变址寻址方式专用寄存器是变址寄存器目的而在于实现程序块的规律性变化例如，一个数组在内存的首地址为X，将首地址X作为指令中的形式地址A，并在变址寄存器中指出元素的序号，便可访问任一元素X：MOVAXSISIDI都称为变址寄存器变址寻址方式X：MOVAXSISIDI都称为变址寄存器操作数R内存段寻址Intel微机中，ALU位运算，但其内存容量可到M，即地址有位将整个M空间存储器以K为单位划分成若干段。在形成位物理地址时，段寄存器中的位数会自动左移位，然后以位偏移量相加堆栈寻址方式堆栈有寄存器堆栈和存储器堆栈两种形式，都以先进后出的方式存取数据不论哪种堆栈，需要一个隐式或显式的堆栈寄存器来指明栈顶（栈指针）的位置（地址）X中，SPStackPoint栈顶指针BPBasePoint栈底堆栈寻址方式根据栈顶状态不同，堆栈分为：满栈：栈指针指向栈顶元素位置空栈：栈指针指向下一个空位置根据增长方向不同，堆栈分为：递减栈：堆栈向内存地址减小的方向生长，即向下生长。递增栈：堆栈向内存地址增加的方向生长，即向上生长。X满栈、递减栈栈指针指向最后压入堆栈的有效数据项，称为满栈（先改变SP，再放数据）；栈指针指向下一个待压入数据的空位置，称为空栈（先放数据，再改变SP）。x栈底栈区xx递增栈：递减栈：寻址方式举例：PentiumEA段寄存器描述符寄存器基址寄存器变址寄存器比例因子偏移量寻址方式举例：MIPS寻址方式举例：RISCV例一种二地址RS型指令的结构如下所示：位位位位位其中I为间接寻址标志位，X为寻址模式字段，A为偏移量字段。通过I，X，A的组合，可构成下表所示的寻址方式。请写出六种寻址方式的名称。OPXAPCR基寻址方式X操作数立即直接间接相对基址有效地址EAEAAEAAEAPCAEARA例设某机的指令格式、有关寄存器和主存内容如下，X为寻址方式，A为形式地址，请在下表中填入有效地址EA及操作数的值。？指令格式设计举例例某机字长位，采用三地址指令，支持种寻址操作，完成种操作，各寻址方式均可在K主存范围内取得操作数，并可在K范围内保存运算结果。问应采用什么样的指令格式？指令字长最少应为多少位？执行一条直接寻址模式指令最多要访问多少次主存？位指令字需占用个存储字取指需访存次，取源操作数访存次，写结果次，共次指令的分类按指令的功能：数据传送实现主存和寄存器之间，或寄存器和寄存器之间的数据传送数据处理定点或浮点算术运算，向量运算、逻辑运算与移位等程序控制用于控制程序的执行方向分支、转移、调用子程序其他指令系统控制，特权，安全等设存储字长和指令字长均为位，若指令系统可完成种操作，且具有直接、间接、变址、基址、相对和立即种寻址方式。在保证最大范围内直接寻址的前提下，指令字中操作码占几位？寻址特征位占几位？可直接寻址的范围是多少？间接寻址的范围是多少？某计算机的字长为位，数据用补码表示，存储器按字编址，访存指令格式为位，其中位操作码，位寻址方式字段，分别表示立即寻址、直接寻址、间接寻址、变址寻址和相对寻址这种，位地址码字段。设PC和Rx分别为程序计数器和变址寄存器其中Rx的位数为位问：立即寻址的数据范围多大？各种寻址方式的寻址范围大小是多少？下列关于各种寻址方式获取操作数快慢的说法中，正确的是I立即寻址快于堆栈寻址II堆栈寻址快于寄存器寻址III寄存器间接寻址快于变址寻址IV变址寻址快于间接寻址MIPS指令系统MIPS指令集特点定长指令，指令长度固定字节简单的loadstore结构，内存中的数据访问严格字节对齐loadstore结构：只有loadstore类指令可以访问存储器寻址方式简单，每条指令的操作也简单易于流水线设计易于编译器开发MIPS寄存器字长位个通用寄存器个特殊寄存器PC（程序计数器）HI和LOHI乘积高位余数，LO：乘积低位（商）；除了用在乘除法之外，也不能有做其他用途硬件没有强制性的指定寄存器使用规则，但是在实际使用中，这些寄存器的用法都遵循一系列约定MIPS里没有状态码，没有标志寄存器个通用寄存器IA的寄存器组织个通用寄存器两个专用寄存器个段寄存器MIPS寻址方式数据寻址方式立即寻址寄存器寻址基址寻址基址寄存器偏移量任一通用寄存器都可以作为基址寄存器MIPS寻址方式指令寻址顺序寻址：PCPCPC相对寻址PC偏移量左移两位PC伪直接寻址（跳跃寻址）位偏移量PCPC偏移量MIPS指令格式OPRSRtshamtRdbitsfunctbitsbitsbitsbitsbitsOPRSRtbits偏移量bitsbitsbitsOPbits偏移量bitsR型指令I型指令J型指令RegisterformatImmediateformatJumpformatMIPS指令格式（R型指令）主要是运算类指令OP：操作码，所有R型指令OP为全Rs：第个源操作数寄存器Rt：第个源操作数寄存器Rd：存放结果的目的操作数寄存器shamt：用于移位指令，指明移位次数funct：功能码，对操作码进行补充OPRSRtshamtRdbitsfunctbitsbitsbitsbitsbitsR型指令MIPS指令格式R型指令寄存器寻址汇编格式：opRdRsRt例：addsss指令编码：MIPS指令格式R型指令xsssMIPS指令格式（I型指令）LS指令和分支指令Rt：目的操作数寄存器Rs和偏移量：源操作数OPRSRtbits偏移量bitsbitsbitsI型指令汇编格式：opRt偏移量RsMIPS指令格式（I型指令）三地址，RR型，立即数运算指令Rs：第个源操作数寄存器Rt：目的操作寄存器偏移量：第个源操作数立即数OPRSRtbits偏移量bitsbitsbitsI型指令汇编格式：opRtRs偏移量MIPS指令格式I型指令立即寻址基址寻址相对寻址MIPS指令格式I型指令addioprs原操作数寄存器rt目的寄存器偏移量负数用补码表示请写出指令的机器码十进制指令格式二进制指令代码xDFFCE十六进制指令代码MIPS指令格式（J型指令）单地址指令跳转指令，用一个位的偏移量作为跳转的目标地址OPbits偏移量bitsJ型指令汇编格式：op偏移量MIPS指令格式（J型指令）伪直接寻址跳转地址为指令中的位偏移量与PC中的高位拼接得到新的PCPC目标地址例：jx指令编码：新PCMIPS指令系统（）数据传送类：（）算术逻辑运算类：（）控制类：、数据传送类：内存数据访问指令读内存指令：lwlblh（I型指令）wwordbbytehhalfword访问元素A，A保存在tlwtt基址寻址写内存指令：swsbsh（I型指令）t的数据保存到A；swtt、算术逻辑运算类：加减指令加法add（R型指令）addssssss减法sub（R型指令）subssssss、算术逻辑运算类：加减指令如何编译下面的C语言表达式abcde编译成多行汇编指令addtsstempbcaddttstemptempdsubstsatempe、算术逻辑运算类：加立即数立即数相加指令addi（I型指令）addissss立即数传送addiszeros寄存器间数据传送addssss利用zero实现寄存器之间的数据传输、算术逻辑运算类：逻辑运算逻辑移位指令sll、srl、sra（R型指令）sllsss左移两位srlsss右移两位逻辑运算andorxoraddiorixori（R型和I型指令）andttttttorttttttandittttoritttt、控制类指令跳转指令、控制类指令C语言条件判断指令Ifabielsei等效C指令IfabgotoLigotoLLiL等效MIPS指令beqssLaddiszerojLLaddiszeroL等效MIPS指令sasbsi、控制类指令比较指令sltslti比较指令sltSetonLessThansltregregreg如果regreg则reg先比较，再分支IfssgotoLessslttsstifssbnetLessiftgotoLess循环结构C语言简单循环结构，A为int数组doggAiiijwhileih重写代码LoopggAiiijifihgotoLoop编译后的变量映射循环结构最后编译的MIPS代码LoopslltstiaddttstAilwtttAiaddsstggAiaddsssiijbnessLoopifihgotoLoop原始C代码LoopggAiiijifihgotoLoop循环结构最后编译的MIPS代码LoopslltstiaddttstAilwtttAiaddsstggAiaddsssiijbnessLoopifihgotoLoop原始C代码LoopggAiiijifihgotoLoopMIPS函数调用C语言函数调用intfunctionintaintbreturnabMIPS实现函数调用的机制返回地址寄存器ra参数寄存器aaaa返回值寄存器vv局部变量ss堆栈指针sp过程调用实现机制sumababssintsumintxintyreturnxyaddaszeroxaaddaszeroybaddirazerorajsum调用函数sumsumaddvaa过程入口jrranew返回主程序instruction过程调用实现机制sumababssintsumintxintyreturnxyaddaszeroxaaddaszeroybaddirazerorajsum调用函数sumsumaddvaa过程入口jrranew返回主程序instructionJjalsum过程调用机制jallabellinkandjumpraPCsavenextinstructionaddressjLabel过程返回指令jrrareturntomainprogram在位MIPS体系结构下，最多可寻址GB地址空间xFFFFFFFFxAxCxBFFFFFFFxxFFFFFFFxFFFFFFFxMIPS内存地址空间数据通路流水线化MARS开源MIPS仿真器，汇编器MIPSX差异精简指令系统RISC选取使用频率最高的一些功能实现，指令条数少便于硬件实现，用软件实现复杂指令功能指令长度固定，指令格式简单，寻址方式简单只有存数取数指令可以访问存储器RS型，其余指令的操作都在寄存器之间进行RR型设置大量寄存器（）一个机器周期完成一条机器指令RISCCPU采用硬布线控制，CISC采用微程序CSIC与RISC互相融合研究生统考例题例某计算机字长为位，主存地址空间大小为KB，按字编址。采用单字长指令格式，指令各字段定义如图，转移地址采用相对寻址方式，相对偏移量用补码表示。寻址方式如图。注x表示存储器地址x或寄存器x的内容（）该指令系统最多可有多少条指令？该计算机最多有多少个通用寄存器？存储器地址寄存器MAR和存储器数据寄存器MDR至少需要多少位？研究生统考例题注x表示存储器地址x或寄存器x的内容（）转移指令的目标地址范围是多少？例某计算机字长为位，主存地址空间大小为KB，按字编址。采用单字长指令格式，指令各字段定义如图，转移地址采用相对寻址方式，相对偏移量用补码表示。寻址方式如表。研究生统考例题注x表示存储器地址x或寄存器x的内容（）若操作码B表示加法操作，助记符为add，寄存器R，R的编号分别为B和B，R的内容为H，R的内容为H，地址H中的内容为H，地址H中的内容为H，则汇编语句addRR逗号前为源操作数，逗号后为目的操作数，对应的机器码是多少？用十六进制表示。该指令执行以后，哪些寄存器和存储单元的内容会发生改变？改变后的内容是什么？例某计算机字长为位，主存地址空间大小为KB，按字编址。采用单字长指令格式，指令各字段定义如图，转移地址采用相对寻址方式，相对偏移量用补码表示。寻址方式如图。MIPS仿真工具MARSMIPS汇编程序汇编源程序由数据声明段和代码段组成。汇编程序文件以s或asm为后缀数据声明以data开始，声明在代码中使用的变量、常量在主存中创建了对应的空间代码段以text开始，由指令构成的程序代码代码以main开始。程序的注释使用符号进行注释。MIPS汇编程序模板TitleFilenameAuthorDateDescriptionInputOutput数据段Datasegmentdata自定义的数据代码段Codesegmenttextgloblmainmainmainprogramentry自己写的代码livExitprogramsyscall数据声明格式：valnamestoragetypevalues创建一个以valname为变量名，values为初值，存储类型是storagetype的变量。变量名后要跟一个英文冒号数据存储类型storagetypeword，half，byte字、半字、字节asciiz字符串，以null结尾varwordvar为一个字变量，初值为，整数arraybyte‘a’‘b’array为两个元素的字节数组，初值分别为a和b的ASCII码arrayspace分配一块连续的内存区域，容量为字节stringasciiz“Printthisn”定义一个字符串汇编指令语句代码部分的语句格式：labelmnemonicoperandscommentLabel标记标记一条指令在内存中的位置，以英文冒号结尾Moemonic助记符MIPS机器指令、汇编伪指令（比如addsub等Operands操作数根据指令格式定义的操作数，可以是寄存器、内存变量、常量Laddiuttt加系统调用syscall取数、存数codesegmentdatavaluewordtextgloblmainmainmain入口latvalue将变量value的地址装入tla是伪指令lwtt将地址t的字数据装入tlwtt将地址t的字数据装入taddttttttswtt将t中的数据存入地址tliv退出syscall机器指令与汇编语言伪指令汇编器定义的，用于增强汇编程序可读性和提高编程效率编译时，汇编器将伪指令翻译为一条或多条机器指令汇编器建立符号表，以记录每个变量和标记的内存地址例符号表DATAvarbyteZstrasciizMyStringnvarwordxALIGNvarhalf符号表symboltableLabelvarstrvarvarAddressxxxx读取并显示一个整数codesegmenttextgloblmainmainmainprogramentryliv号功能调用，读取整数syscallv读取的值moveava要显示的整数值liv号功能调用，显示整数syscallliv退出程序syscallMARS仿真步骤点击工具栏编译程序（快捷键F）运行（快捷键F），“RunIO”窗口显示并输出程序运行结束，系统复位F，重新开始输入并显示字符串DatasegmentdatastrspacearrayofbytesCodesegmenttextgloblmainmainmainprogramentrylaastraaddressofstrliaamaxstringlengthlivreadstringsyscalllivPrintstringstrsyscalllivExitprogramsyscall三个整数相加（）Input分别输入三个整数Output输出和DatasegmentdatapromptasciizPleaseenterthreenumbersnsummsgasciizThesumisCodesegmenttextgloblmainmainlaaprompt显示提示字符串promptlivsyscallliv读第一个数到tsyscallmovetv三个整数相加（）liv读第二个数到tsyscallmovetvliv读第三个数到tsyscallmovetvadduttt累加addutttlaasummsgwritesummessagelivsyscallmoveat输出结果livsyscalllivexitsyscall运行结果小写字母到大写转换Objective小写字母转换到大写Input输入一个字符串Output以大写形式输出DatasegmentdatanamepromptasciizPleasetypeastringoutmsgasciizYournameincapitalsisinnamespacespaceforinputstringCodesegmenttextgloblmainmainlaanamepromptprintpromptstringlivsyscalllaainnamereadtheinputstringliaatmostcharsnullcharlivsyscall小写字母到大写转换laaoutmsgwriteoutputmessagelivsyscalllatinnamet为输入字符串的首地址looplbttload一个字节beqztexitloopift退出循环bltt‘a’nochanget‘a’表示大写，处理下一个字符bgtt‘z’nochanget‘z’表示非字母字符，处理下一个字符addiutt‘a’t‘z’小写转大写Aasbtt保存于字符原位置nochangeaddiuttt指向下一个字符jloopexitlooplaainname输出转换完成的大写字符串livsyscalllivexitsyscall第五章中央处理器本章讨论CPU的功能组成，控制器的工作原理和实现方法，微程序控制原理，基本控制单元的设计以及先进的CPU系统设计技术返回第五章中央处理器CPU功能和组成指令周期时序产生器和控制方式微程序控制器硬布线控制器流水CPURISCCPUCPU的功能和组成CPU的功能冯诺依曼的“存储程序、程序控制”用计算机解决某个问题时，首先编写程序程序是一个指令序列，这个序列明确告诉计算机应该逐步执行什么操作（操作码）在什么地方找到用来操作的数据，结果存到何处（地址码）CPU的功能计算机进行信息处理的过程可分为两步：将程序和数据装入存储器；从程序入口开始取指令，执行指令，得到所需结果，然后结束运行中央处理器是控制计算机自动完成取出指令和执行指令任务的部件计算机的核心部件，简称为CPU（CentralProcessingUnit）CPU的功能指令控制：保证控制器按顺序执行程序操作控制管理并产生一系列操作信号，将它们送往相应的部件时间控制：对各种操作实施时间上的定时数据加工：对数据进行算术和逻辑运算CPU的基本组成早期的CPU由运算器和控制器两大部分组成现在将外围的一些逻辑功能部件纷纷移入CPU，使CPU的组成越来越复杂运算器数据加工处理部件组成ALU、通用寄存器、DR和PSW主要功能执行算术运算执行逻辑运算控制器协调和指挥整个计算机系统的操作组成PC、IR、指令译码器、时序发生器和操作控制器功能从指令Cache中取出一条指令，生成下一条指令在指令Cache的位置；对指令进行译码，产生相应的操作控制信号控制CPU、内存和输入输出设备间的数据流动CPU中的主要寄存器在CPU中主要有以下六类寄存器数据寄存器（DRDataRegister）指令寄存器（IRInstructionRegister）程序计数器（PCProgramCounter）数据地址寄存器（ARAddressRegister）通用寄存器（RRGeneralRegister）状态字寄存器（PSWProgramStatusWord）数据寄存器（DR）暂时保存要写入寄存器的数据指令寄存器（IR）InstructionRegister保存当前正在执行的指令内容OP字段的输出作为指令译码器的输入程序计数器（PC）ProgramCounter保存下一条指令的地址在程序开始执行前必须将起始地址入口地址送入PC修改PC的内容顺序寻址：PCPC常量；常量与指令长度有关相对寻址：PCPC偏移量跳跃寻址：PC偏移量X：EIPMIPS：PC数据地址寄存器（AR）保存访问数据Cache的地址本例中为保持访问数据Cache单元的地址通用寄存器模型中有个通用寄存器（RR）作为ALU的数据源和目的寄存器用作地址指示器、变址寄存器、堆栈指示器等状态字寄存器（PSW）一个由各种状态标志拼凑而成的寄存器模型机中的PSW由ALU的运算结果设置还保存中断和系统工作状态等X：FLAGSMIPS：无操作控制器和时序发生器数据通路：部件之间传送信息的通路操作控制器在各部件之间建立数据通路操作控制器根据指令OP码和时序信号，生成各种操作控制信号，以便正确地建立数据通路，从而完成取指令和执行指令的控制操作控制器和时序产生器操作控制器分为硬布线控制器，采用时序逻辑技术实现微程序控制器，采用存储逻辑实现时序产生器产生并发出计算机所需要的时序信号对各种控制信号实施时间上的控制指令周期指令周期的基本概念MOV、的指令周期LAD指令的指令周期ADD指令的指令周期STO指令的指令周期JMP指令的指令周期用方框图语言表示指令周期指令格式设计编码操作码位数地址码位数：双地址码、单地址码偏移量、寄存器位数数据寻址方式直接寻址、寄存器寻址、寄存器间接寻址指令寻址方式顺序寻址、跳跃寻址不设定寻址特征位，由操作码默认指定寻址方式指令周期的基本概念运行程序第一步：从内存中取一条指令第二步：执行该指令周而复始指令周期的基本概念上述步骤所需时间从内存取出一条指令的时间：取指周期分析并执行这条指令的时间：执行周期指令周期取指周期执行周期从内存取出一条指令、分析并执行这条指令的时间总和指令功能不同，其指令周期不同指令周期的基本概念一个指令周期划分为若干CPU周期CPU周期又称机器周期通常指从内存读一个字的最短时间取指周期包含若干CPU周期执行周期包含若干CPU周期功能不同的指令，可能包含不同数目的CPU周期指令周期的基本概念一个CPU周期包含若干时钟周期时钟周期：T周期、节拍脉冲处理操作的最基本时间单位ALU完成一次正确的运算寄存器间的一次数据传送等相互关系：个指令周期取指周期执行周期若干个CPU周期个CPU周期若干时钟周期指令周期的基本概念指令周期取指周期执行周期取指周期个CPU周期执行周期个CPU周期CPU周期个T周期单周期CPU和多周期CPU单周期CPU在一个CPU周期内完成从取指、译码到执行的所有工作效率低多周期CPU把指令执行周期分成多个阶段，每个阶段在一个CPU周期完成容易流水线执行，效率高简单定义一个指令集条指令，单字长，字长为B，个寄存器MOV寄存器数据传输RR型LADSTO取数存数RS型ADDAND加法与RR型JMP转移RS型简单定义一个指令集指令寻址方式顺序寻址：PC跳跃寻址：PC偏移量数据寻址方式直接寻址：EA偏移量寄存器寻址：EAR寄存器间接寻址：EAR指令格式设计操作码（OP）定义条指令：MOVLADSTOADDANDJMPMOV寄存器寻址双地址码，功能：RsRdLAD直接寻址，功能：ARsSTO寄存器间接寻址，RsRd指令格式设计类MIPSJMP跳跃寻址APCADD寄存器寻址RsRdRdAND寄存器寻址RsRdRd指令格式设计一个小程序一个小程序六条典型指令组成的简单程序示例程序运行到地址时，各寄存器的值是多少？如何设计指令周期前提：掌握每个指令要执行的操作识别出各个部件的控制命令两个阶段取指阶段、执行阶段两个步骤找出数据通路：数据从哪里来，经过哪些部件，最终达到哪里确定操作信号：形成上述数据通路所需的操作控制信号图的结构控制信号总线三态门：C、C、C存储器：数据Cache读写RDD、指令Cache读RDI寄存器：每个寄存器都有输入和输出控制信号输入控制信号：PCin、Riin，DRin等输出控制信号：PCout、Riout等PC：PCALU：加、与、传送DCache读写ICache读MDRinPCoutPCinARinRioutRiinIRin如何设计指令周期时间设计：各个操作在哪个时钟周期发生取指周期？CPU周期执行周期？CPU周期个CPU周期定义从内存读写一个数据或使用共享总线传输一个数据，总线只能有一个源一个CPU周期内数据不能产生冲突图中IBUS是独占的、DBUS是共享的个CPU周期包括个T周期：TT指令周期从内存取出一条指令、分析并执行这条指令的时间总和指令周期取指周期执行周期若干个CPU周期个CPU周期若干时钟周期如何设计指令周期前提：掌握每个指令完成的功能，要执行的操作识别出各个部件的控制命令分两个阶段取指阶段、执行阶段三个步骤找出数据通路：数据从哪里来，经过哪些部件总线，最终达到哪里确定操作信号：形成上述数据通路所需的操作控制信号分配CPU周期如何设计指令周期分配CPU周期：各个操作信号在哪个CPU周期发出取指周期？CPU周期执行周期？CPU周期个CPU周期定义从内存读写一个数据或使用共享总线传输一个数据，总线只能有一个源一个CPU周期内数据不能产生冲突DCache读写ICache读MDRinPCoutPCinARinRioutRiinIRinIBUS是独占的、DBUS是共享的个CPU周期包括个T周期：TTMOV指令的指令周期MOVRR单字长，RR型取指阶段：数据通路：从指令Cache中取出指令经过IBUS写入IRPCABUSIICacheIBUSIR操作控制：形成上述数据通路的控制信号PC内容输出到指令Cache指令Cache读操作，通过IBUS写入IRPC，为取下一条指令做好准备对IR中的OP译码，以确定进行什么操作PCoutIRinICache读MOV指令的指令周期取指周期：完成三件事从指令Cache取出指令到IRPC，为取下一条指令做好准备对IR中的OP译码，以确定进行什么操作执行周期将数据从R传送到R由于操作简单，只需要一个CPU周期PC中装入第一条指令地址；PC的内容被放到ABUS（I）上，指令Cache进行译码，发出读命令；R从号地址读出的MOV指令通过IBUS装入IR；PC，变成，为取下一条指令做好准备；对IR中的OP译码，识别出是MOV指令，取指阶段即告结束MOV指令的取指阶段MOV指令的取指周期操作PC内容输出到指令Cache读指令Cache取出，指令写入IRPC；对IR中的OP译码时间访问内存取一条指令，需要个CPU周期MOV指令的执行周期将数据从R传送到ROC送出控制信号到通用寄存器，选择R做源寄存器，选择R作目标寄存器；OC送出控制信号到ALU，指定ALU做传送动作；OC送出控制信号，打开ALU输出三态门C，将ALU输出送到DBUS上；OC送出控制信号，将DBUS上的数据打入到DROC送出控制信号，将DR中的数据打入R，R的内容由变为至此，MOV指令执行结束MOV指令的执行阶段MDRinRioutRiinMOV指令的指令周期MOVRR单字长，RR型执行阶段：数据通路：寄存器R的数据传输到RRALUDBUSDRR操作控制：形成上述数据通路的控制信号选择R做源寄存器，指定ALU做传送动作打开ALU输出三态门C，将ALU输出送到DBUS上将DBUS上的数据写入到DR将DR中的数据写入R，R的内容由变为OC送出控制信号到通用寄存器，选择R做源寄存器，指定ALU做传送操作MOC送出控制信号，打开C，将ALU输出送到DBUS上将DBUS上的数据打入到DR；将DR中的数据打入到R，R的内容由变为MOV指令的执行周期DRinRoutRinMOV指令的执行周期操作选择R做源寄存器，指定ALU做传送动作；打开ALU输出三态门C，将ALU输出送到DBUS上；将DBUS上的数据写入DR将DR中的数据写入R时间：使用一次共享总线DBUS，需要个CPU周期MOV指令的指令周期取指执行MOV指令的指令周期（简化）取指执行只考虑一个CPU周期内的操作MOV指令的指令周期（再简化）MOV指令的指令周期MOVRR取指周期个CPU周期执行周期个CPU周期LAD指令LADR单字长，RS型取指阶段同MOV指令相同执行阶段数据通路：访问内存地址的单元，取出数据写入RIRARABUSDDBUSDRR控制信号：打开C，将地址码放到DBUS上；将地址码装入AR，数存进行地址译码；读数存号单元，数读出到DBUS上；将DBUS上的数据写入DR；将DR中的数据写入RARinDCache读DRinRinLAD指令的执行周期控制信号：打开C，将地址码放到DBUS上；将地址码装入AR，DCache进行地址译码；读数存号单元，数读出到DBUS上；将DBUS上的数据写入DR；将DR中的数据写入RLAD指令的执行周期时间设计：序号和，访问一次内存并使用DBUS，需要个CPU周期序号、和，使用一次DBUS，需要个CPU周期LAD指令的执行周期（简化）LAD指令的指令周期LAD指令的指令周期LADR单字长RS型取指令PC译码指令取出操作数取下条指令PC取指周期开始执行周期装入通用寄存器LAD指令的指令周期LADR单字长RS型取指令PC译码指令取出操作数取下条指令PC取指周期开始执行周期装入通用寄存器ADD指令的指令周期ADDRR单字长，RR型执行阶段OC送出控制信号到通用寄存器，选择R和R做源寄存器OC送出控制信号到ALU，指定ALU做加法打开C，将运算结果输出送到DBUS上OC送出控制命令，将DBUS上的数据打入到DROC送出控制命令，将装入R，R的内容由变为ADD指令的执行RoutRoutDRinRinADD指令的执行数据通路RALU、RALU，ALUDBUSDRR操作控制选择R和选择R，R和R加法操作打开三态门C，将运算结果输出送到DBUS；将DBUS上的数据打入DR；将DR中的数据写入R，R的内容由变为ADD指令的执行周期选择R和R输出到ALU，指定让ALU做加法操作；打开C，运算结果输出送到DBUS；DBUS上的数据写入DR；DR中的数据写入R时间：占用一次DBUS总线，个CPU周期ADD指令的指令周期ADD指令的指令周期ADDRR单字长RR型取指周期：个CPU周期执行周期：个CPU周期STO指令的指令周期STORR单字长、RS型执行阶段数据通路：R通过DBUS到AR，数据Cache地址译码，R的内容通过Dbus写入数据Cache（）OC送出操作命令到通用寄存器，选择R；STO指令的执行Rout（）OC送出命令打开C，将地址放到DBUS上；STO指令的执行（）OC发出操作命令，将装入AR，数存开始地址译码STO指令的执行ARin（）OC发出命令到通用寄存器，选择RSTO指令的执行Rout（）OC发出操作命令，打开三态门C，将数据放到DBUS上；STO指令的执行（）OC发出命令，将数据写入号单元，它原先的数据被覆盖STO指令的执行DCache写STO指令的执行选择R，打开三态门C，将地址放到DBUS上；地址装入AR；选择R，打开三态门C，将数据放到DBUS上；将数据写入数存号单元时间：使用两次DBUS，需要两个CPU周期STO指令的指令周期STO指令的指令周期STORR单字长RS型个CPU周期JMP指令的指令周期JMP无条件转移指令，改变程序的执行顺序单字长、单地址执行阶段数据通路：IP中的通过DBUS到达PC操作控制（）打开三态门C，将IR中的地址码发送到DBUS上JMP指令的执行（）将DBUS上的地址码打入到PC中，PC中原先的内容被覆盖JMP指令的执行PCinJMP指令的执行周期打开C，地址码发送到DBUSDBUS上的地址码写入到PC时间：占用一次总线，需要个CPU周期JMP指令的指令周期JMP指令的指令周期JMP个CPU周期指令周期指令周期用方框图语言表示指令周期采用方框图（指令流程图）来表示指令周期一个矩形框代表一个CPU周期矩形框中的内容表示数据通路矩形框右边写出控制信号菱形框表示判断或测试时间上依附于前一个方框的CPU周期，不独占一个CPU周期公操作符号“”一条指令执行完毕后CPU进行的一些共性操作，中断请求、DMA请求等指令周期译码PCoutIRinPCPCIR方框图表示指令周期由上图可见，对于图的模型机所有指令的取指周期是完全相同的，而且是一个CPU周期。在执行周期，由于各条指令的功能不同，所用的CPU周期也是各不相同MOV、ADD、JMP指令是一个CPU周期LAD、STO指令是两个CPU周期，需要访问内存RiRoRoRi例的数据通路图RiRoRoRi画出下面指令的指令周期流程图，假设该指令的地址已放入PC中。列出相应的微操作控制信号序列“ADDR，R”指令完成RRR的功能“SUBR，R”指令完成RRR的操作基本步骤取指周期写出取指周期数据通路PCxxxxIR写出的控制信号形成上述数据通路要记得PC设定操作控制信号的时间使用一次总线或访问一次内存为一个CPU周期根据经验执行周期根据执行周期要完成的操作写出数据通路具体指令具体分析，依据具体功能写出形成上述数据通路的控制信号设定操作控制信号的时间RS型指令需要更多的CPU周期取指周期ADDR，R数据通路：PCBGAARMDRBGAIR取指周期ADDR，R数据通路：PCBGAARMDRBGAIR控制信号：PCo、G、ARiRDRo，G、IRi取指周期ADDR，R时间分配数据通路：控制信号PCBGAAR：PCo、G、ARi（个CPU周期）MDR：R（个CPU周期）DRBGAIR：DRo，G、IRi（个CPU周期）取指周期ADDR，RPCARPCo、G、ARiMDRRDRIRDRo，G、IRi，PCADD指令执行周期ADDR，RADDR，R”指令完成RRR的功能数据通路：RBGAX；RBGAY；ALUBGAR执行周期ADDR，RADDR，R”指令完成RRR的功能数据通路：控制信号RBGAXRo，G、XiRBGAYRo，G、YiALUBGAR，ALUo，G、Ri执行周期ADDR，R时间分配ADDR，R”指令完成RRR的功能数据通路：控制信号RBGAXRo，G、Xi（个CPU周期）RBGAYRo，G、Yi（个CPU周期）ALUBGAR，ALUo，G、Ri（个CPU周期）执行周期ADDR，RRXRo，G、XiRYRo，G、YiALUR，ALUo，G、Ri“ADDR，R”指令是一条RR型加法指令图的右边部分标注了每一个机器周期中用到的微操作控制信号序列。ALUR“SUBR，R”在执行阶段，微操作控制信号序列与ADD指令有所不同。ALU时序产生器和控制方式时序产生器作用和体制时序信号产生器控制方式时序产生器作用和体制计算机的协调动作需要时间标志，而时间标志则是用时序信号来体现用时序信号辨认从内存中取出的是指令还是数据，是取指周期还是执行周期一个CPU周期中时钟脉冲对CPU的动作有严格的约束操作控制器发出的各种信号是时间（时序信号）和空间（部件操作信号）的函数数据：电位控制信号：脉冲、时序产生器作用和体制时序信号的基本体制是电位脉冲制（以触发器为例）电位：用电平的高低进行控制脉冲：用信号的边沿进行控制在微程序控制器中，采用节拍电位节拍脉冲二级体制时序信号产生电路简单一个CPU周期称为一个节拍电位、时序产生器作用和体制TTTT节拍电位节拍脉冲CC在微程序控制器中，采用节拍电位节拍脉冲二级体制时序信号产生电路简单一个CPU周期称为一个节拍电位、时序产生器作用和体制TTTTCPU周期CPU周期节拍电位节拍脉冲硬布线控制器中，时序信号往往采用状态周期节拍电位节拍脉冲三级体制时序信号产生电路复杂状态周期是电位信号，指明当前指令处于哪个状态比如，一个指令的状态周期包括取值周期和执行周期两个状态，取指周期包括个CPU周期，执行周期包括个CPU周期、时序产生器作用和体制TTTTCPU周期CPU周期节拍电位节拍脉冲状态周期状态周期节拍电位节拍脉冲三级体制取指周期执行周期CCC、时序信号产生器时钟源石英晶体振荡器环形脉冲发生器节拍脉冲启停控制逻辑本书模型机启动时，一定要从T前沿开始；停机时一定要在T结束后关闭时序产生器时钟源时钟源用来为环形脉冲发生器提供频率稳定且电平匹配的方波脉冲信号它通常由石英晶体振荡器和与非门组成的正反馈振荡电路组成，其输出为一个理想的方波、环形脉冲发生器CCCC作用：产生一组有序间隔相等或不等的脉冲序列、节拍脉冲、节拍脉冲、时序信号举例MOVRR该指令的取指周期的需要一个节拍电位，即一个CPU周期，操作信号的节拍脉冲划分为：PCABusI：TIBusIR：TIR中OP指令译码器：T、时序信号举例MOVR，R该指令的执行周期需要一个节拍电位操作信号的节拍脉冲划分为：设置ALU完成传送操作：TRALU：TDBusDR：TDRR：T在一个节拍电位中完成四个有时序关系的操作TTTTCPU周期节拍脉冲DBusDR：T信号来自译码器，持续一个节拍电位时间、节拍脉冲和读写时序节拍脉冲节拍电位启停控制逻辑启动、停机具有随机性当计算机启动时，一定要从节拍点位T前沿开始工作停机时一定要在节拍点位T结束后关闭时序产生器控制方式指令周期由若干个CPU周期组成每条指令所需的时间各不相同每个操作控制信号所需的时间及出现的次序各不相同形成控制操作序列的方法，称作控制器的控制方式有同步控制、异步控制、联合控制三种方式同步控制方式CPU周期数固定、时钟周期数固定节拍电位数固定，节拍脉冲数固定与指令功能、操作复杂度、操作数类型无关设计时固定，与指令的执行无关具体方案：采用统一的CPU周期采用不定长CPU周期中央控制与局部控制结合大部分采用统一CPU周期，个别指令采用不定长CPU周期异步控制方式CPU周期数可变、时钟周期数可变可变：在指令执行时变化每条指令的指令周期所需的CPU周期数不等需要多少时间就占用多少时间反馈机制：执行部件完成操作后发“回答”信号联合控制方式同步控制和异步控制相结合的方式两种实现方法大部分指令同步控制，少数操作采用异步方式CPU周期数可变、时钟周期数固定微程序控制器英国剑桥大学的MVWilkes教授于年首先提出年，IBM公司在IBM系列机上成功地采用了微程序设计技术世纪年代以来，由于VLSI技术的发展，推动了微程序设计技术的发展和应用目前，x系列几乎都采用微程序设计技术，ARM采用微程序和硬连线相结合微程序控制器微程序控制（microprogrammingcontrol）基本思想把操作控制信号编制成微指令，存放到只读存储器（控制存储器）里；运行时，从控存中取出这些微指令，从而产生所需的各种操作控制信号微程序设计技术是用软件方法来设计硬件微程序控制原理微命令和微操作部件分为两种：控制部件和执行部件微命令：控制部件通过控制线向执行部件发出的控制命令微操作：执行部件接受微命令后所进行的操作微操作在执行部件中是最小、最基本的操作微命令和微操作微命令和微操作一一对应控制门电位信号的变化、寄存器输入端的控制、ALU的基本执行过程微操作可分为相容和互斥两种：互斥：是指不能同时或不能在同一个CPU周期内并行执行的微操作相容：是指能够同时或在同一个CPU周期并行执行的微操作（，，M）在同一个CPU周期中只能选择一个，因而是互斥的微命令类似地，，，也是互斥的微命令，，是可以同时进行的，所以是相容的微命令X输入控制，，和Y输入的，，中任意两个微命令也是相容的微指令和微程序微指令Microinstruction：在一个CPU周期中，一组实现一定操作功能的微命令的组合在同一CPU周期内并行或并发执行的微命令的组合微指令存储在控制器中的控制存储器中微指令和微程序微程序一系列微指令的有序集合就是微程序一段微程序对应一条机器指令微地址：存放微指令的控制存储器的单元地址机器指令微程序微指令微命令微操作以简单运算器通路图的微指令格式为例：PCLDIRLDARLDDRRD微指令和微程序微指令格式举例微指令字长为位，由操作控制和顺序控制两大部分组成微指令和微程序操作控制字段，发出控制信号每一位表示一个微命令某一位为表示发出相应的微命令，为不发出微指令和微程序顺序控制字段，产生下一条微指令的地址（微地址）后四位：直接微地址PP：判断测试标志PP：使用后四位直接微地址PP：P测试条件满足，新微地址直接微地址条件不满足，新微地址对直接微地址修改PP：P测试微程序控制器原理框图它主要由控制存储器、微指令寄存器和地址转移逻辑三大部分组成AR控制存储器CM：ControlMemoryCM是微程序控制器的核心部件存放微程序只读存储器CM的字长是微指令字的长度字数微指令数量存储容量微指令字的长度X微指令数量控制存储器用于存放微程序控制存储器与主存对比（）微指令寄存器IR微地址寄存器和微命令寄存器组成微地址寄存器AR：下一条微指令的微地址微命令寄存器：微指令的操作控制字段和判别测试字段（）地址转移逻辑修改微地址根据IP中的OP字段译码产生微地址（入口微地址）顺序控制字段中的直接微地址给出下一条微指令的地址通过判别测试字段P和执行部件的反馈信息，形成新的微地址微程序举例假设在某编程环境下，需要完成BCD码加法运算，代码：bba假定该代码的汇编语言是bR，aR对于该指令，共耗费个CPU周期异步控制指令ADDBRR十进制加法指令周期流程图取指令ab运算ab运算减运算P测试，表示译码操作，用OP字段作为形成微指令的地址加法运算P测试，用Cy的状态来修改微地址寄存器的最后一位本条微指令的微地址默认后继微地址微程序举例一条微指令对应一个方框微指令周期等于一个CPU周期一个方框对应与一个CPU周期指令流程图中有多少方框意味着该指令对应的微程序包含多少条微指令第一条是取指微指令，要发出的微命令是LDIR、PC，LDARP译码测试微程序举例微程序举例第二条微指令的二进制编码是第二条微指令发出的微命令是RX，RY，，LDR微程序举例第三条微指令的二进制编码是第三条微指令发出的微命令是RX，RY，，LDRP判断测试微程序举例第四条微指令的二进制编码是第四条微指令发出的微命令是RX，RY，，LDR微程序存放示意图顺序控制地址操作控制字段控制存储器CM取指微指令RRR微指令RRR微指令RRR微指令指令ADDBRR执行微程序一条机器指令的微程序由取指微程序和执行微程序组成微程序存放图的主存控存CM微程序控制器的工作过程取指微程序执行取指周期的操作PCIR，PC译码：OP字段输出到地址转移逻辑，产生对应的执行微程序的入口地址，送入AR微程序控制器的工作过程根据AR从CM中取出微指令，并产生下一条微指令的地址送入AR微程序控制器的工作过程执行微程序的最后一条微指令执行完毕后，将AR设为取指微程序的入口地址，从而返回第步周而复始，直到所有机器指令执行完毕CPU周期和微指令周期的关系一个微指令周期与CPU周期时间相等TTT时间执行微指令如运算等T上升沿打入结果至寄存器T时间读取微指令机器指令与微指令的关系一条机器指令对应一段微程序一段微程序由若干条微指令组成一个微指令包含多个微命令机器指令、程序和地址与内存有关微指令、微程序和微地址与控制存储器有关写控制读控制选择WAWAW选择RARAR不写入不读出RRRRRRRR例设某计算机运算器框图如图所示，其中ALU为位的补码加法器，SASB为位暂存器，个通用寄存器的读、写控制功能见下表机器采用微程序控制方式，微指令操作控制字段格式如下未考虑顺序控制字段：要求：写出如下指令执行周期微程序的编码：“ADDR，R”指令，即RRR“SUBR，R”指令，即RRR“MOVR，R”指令，即RR写出微程序：画出ADDR，R指令的流程图RARARLDSALDSBRARARSBALUWAWAW写出微程序：画出SUB指令的流程图RARARLDSALDSBRARARWAWAW写出微程序：画出MOV指令的流程图RARARLDSASBALUWAWAWReset微程序设计技术设计微指令应当追求的目标缩短微指令的长度减小控制存储器的容量提高微程序的执行速度便于对微指令的修改提高微程序设计的灵活性操作控制字段和顺序控制字段的设计如何用二进制表示各种操作控制信号如何形成下一个微地址目标可能是矛盾的！、微命令编码操作控制字段采用的表示方法直接表示法编码表示法混合表示法（）直接表示法每一位表示一个微命令“”表示不发出该微命令“”表示发出该微命令优点：结构简单，并行性强，操作速度快缺点：每条微指令要包含所有的微命令，微指令太长，导致CM容量较大（）编码表示法把相斥的微命令编成一个小组，然后通过译码器对小组信号进行译码，输出作为微命令微指令字缩短，译码电路使微指令的执行速度减慢比如：个微命令如何编码？要考虑不发出任何微命令的状态（）混合表示法直接表示法与编码法结合综合考虑指令字长、灵活性、执行微程序速度等方面的要求、微地址的形成方法确定下一条微指令的微地址下一条微指令的微地址成为后继微地址计数器方式多路转移方式（断定方式）（）计数器方式顺序执行时后继微地址当前微地址增量；类似指令的顺序寻址非顺序执行（分支）时后继微地址微地址字段类似跳跃寻址特点顺序控制字段较短，微地址产生机构简单多路并行转移功能较弱，速度较慢，灵活性较差）多路转移方式（断定方式）一条微指令具有多个转移分支的能力称为多路转移顺序执行时后继微地址微地址字段非顺序执行（分支）时按“判别测试”标志和“状态条件”信息产生一个微地址）多路转移方式特点：能以较短的顺序控制字段配合，实现多路并行转移，灵活性好，速度较快，需要设计地址转移逻辑某计算机采用微程序控制器，共有条机器指令，公共的取指令微程序包含条微指令，各指令对应的执行微程序平均由条微指令组成，采用多路转移法确定下条微指令地址，则微指令中下址字段微地址字段的位数至少是ABCD微指令分类微指令格式分成两类：水平型微指令和垂直型微指令（）水平型微指令一次能定义并执行多个并行操作微命令的微指令，叫做水平型微指令微指令中设置微操作码字段，由微操作码规定微指令的功能，称为垂直型微指令其结构类似于机器指令的结构每条微指令的功能简单采用较长的微程序结构去换取较短的微指令结构（）垂直型微指令垂直型微指令寄存器寄存器传送型运算控制型访问主存条件转移水平型微指令与垂直型微指令水平型微指令并行操作能力强，效率高，执行时间短、灵活性强微指令字较长，微程序短，控存容量大，性能佳垂直型微指令字长短，微程序长，控存容量小，性能差垂直型与指令相似，易于掌握微指令设计与微指令格式微程序设计静态微程序设计微程序设计好之后，存放在ROM中，无法修改动态微程序设计采用EPROMFlash作为控制存储器，微程序可以根据改变指令仿真在一台机器上实现不同类型的指令系统硬连线控制器硬连线控制器Hardwiredcontroller也称为硬布线控制器把控制器看作产生控制信号的逻辑电路由门电路和触发器构成返回基本思想输出信号微操作控制信号微命令CPU结构LDIRTLDDRTPCLDPCTRDIRDDWEDTLDRTLDARTCPU结构LDIRTLDDRTPCLDPCTRDIRDDWEDTLDRTLDART每个操作控制信号的含义是：RDI读指存RDD读数存WED写数存LDPC写入PCLDIR写入IRLDAR写入ARLDDR写入DRPCLDR写入R寄存器指令周期流程图如何区分不同的CPU周期？指令周期流程图如何区分不同的CPU周期？硬连线控制器时序设定M、M、M三个电位信号，各自等于一个CPU周期每个CPU周期包括个节拍脉冲（TT）三级时序同步控制MM固定个机器周期，个节拍M节拍电位硬连线控制器的指令周期流程图采用同步控制方式，将所有指令的指令周期都设为个CPU周期图中M、M、M为节拍电位信号，各自等于一个CPU周期MOV、ADD和JMP指令在M不执行任何操作微操作控制信号产生在微程序控制器中微命令由微指令产生。在硬连线控制器中微命令由布尔代数表达式描述的输出函数产生。硬连线控制器设计方法画出指令周期流程图，明确各节拍控制信号找出产生同一个微操作信号的所有条件，建立操作时间表与时序信号组合，写出逻辑表达式化简、用门电路或可编程器件物理实现。例根据图，写出以下操作控制信号RDI、RDD、WED、LDPC、LDIR、LDAR、LDDR、PC、LDR的逻辑表达式。其中每个操作控制信号的含义是：RDI指存读命令RDD数存读命令WED数存写命令LDPC打入程序计数器LDIR打入指令寄存器LDAR打入数存地址寄存器LDDR打入数据缓冲寄存器PC程序计数器加LDR打入R寄存器LDIRTLDDRTPCLDPCTRDIRDDWEDTLDRTLDART每个操作控制信号的含义是：RDI读指存RDD读数存WED写数存LDPC写入PCLDIR写入IRLDAR写入ARLDDR写入DRPCLDR写入R寄存器例根据图，写出以下操作控制信号RDI、RDD、WED、LDPC、LDIR、LDAR、LDDR、PC、LDR的逻辑表达式。解：（）画出指令周期流程图（）列出微操作时间表（根据数据通路和操作流程图）（）列出微操作时间表（根据数据通路和操作流程图）列出在每个微命令在哪个电位、哪个节拍、哪个指令发产生？（）列出微操作时间表（根据数据通路和操作流程图）设M、M、M是节拍电位信号；T、T、T、T为一个CPU周期中的节拍脉冲信号；MOV、LAD、ADD、STO、JMP是机器指令OP操作码字段译码输出信号（）进行微操作信号的组合得到如下逻辑表达式：LDIRMTLDARMTLADSTOLDDRMTMOVADDMTLADPCMLDRMTADD（）最后给出电路（省略）硬连线与微程序控制器比较硬连线控制器执行速度快硬连线控制器设计复杂，代价昂贵微程序控制器设计简单，便于维护修改PentiumCPU年初um工艺，万晶体管V电压，功耗W非固定长度指令格式，种寻址方式，条指令，兼具有RISC和CISC特性提供了更加灵活的存储器寻址结构，可以支持传统的k大小的页面，也可以支持M大小的页面（TLB）动态转移预测技术（BTB转移目标缓存）Pentium结构图哈佛结构Cache路超标量位CPU位FPU外部数据总线宽度为位，外部地址总线宽度为位微程序控制器RISCCPU三个要素：一个有限的简单的指令集；配备大量的通用寄存器；对指令流水线的优化编译技术RISCCPURISC机器的特征：使用等长指令（B）寻址方式少且简单只有取数指令、存数指令访问存储器指令数目相对较少，指令格式简单指令功能简单，控制器多采用硬连线方式指令的执行平均时间CPI为一个时钟周期。配置大量寄存器、优化使用。支持指令流水并强调指令流水的优化使用。RISC技术的复杂性在它的编译程序RISC与CISC的主要特征对比MIPSAptiv框图硬布线控制器指令缓存数据缓存总线接口内存管理单元算术与逻辑运算器协处理器指令译码器通用寄存器浮点运算器ARM处理器框图平均微程序为条微指令本章重点内容CPU的功能（控制器的功能、类寄存器）指令周期基本概念设计指令周期，画指令周期流程图时序产生器和控制方式基本原理微程序控制器工作原理微程序设计基本概念硬连线控制器基本概念本章容易混淆的一些概念周期表示一段时间。指令周期指机器指令从取指到执行完成所花的时间，包括取指周期和执行周期。CPU周期机器周期，一个CPU周期包括多个节拍脉冲。节拍脉冲T周期，处理操作的最基本单位指令周期CPU机器周期节拍脉冲数据通路举例某机字长位，指令位定长；指令ADDR，R的功能为RRR，即将R中数据与R内容所指向的主存单元的数据相加，并将结果送入R内容所指向的主存单元中；数据通路图中控制信号为表示有效，假设MAR输出一直处于使能状态；数据通路举例取指令周期CCCMARMDRPCIR下表为取指令和译码阶段每个节拍时钟周期的功能和控制信号，请按相同方式给出执行阶段各节拍的功能和有效控制信号。数据通路举例执行指令周期CCCMARMDRARA数据通路举例执行指令周期CCMARMDRAACRRR流水CPU并行处理技术流水CPU的结构流水线中的主要问题PentiumCPU并行处理技术并行性的两种含义：同时性指两个以上事件在同一时刻发生；并发性指两个以上事件在同一时间间隔内发生。计算机的并行处理技术主要有以下三种形式：时间并行空间并行时间并行空间并行时间并行让多个处理过程在时间上相互错开，轮流重叠地使用同一套硬件设备的各个部分，以加快硬件周转而赢得速度。实现方式是采用流水处理部件。目前的高性能微型机几乎无一例外地使用了流水技术。并行处理技术并行处理技术空间并行指资源重复（空间因素），以“数量取胜”VLSI为其提供了技术保证。时间并行空间并行指时间重叠和资源重复的综合应用流水线原理时间并行把任务分成若干子任务，使子任务在流水线的各阶段并发地执行空间并行资源重复多处理器系统和多计算机系统时间并行空间并行时间重叠和资源重复的综合应用。奔腾CPU采用超标量流水技术，一个机器周期执行两条指令。指令周期细分取指令IFInstructionFetch指令译码IDInstructionDecode执行运算EXExecution访存阶段MEM结果写回WBWriteBack一条指令不一定经历所有阶段IFIDEXMEMWB非流水线时空图流水线时空图完成N条指令需要的时间n超标量流水线时空图时间TIFIDEXWB空间SIIIIIIIIIIIIIIIIII具有两条以上的指令流水线。满载时，每一时钟周期可以执行条指令II流水线分类指令流水线取指译码取数执行算术流水线加法器乘法器快速傅里叶变换器处理机流水线由一串级连的处理机组成每台处理机负责某一特定任务一个计算机系统可以在不同的并行等级上采用流水线常见流水线有：处理机流水线：程序步骤的并行由一串级联的处理机构成流水线的各个过程段，每台处理机负责某一特定的任务。处理机流水线应用在多机系统中。指令流水线：指令步骤的并行将指令流处理过程分为取指令、译码、执行、写回等几个并行处理过程段。算术流水线：运算操作步骤的并行如流水加法器、流水乘法器、流水除法器等。流水线分类流水线的相关冲突（hazzard）资源相关取操作数与取指令都需要访问主存计算PC、分支地址，运算指令复用ALU增加部件消除数据相关指令操作数依赖于前一条指令的执行结果引起流水线停顿直到数据写回分支相关转移指令使得流水线发生中断提前取出的指令作废，流水线清空理想指令流水线将指令过程分成个阶段IF、ID、EX、MEM、WB不同阶段之间设置缓冲接口部件（绿色部分）接口部件本质是寄存器各段通过接口传递与指令相关的数据，控制，反馈信息对数据的加工处理依赖于前段接口传递过来的信息MIPS经典段流水线流水线段间寄存器流水线中的主要问题流水线要有良好的性能，必须能够畅通流动，不发生断流流水过程中通常会出现以下三种相关冲突（Hazard），使流水线断流。资源相关数据相关控制相关数据相关处理增加相关检测判定逻辑当前指令读寄存器与后续条指令写寄存器相同当前指令可能有个读寄存器后续条指令可能有个写寄存器相关处理逻辑流水线停顿数据重定向数据相关处理机制软件方法（编译器完成）插入空指令调整程序顺序，使相关性在流水线中消失硬件方法寄存器堆写入和读出分离（先写后读，下跳沿写）插入气泡（空操作）数据重定向bypass（数据旁路）将后端处理后的数据（还没来得及写回）重定向数据在哪就从哪送到运算器资源相关多条指令进入流水线后在同一段时间内争用同一个功能部件所发生的冲突。在时钟时，I与I两条指令发生争用存储器资源的相关冲突解决资源冲突的办法：冲突指令停顿若干周期，直到冲突消失；增设一个存储器，将指令和数据分别放在两个存储器中。数据相关在流水计算机中，由于多条指令的重叠处理，当后继指令所需的操作数，刚好是前一指令的运算结果时，便发生数据相关冲突。如下表所示，ADD指令与SUB指令发生了数据相关冲突。数据相关例：两条指令发生数据相关冲突ADDRRRRRRSUBRRRRRRANDRRRRRR数据相关RAWReadAfterWrite后面指令用到前面指令所写的数据WAWWriteAfterWrite两条指令写同一个单元WARWriteAfterRead后面指令覆盖前面指令所读的单元解决办法：可以推后后继指令对相关单元的读操作设置转发通路（Forwarding）例流水线中有三类数据相关冲突：写后读相关；读后写相关；写后写相关。判断以下三组指令各存在哪种类型的数据相关。IADDR，R，R；RRRISUBR，R，R；RRRISTOMx，R；RMx，Mx是存储器单元IADDR，R，R；RRRIMULR，R，R；RRRIADDR，R，R；RRR写后读RAW相关读后写WAR相关写后写WAW相关控制相关由转移指令引起的。当前指令有跳转，但流水已经开启后续指令处理过程解决技术：延迟转移法由编译程序重排指令序列，让跳转的指令接在最后流水入口转移预测法用硬件预测将来的行为，提前让转移指令进流水。指令调度为了充分发挥指令流水线的效率，减小断流，降低指令间的相关性，在保证程序正确执行的前提下，需要对指令的执行顺序进行重新编排静态调度由编译器在编译过程中对指令进行调度动态调度由控制器在指令执行过程中进行调度，对程序员透明乱序执行（OutOfOrder）记分牌算法，Tomasulo算法PentiumCPU年初um工艺，万晶体管V电压，功耗W非固定长度指令格式，种寻址方式，条指令，兼具有RISC和CISC特性提供了更加灵活的存储器寻址结构，可以支持传统的k大小的页面，也可以支持M大小的页面（TLB）动态转移预测技术（BTB转移目标缓存）Pentium结构图哈佛结构Cache路超标量位CPU位FPU外部数据总线宽度为位，外部地址总线宽度为位微程序控制器IntelHaswell结构图RISCCPU三个要素：一个有限的简单的指令集；配备大量的通用寄存器；对指令流水线的优化编译技术RISCCPURISC机器的特征：使用等长指令（B）寻址方式少且简单只有取数指令、存数指令访问存储器指令数目相对较少，指令格式简单指令功能简单，控制器多采用硬连线方式指令的执行平均时间CPI为一个时钟周期。配置大量寄存器、优化使用。支持指令流水并强调指令流水的优化使用。RISC技术的复杂性在它的编译程序RISC与CISC的主要特征对比多周期流水线MIPSAptiv框图硬布线控制器指令缓存数据缓存总线接口内存管理单元算术与逻辑运算器协处理器指令译码器通用寄存器浮点运算器ARM处理器框图平均微程序为条微指令本章重点内容CPU的功能（控制器的功能、类寄存器）指令周期基本概念五种基本指令的指令周期及其数据通路流程时序产生器和控制方式基本原理微程序控制器工作原理微程序设计基本概念硬连线控制器基本概念本章容易混淆的一些概念微命令控制部件通过控制线向执行部件发出的各种控制命令微操作执行部件接受微命令以后所进行的操作公操作一条指令执行完毕以后，CPU所进行的操作本章容易混淆的一些概念微指令在机器的一个CPU周期中，一组实现一定操作功能的微命令的组合，构成一条微指令微程序一条指令均对应一段微程序，微程序固化在控制存储器中。机器指令本章容易混淆的一些概念周期表示一段时间。指令周期指机器指令从取指到执行完成所花的时间，包括取指周期和执行周期。CPU周期机器周期，一个CPU周期包括多个节拍脉冲。节拍脉冲T周期，处理操作的最基本单位指令周期CPU机器周期节拍脉冲第六章总线系统总线的概念和结构形态总线接口总线仲裁总线的定时和数据传送模式PCI总线和PCIe总线总线的基本概念总线BUS是构成计算机系统的互连机构是多个系统功能部件之间进行数据传送的公共通路借助于总线各系统功能部件之间实现地址、数据和控制信息的交换在争用资源的基础上进行工作总线的基本概念一个单处理器系统中的总线大致分为：内部总线：CPU内连接各寄存器及运算器部件之间的总线系统总线：CPU和其他高速功能部件（如存储器、通道等）相互连接的总线IO总线：中低速IO设备相互连接的总线物理特性：总线的物理连接方式，包括根数、插头形状，引脚线的排列方式功能特性：描述总线中每一根线的功能：地址、数据、控制三类电气特性：定义每一根线上信号的传递方向（单双向）及有效电平范围时间特性：规定了总线上各信号有效的时序关系，每根总线在什么时间有效总线的特性总线的标准化对总线的四个特性定义一个广泛认可的标准实现不同厂家的功能部件互换使用USB、PCIE总线带宽常见总线带宽总线的连接方式外围设备和总线的连接部件称为适配器adapter：完成CPU和外设之间的数据传送和控制实现传输速率匹配和同步；通常称为接口interface总线的连接方式总线影响计算机系统性能，单处理器计算机中采用的总线结构有两种基本类型：单总线结构和多总线结构单总线结构CPU是主控设备（发起通信的设备）结构简单、容易扩充多部件共享总线，分时工作传输效率低处理器结构对总线有影响多总线结构主要解决各种设备速率不匹配的问题位于CPU内部，速度最快连接主存高速IO设备低速IO设备连接不同速率的总线总线的效率和吞吐量得以提高高速、中速、低速设备连接到不同的总线上同时进行工作现代计算机中的多总线结构总线接口信息的传送方式计算机系统中，传输信息有两种方式：串行传送并行传送串行传送按顺序传送一个数码（一个字节）的所有二进制位bit，每次一位一般先传低位，后传高位使用一条物理传输线：单端传输两条传输线：差分传输数据传送前：并串变换数据接收后：串并变换串行传送特点：成本较低、速度慢位时间：每个比特在传输线上占用的时间长度波特率baud：每秒钟传送的比特数波特率是位时间的倒数串行传送的数据格式编码起始位b数据位B校验位b停止位b例利用串行方式传送字符，设数据传送速率是个字符秒，每一个字符格式规定包含个比特位（起始位、停止位、个数据位）问波特率是多少位时间是多少解：波特率为：位秒波特位时间是波特率的倒数：Tdsms并行传送同时传输多个比特，对每个数据位都需要单独一条传输线数据传送比串行数据传送快得多（传输频率较低时）发展趋势并行传输距离受限频率越高，线间串扰越严重，带宽无法继续提高串行传输距离长无串扰现象、提供更高的带宽随着总线频率的增加，并行逐渐转向串行SCSISASPATASATAPCIPCIE分时传送功能复用：某个传输线上既传送地址信息，又传送数据信息分时复用：共享总线的部件分时使用总线必须划分时间片总线接口的基本概念IO接口即IO设备适配器指CPU和主存、外围设备之间通过总线进行连接的标准化逻辑部件IO接口部件在连接的两个部件之间起着“转换器”的作用，实现彼此之间的信息传送一个接口可连接一个设备，也可连接多个设备总线接口的基本概念外部设备有自己的设备控制器设备控制器通过IO接口和总线连接，进而与CPU交换信息外围设备的连接方法总线接口的基本概念一个适配器的两个接口：连接系统总线的接口连接外设的接口接口的典型功能：控制、缓冲、状态、转换、整理、程序中断总线仲裁总线上的设备有主方和从方两种形态主方启动一个总线周期、从方响应主方请求每次总线操作，只能有一个主方，可以有多个从方为了解决多个主方争用总线的问题，设置总线仲裁部件（arbitrator）采用优先级策略或公平策略按照总线仲裁电路的位置不同，分为集中式和分布式集中式仲裁一个中央仲裁器，连接线：送往仲裁器的总线请求信号线BRBusRequest仲裁器送出的总线授权信号线BGBusGrant表征总线是否空闲的信号BS（BusBusy）集中式仲裁采用三种方式链式查询方式（菊花链查询Daisychain）计数器定时查询方式独立请求方式链式查询方式接口发出总线请求信号BR（置BR为高）仲裁器在总线空闲的时候（BS为低）开始仲裁总线授权信号BG依次从一个IO接口传送到下一个IO接口（串行查询）假如BG到达的接口无总线请求，则继续往下传递；假如BG到达的接口有总线请求，该接口获得总线控制权（将BS置为），BG信号便不再往下传递BS总线忙BR总线请求BG总线授权查询过程链式查询方式特点：优先级固定：离仲裁器最近的设备具有最高优先级，离仲裁器越远，优先级越低用线少，易扩充对查询链的电路故障很敏感，单点故障计数器定时查询方式每个设备分配一个地址，设备内部有地址判别电路仲裁器内部有个计数器，其输出和设备地址线连接对设备地址计数计数器定时查询方式设备通过BR线发出总线请求仲裁器在BS为低时让计数器开始计数，计数值通过设备地址线广播设备内部的地址判别电路，判断地址线上的计数值与自身设备地址是否一致如果一致且该设备的BR为高，获得了总线使用权，则置BS线为如果没有设备获得总线使用权，计数值加一，再次广播仲裁器判断BS为高，中止计数查询计数器定时查询方式每次计数可以从“”开始，也可以从中止点开发始固定优先级：每次从“”开始计数，优先级的顺序是固定的公平优先级：从中止点开始计数，每个设备都有可能成为最高优先级可变优先级：软件修改计数器初值缺点：控制线较多、扩展性较差（与计数器的位数有关）计数器独立请求方式每个设备均有独立的总线请求线BRi和总线授权线BGi中央仲裁器中的排队电路决定首先响应哪个设备的请求，给设备以授权信号Bgi特点：响应速度快控制灵活，优先级可通过程序改变；控制线数多、总线裁决机构较复杂分布式仲裁每个功能设备都有自己的仲裁号以及仲裁器仲裁过程通过协商完成总线的定时总线信息传送过程，可分为：请求总线，总线仲裁，寻址，信息传送，状态返回定时：事件出现在总线上的时序关系同步定时：事件出现在总线上的时刻由总线时钟信号确定总线信号中包含公共时钟线异步定时：建立在应答式或互锁机制基础上后一事件出现在总线上的时刻取决于前一事件的完成不需要统一的公共时钟信号PCI总线和PCIe总线PCI（PeripheralComponentInterconnect）是美国SIG推出的位总线（并行总线）频率为MHz，数据传输率为MBs基于PCI总线计算机结构处理器处理器主存控制器主存PCI设备PCI设备HOST桥主设备目标设备PCILAGACY总线桥PCIPCI桥LAGACY设备LAGACY设备PCI设备PCI设备HOST总线PCI总线PCI总线LAGACY总线（遗留）现代计算机中的多总线结构PCI总线特点允许智能设备在适当的时候取得总线控制权以加速数据传输和对高度专门化任务的支持支持猝发传输模式与ISAEISAMCA兼容设有特别的缓存，实现外设与CPU隔离，外设或CPU的单独升级都不会带来问题同步时序、集中式仲裁PCIExpress总线PCIExpress是一种基于串行技术、高带宽连接点、点到点连接的新型总线技术PCIExpress采用根信号线差分传输，全双工、可靠性高、速度快多种连接方式，扩展性好如、、、以及通道的连接器支持热插拔和热交换软件层与PCI兼容PCIExpress总线PCIExpress总线插槽PCIExpress总线共享式hub独占式switchUSB（UniversalSerialBus）由Compaq、Intel、Microsoft、NEC等公司于年共同研制发布传输速度高、使用简单、编程复杂适合计算机中所有高、中、低速传输外部总线USB线传输、半双工USB（UniversalSerialBus）USB全双工TypeC物理接口不区分正反面USB标准演进USB标准演进第七章外围设备外围设备概述磁盘存储设备磁带存储设备光盘和磁光盘存储设备显示设备输入设备和打印设备外围设备的一般功能外围设备又称外部设备：功能在计算机和其他设备之间，以及计算机与用户之间提供联系每一种外围设备，都是在它自己的设备控制器控制下进行工作，而设备控制器则通过IO接口和主机相连，并受主机控制磁盘存储设备磁表面存储：将磁性材料涂在载磁体（铝或塑料）存储信息磁盘存储器、磁带存储器优点：存储容量大，位价格低；可以重复使用；信息可以长期保存；缺点：存取速度较慢，机械结构复杂磁性材料物理特性B磁感应强度H外加磁场强度I电流磁表面存储器的读写原理利用磁头来形成和判别磁性材料的不同磁化状态磁性材料排列方式磁性材料均匀排列在圆形载磁体上水平排列密度低、容量小垂直排列密度高、容量大磁盘的组成和分类目前硬磁盘主要是温彻斯特磁盘，简称温盘，是一种可移动磁头固定盘片的磁盘机密封组合、悬浮磁头防尘性能好，可靠性高，对使用环境要求不高优点：没有摩擦、寿命长硬盘磁头与盘片的接触方式：悬浮式优点：没有摩擦、寿命长温盘原理MB软盘软盘：固定磁头，可移动盘片硬磁盘驱动器主要个部件组成定位驱动系统：控制磁头臂径向运动主轴系统：控制磁盘旋转数据转换系统：磁电互换硬盘驱动器和控制器磁盘上信息的分布盘片的上下两面都能记录信息，称为记录面（surface）一个记录面对应一个磁头（Head），用磁头表示记录面记录面上一系列同心圆称为磁道（Track）由外向内依次编号，最外侧为磁道每个磁道等弧度分为若干个扇区（Sector）信息按扇区存放，每个扇区的存储信息量是相同的，为B磁盘上信息的分布扇区之间有间隙gap，用于隔离扇区spindlesurfacetrackstrackksectorsgaps磁头和盘片的运动盘片旋转磁头悬浮，沿半径方向运动磁盘上信息的分布所有记录面上相同编号的磁道形成一个圆柱面Cylinder，简称柱面柱面数等于磁道数柱面是逻辑、虚拟概念所有磁盘统一转动，所有磁头一起移动磁盘访问过程：OS计算出要访问的位置C、H、S控制磁头移动到对应的柱面磁盘旋转到起始扇区磁盘继续旋转，磁头开始读写信息硬盘上的一个扇区要用三个参数来定位（CHS模式）：柱面号、磁头号、扇区号标准记录格式硬盘容量柱面数磁头数扇区数字节磁盘上信息的分布磁盘上信息的分布如果某文件长度超过一个磁道的容量，应将它记录在同一个记录面上，还是记录在同一个柱面上磁头的移动都需要时间，而且在磁盘访问总时间中占比较大如果某文件长度超过一个磁道的容量，应将它记录在同一个柱面上，因为不需要移动磁头，读写速度快磁盘上信息的分布柱面号位，磁头号位，扇区为位，得到CHS模式容量限制G现代磁盘采用LBA（逻辑区块地址LogicalBlockAddress）磁盘存储器的技术指标存储密度：道密度：沿磁盘半径方向单位长度上的磁道数位密度：磁道单位长度上能记录的二进制位数面密度：位密度和道密度的乘积一个磁盘存储器所能存储的字节总数，称为磁盘存储器的存储容量格式化容量和非格式化容量磁盘存储器的技术指标磁盘存储器的技术指标磁盘存取时间例磁盘有片磁盘，每片有两个记录面，最上最下两个面不用存储区域内径cm，外径cm，道密度为道cm，内层位密度位cm，转速转分问：共有多少柱面总存储容量是多少数据传输率多少解：共有多少柱面有效存储区域cm因为道密度道cm，共有道，即个圆柱面总存储容量是多少内层磁道周长为Rcm每道信息量位cmcm位B每面信息量BB总容量BB数据传输率多少磁盘数据传输率DrrNN为每条磁道容量，NBr为磁盘转速，r转秒转秒DrrNBBs硬盘发展趋势充氦气：缩短碟片距离，增加碟片数量K扇区：与OS文件管理匹配，减少扇区浪费叠瓦SMR、二维TDMR、微波辅助磁记录MAMR、热辅助磁记录HAMR增大单碟容量容量将到达TB固态硬盘固态硬盘SSD（solidstateDisk）由控制单元和ROM存储单元（FLASH芯片）组成速度快、抗震、零噪音、重量轻等优点磁带存储设备磁带的记录原理与磁盘基本相同，只是它的载磁体是一种带状塑料，叫做磁带磁带采用顺序访问方式，速度比磁盘速度慢通常用作为数据备份的海量存储设备光盘和磁光盘存储设备光盘上的信息以坑点形式分布凹坑表示“”，凸点表示为“”读出时，当激光束照射在凹坑上时反射率低；而照射在凸点上时反射率高根据反射光的光强变化并进行光电转换，即可读出记录信息只读型CD光盘CDDA数字唱盘，记录数字化信息，分钟数字立体声信息CDROM容量MB可写CD写一次型CDR利用激光改变有机染料记录面对光的反射率可多次的重复写入磁光盘CDMOMagnetoOptical利用激光产生高温来改变磁场CDRWRewritable利用激光改变相变材料的晶态和非晶态两种状态DVDDVD使用较短波长的激光束，使盘片数据的密度达GB，是CD产品容量的倍，如果采取双面双层的记录方式，容量更可高达GBDVDROMDVDVideoDVDAudioDVDRDVDRAM不同盘片比较TrackPitchmMinimumPitLength：mStorageDensityGbinchTrackPitchmMinimumPitLength：mStorageDensityGbinchTrackPitchmMinimumPitLength：mStorageDensityGbinchCDGBDVDGBBlurayDiscGB光驱的速度倍速CD在小时内读完一张CD盘的速度定义为倍速，KBSDVD的倍速则在KBs左右X倍速：指是最初光驱读取速率的多少倍的读取速率的光驱第八章输入输出系统CPU和外设之间的信息交换方式程序查询方式程序中断方式DMA方式通道方式通用IO标准接口返回CPU与外设之间的信息交换方式IO设备同CPU交换数据的过程：输入过程：CPU把一个地址放在地址总线，选择某一输入设备；CPU等候输入设备的数据有效；CPU从数据总线读入数据，并放在一个相应的寄存器中输出过程：CPU把一个地址放在地址总线，选择输出设备；CPU把数据放在数据总线上；输出设备认为数据有效，从而把数据取走问题的关键在于：如何找到对应的外部设备编址方式什么时候数据才有效定时方式外围设备编址方式编址对象IO设备中的控制寄存器、数据寄存器、状态寄存器外围设备编址方式独立编址（IsolatedIO）内存单元和IO寄存器各自独立编址：两个地址空间IO寄存器地址称为端口号访问IO寄存器有专门的IO指令X：outHAX外围设备编址方式统一编址也称为内存映射IO：MemoryMappedIO，MMIOIO寄存器和内存单元一起编址：一个地址空间同一地址空间中的不同部分来区分IO寄存器和内存单元访存指令访问IO设备和内存，LoadStoreARM、RISCV、MIPSMIPS处理器内存映射IO例假设有一个运行时间为秒的基准程序，其中秒是CPU时间，剩下的是IO占用的时间如果在以后的年里，CPU的速度每年提高但IO时间保持不变，那么年后运行程序要耗费多少时间？IO时间所占的比例是多少解：耗费的时间CPU时间IO时间目前，IO时间秒今后五年内CPU时间、IO时间及其所占比例如下表：外设定时如何判断数据有效是外设定时的关键根据外围设备的速度分为种定时：速度极慢或简单的外围设备机械开关，显示二极管直接输入输出慢速或中速的外围设备异步定时高速的外围设备同步定时CPU与IO接口之间的数据传送CPU管理外围设备的方式：无条件传送方式（简单IO方式）程序查询方式程序中断方式直接内存访问DMA通道方式单片机多采用程序查询、程序中断PC采用程序中断和DMA通道方式用在大型计算机中程序查询方式又叫程序控制IO方式当需要输入输出时，CPU暂停执行主程序，转去执行设备输入输出的服务程序，进行数据传输异步定时：查询设备状态，判断是否有效、程序查询方式的接口设备选择电路用于判断地址总线上呼叫的设备是否为本设备数据缓存寄存器缓存从外设读出的数据或者CPU输出到外设的数据设备状态标志用于标志设备的工作状态，、程序查询输入输出方式信息交换完全由CPU执行程序实现启动设备反复查询设备直至设备准备好传输单个数据重复步直至数据传输完毕CPU和外设串行工作，反复查询设备状态占用较多CPU时间，系统效率低CPU占用率取决于查询频率用于单片机、程序查询输入输出方式有多个设备时，CPU周期性地轮询调用各IO设备的子程序程序查询方式处理器速度为MIPS，IO设备为键盘，其操作速度为字符s，采用程序查询方式进行控制，那么对于每个输入操作，CPU等待的时间可以执行万条指令程序查询方式特点：数据传输完全依赖于程序控制硬件结构简单频繁的查询动作浪费了大量的CPU时间实时性差，随机事件响应慢目前只用在单片机中程序中断方式中断的基本概念中断服务程序入口地址的获取程序中断方式的基本IO接口单级中断多级中断Pentium中断机制中断的基本概念中断（Interrupt）是指CPU暂时中止现行程序，转去处理随机发生的事件，处理完后自动返回原程序的功能和技术也称为异常exception中断系统是计算机实现中断功能的软硬件总称一般在CPU中设置中断机构在外设接口中设置中断控制寄存器在软件上设置相应的中断服务程序中断的基本概念中断源产生中断的事件与IO设备信息交换：网络通信故障处理：硬件故障：掉电、校验错软件故障：溢出、除数实时事件处理：键盘、鼠标程序调度，时间片划分软中断中断的基本概念中断处理过程：某一外设的数据准备就绪后，“主动”向CPU发出中断请求信号；当CPU响应此中断，暂停运行主程序，自动转去该设备的中断服务程序；当中断服务程序执行完毕后，CPU又回到原来的主程序继续执行中断适合于处理随机出现的事件中断的基本概念响应中断的时机什么时候对外设的中断请求进行响应？断点保护问题如何在处理完中断后正确返回主程序？多重中断处理中断处理过程中又有外设发出中断请求怎么办？中断功能实现的软硬件分工哪些功能用软件实现，哪些功能需要硬件支持？中断的基本概念单级中断处理过程流程图响应中断的时机外设的中断请求存放在接口中的中断源锁存器里，并通过中断请求线连至CPU外设的中断请求是随机的，CPU只有在当前指令执行完毕，转入公操作时才受理中断请求断点保护问题正确返主程序断点：主程序被中断的地方（PC）现场：当前指令执行结束后CPU的状态包括寄存器值和一些状态标志位保存现场：现场保存到堆栈中恢复现场从堆栈中恢复PC和CPU状态，以便从断点处继续执行主程序多重中断处理中断处理过程中又有新外设发出中断请求怎么办？在CPU中有一个中断屏蔽寄存器置“”设置屏蔽，关中断，不受理中断请求置“”取掉屏蔽，开中断，受理中断请求可以通过程序控制实现中断嵌套中断功能实现的软硬件分工中断周期的操作由硬件实现也称为“中断处理的隐操作”，程序员看不到响应中断、关中断、保存断点、找出中断源顺序很重要中断服务程序由软件实现保存现场、对发起中断的设备服务、恢复现场、开中断、返回主程序中断服务程序入口地址的获取转移到中断服务程序：找到中断服务程序的入口地址向量中断：当CPU响应中断时，由硬件直接产生一个地址即向量地址向量地址设备的中断服务程序入口地址查询中断：硬件为所有中断安排一个公共的中断服务程序该公共程序查询并跳转至相应中断服务程序入口程序中断方式的基本IO接口向量中断准备就绪的标志RDReady允许中断寄存器EIEnableInterrupt中断请求寄存器IRInterruptRequest中断屏蔽寄存器IMInterruptMask程序中断方式数据输入的执行过程由程序启动外设，将该外设接口的BS标志置“”，RD标志清“”；接口向外设发出启动信号；当设备动作结束或数据缓冲寄存器填满时，设备送出控制信号，将RD置“”；设备的中断向量逻辑讲中断向量发到数据总线，CPU将中断向量赋值给PC，跳转到中断服务程序外设传送数据到接口的数据缓冲寄存器；当EI为“”时，接口向CPU发出中断请求；在一条指令执行公操作时，CPU检查IR寄存器如果标志IM为“”，进入中断周期；中断服务程序把接口中数据缓冲寄存器的数据读至CPU中的寄存器；（）CPU发出控制信号C将接口中的BS和RD标志复位CPU受理中断请求，向外设发出中断响应信号INTA并关闭中断；单级中断所有中断源通过INTA链式查询方式连接，属于同一级离CPU近的中断源优先权高不允许任何中断源打断中断服务程序，即使优先权比它高也不能CPU中有个IM，个IRINTA：InterruptAuthorization中断授权信号单级中断源的识别串行排队链法IR，IR，IR为中断请求信号IS，IS，IS为中断选中信号多级中断中断源分成多个级别两级优先权每级有一个级别优先权每级内又有级内优先权中断级别高的中断源可以打断级别低的中断源，称为中断嵌套多级中断一维多级中断：每级中断只有一个中断源二维多级中断：每级中断有多个中断源一个系统有n级中断，则CPU中有n个IR，n个IM多级中断某级中断被响应后，则关闭本级和低于本级的IM，开放更高级的IM不同级别的中断可以嵌套，但同一级的中断不允许嵌套中断服务程序中使用多级堆栈保存现场（包括IM）中断请求的处理方法单级中断优先权顺序：ABC中断请求到达顺序中断请求的处理方法多级中断优先权顺序：ABC中断请求到达顺序多级中断源的识别采用了独立请求方式和链式查询方式相结合的方式级间采用独立请求方式优先排队电路中断向量产生电路级内采用链式查询方式开放和屏蔽中断屏蔽中断指CPU中的中断屏蔽寄存器IM置处于“关中断”所有可屏蔽中断源的中断请求得不到响应开放中断指CPU中的IM置处于“开中断”可以响应中断源的中断请求允许和禁止中断禁止中断指某个中断源接口中的中断允许寄存器EI被置对应的中断源不能发出中断请求处于“中断封锁”允许中断中断接口中的EI置中断源处于“中断开放”允许中断源发出中断请求例参见图所示的二维中断系统请问：在中断情况下，CPU和设备的优先级如何考虑请按降序排列各设备的中断优先级解在中断情况下，CPU的优先级最低各设备的优先次序降序排列是：ABCDEFGHICPU若CPU现执行设备B的中断服务程序，IM，IM，IM的状态是什么如果CPU执行设备D的中断服务程序，IM，IM，IM的状态又是什么解执行设备B的中断服务程序时IMIMIM；执行设备D的中断服务程序时，IMIMIM多级中断中，某级中断被响应后，则关闭本级和低于本级的IM，开放更高级的IM每一级的IM能否对某个优先级内的个别设备单独进行屏蔽如果不能，采取什么办法可达到目的解每一级的IM标志不能对某个优先级内的个别设备进行单独屏蔽。可将接口中的EI中断允许标志清“”，它禁止设备发出中断请求假如设备C一提出中断请求，CPU立即进行响应，如何调整才能满足此要求解要让设备C的中断请求及时得到响应，可将设备C从第级取出来，单独放在第级上，使第级的优先级最高即可例参见图所示的系统，只考虑A，B，C三个设备组成的单级中断结构，它要求CPU在执行完当前指令时对中断请求进行服务假设：CPU“中断批准”机构在响应一个新的中断之前，先要让被中断的程序的一条指令一定要执行完毕；TDC为查询链中每个设备的延迟时间；TA，TB，TC分别为设备A，B，C的服务程序所需的执行时间；TSTR为保存现场和恢复现场所需的时间；主存工作周期为TM试问：就这个中断请求环境来说，系统在什么情况下达到中断饱和例假定多级中断，其中断优先级由低到高为LLL，试设置中断屏蔽字，将中断优先级由低到高改为LLL原先的屏蔽字例假定多级中断，其中断优先级由低到高为LLL，试设置中断屏蔽字，将中断优先级由低到高改为LLL新的屏蔽字A、B、C是与主机连接的台设备，采用多级中断实现中断优先级处理，其各自的中断服务程序中对中断屏蔽码的设置如下表所示解：从中断屏蔽字看出，其处理优先级为：ACBCPU故CPU执行程序轨迹如下：A服务B服务C服务CPUABCPentium中断机制中断类型Pentium有两类中断：中断和异常中断通常称为外部中断，由外部硬件信号引发有两种情况：可屏蔽中断：可通过CPU中标志寄存器屏蔽非屏蔽中断：这类中断不能被屏蔽异常由指令执行引发执行异常：执行一条指令过程中出现错误、故障等执行软件中断指令：如执行INT，INT，INTn等指令Pentium共有种中断和异常，每一个有中断向量号中断优先级分为级中断服务程序中断服务程序的入口地址信息存于实模式为中断向量表IVT保护模式为中断描述符表IDTPentium取得中断向量号的途径有三种：指令给出：INTH外部提供：中断控制器CPU识别错误、故障现象
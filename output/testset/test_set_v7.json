[
  {
    "text": "事实上，菊花链结构是树形结构的一种特殊情况",
    "id": 3075,
    "annotator": 1,
    "annotation_id": 4508,
    "created_at": "2024-08-01T09:21:40.971562Z",
    "updated_at": "2024-08-01T09:21:40.971562Z",
    "lead_time": 1.465
  },
  {
    "text": "接口也需要一个主适配器和系统总线相连",
    "id": 3076,
    "label": [
      {
        "start": 12,
        "end": 16,
        "text": "系统总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 0,
        "end": 2,
        "text": "接口",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 8,
        "end": 11,
        "text": "适配器",
        "labels": [
          "IO"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4509,
    "created_at": "2024-08-01T09:21:42.425809Z",
    "updated_at": "2024-08-01T09:21:42.425809Z",
    "lead_time": 0.983
  },
  {
    "text": "这个主适配器的功能逻辑在高档的Pentium机中是集成在主板的核心芯片组的PCI总线到ISA总线的桥芯片中",
    "id": 3077,
    "label": [
      {
        "start": 43,
        "end": 48,
        "text": "ISA总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 37,
        "end": 42,
        "text": "PCI总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 33,
        "end": 35,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 49,
        "end": 50,
        "text": "桥",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 3,
        "end": 6,
        "text": "适配器",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 50,
        "end": 52,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4510,
    "created_at": "2024-08-01T09:21:43.820598Z",
    "updated_at": "2024-08-01T09:21:43.820598Z",
    "lead_time": 0.795
  },
  {
    "text": "机箱的背面只看到主适配器的外接端口插座",
    "id": 3078,
    "label": [
      {
        "start": 9,
        "end": 12,
        "text": "适配器",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 15,
        "end": 17,
        "text": "端口",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4511,
    "created_at": "2024-08-01T09:21:44.431829Z",
    "updated_at": "2024-08-01T09:21:44.431829Z",
    "lead_time": 0.06
  },
  {
    "text": "在这里将主适配器及其端口称为主端口",
    "id": 3079,
    "label": [
      {
        "start": 14,
        "end": 17,
        "text": "主端口",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 10,
        "end": 12,
        "text": "端口",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 5,
        "end": 8,
        "text": "适配器",
        "labels": [
          "IO"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4512,
    "created_at": "2024-08-01T09:21:45.090837Z",
    "updated_at": "2024-08-01T09:21:45.090837Z",
    "lead_time": 0.067
  },
  {
    "text": "主端口是接口树形配置结构的根节点",
    "id": 3080,
    "label": [
      {
        "start": 4,
        "end": 6,
        "text": "接口",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 0,
        "end": 3,
        "text": "主端口",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4513,
    "created_at": "2024-08-01T09:21:45.969772Z",
    "updated_at": "2024-08-01T09:21:45.969772Z",
    "lead_time": 0.082
  },
  {
    "text": "一个主端口最多可连接台设备，这些设备称为节点，它们构成亲子关系",
    "id": 3081,
    "label": [
      {
        "start": 2,
        "end": 5,
        "text": "主端口",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4514,
    "created_at": "2024-08-01T09:21:46.847741Z",
    "updated_at": "2024-08-01T09:21:46.847741Z",
    "lead_time": 0.087
  },
  {
    "text": "两个相邻节点之间的电缆最长为m，但两个节点之间进行通信时中间最多可经过个节点的转接再驱动，因此通信的最大距离是m",
    "id": 3082,
    "annotator": 1,
    "annotation_id": 4515,
    "created_at": "2024-08-01T09:21:47.741910Z",
    "updated_at": "2024-08-01T09:21:47.741910Z",
    "lead_time": 0.069
  },
  {
    "text": "电缆不需要终端器",
    "id": 3083,
    "annotator": 1,
    "annotation_id": 4516,
    "created_at": "2024-08-01T09:21:48.779810Z",
    "updated_at": "2024-08-01T09:21:48.779810Z",
    "lead_time": 0.243
  },
  {
    "text": "图给出一个IEEE配置的实例，其中右侧是线性链接方式，左侧是亲子层次链接方式",
    "id": 3084,
    "annotator": 1,
    "annotation_id": 4517,
    "created_at": "2024-08-01T09:21:49.550938Z",
    "updated_at": "2024-08-01T09:21:49.550938Z",
    "lead_time": 0.069
  },
  {
    "text": "整体是一个树形结构",
    "id": 3085,
    "annotator": 1,
    "annotation_id": 4518,
    "created_at": "2024-08-01T09:21:50.451698Z",
    "updated_at": "2024-08-01T09:21:50.451698Z",
    "lead_time": 0.177
  },
  {
    "text": "采用集中式总线仲裁方式",
    "id": 3086,
    "label": [
      {
        "start": 7,
        "end": 11,
        "text": "仲裁方式",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 5,
        "end": 7,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4519,
    "created_at": "2024-08-01T09:21:51.489763Z",
    "updated_at": "2024-08-01T09:21:51.489763Z",
    "lead_time": 0.105
  },
  {
    "text": "中央仲裁逻辑在主端口内，并以先到先服务方法来处理节点提出的总线访问请求",
    "id": 3087,
    "label": [
      {
        "start": 7,
        "end": 10,
        "text": "主端口",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 29,
        "end": 31,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4520,
    "created_at": "2024-08-01T09:21:52.600557Z",
    "updated_at": "2024-08-01T09:21:52.600557Z",
    "lead_time": 0.265
  },
  {
    "text": "在n个节点同时提出使用总线请求时，按照优先权进行仲裁",
    "id": 3088,
    "label": [
      {
        "start": 11,
        "end": 13,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4521,
    "created_at": "2024-08-01T09:21:53.438761Z",
    "updated_at": "2024-08-01T09:21:53.438761Z",
    "lead_time": 0.088
  },
  {
    "text": "最靠近根节点的竞争节点有高的优先权；同样靠近根节点的竞争节点，其设备标识号ID大的有更高优先权",
    "id": 3089,
    "annotator": 1,
    "annotation_id": 4522,
    "created_at": "2024-08-01T09:21:54.638619Z",
    "updated_at": "2024-08-01T09:21:54.638619Z",
    "lead_time": 0.417
  },
  {
    "text": "具有PnP即插即用功能，设备标识号是系统自动指定的，而不是用户设定的",
    "id": 3090,
    "annotator": 1,
    "annotation_id": 4523,
    "created_at": "2024-08-01T09:21:55.390960Z",
    "updated_at": "2024-08-01T09:21:55.390960Z",
    "lead_time": 0.063
  },
  {
    "text": "为了保证总线设备的对等性和数据传送的实时性，的总线仲裁还增加了均等仲裁和紧急仲裁功能",
    "id": 3091,
    "label": [
      {
        "start": 23,
        "end": 27,
        "text": "总线仲裁",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4524,
    "created_at": "2024-08-01T09:21:56.279935Z",
    "updated_at": "2024-08-01T09:21:56.280933Z",
    "lead_time": 0.102
  },
  {
    "text": "均等仲裁是将总线时间分成均等的间隔，当间隔期间开始时，竞争的每个节点置位自己的仲裁允许标志，在间隔期内各节点可竞争总线的使用权",
    "id": 3092,
    "label": [
      {
        "start": 6,
        "end": 8,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 57,
        "end": 59,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 35,
        "end": 36,
        "text": "位",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4525,
    "created_at": "2024-08-01T09:21:57.169959Z",
    "updated_at": "2024-08-01T09:21:57.169959Z",
    "lead_time": 0.096
  },
  {
    "text": "一旦某节点获得总线访问权，则它的仲裁允许标志被复位，在此期间它不能再去竞争总线，以此来防止具有高优先权的忙设备独占总线",
    "id": 3093,
    "label": [
      {
        "start": 7,
        "end": 9,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 37,
        "end": 39,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 57,
        "end": 59,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 24,
        "end": 25,
        "text": "位",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4526,
    "created_at": "2024-08-01T09:21:58.009369Z",
    "updated_at": "2024-08-01T09:21:58.009369Z",
    "lead_time": 0.083
  },
  {
    "text": "紧急仲裁是指对某些高优先权的节点可为其指派紧急优先权",
    "id": 3094,
    "annotator": 1,
    "annotation_id": 4527,
    "created_at": "2024-08-01T09:21:59.004775Z",
    "updated_at": "2024-08-01T09:21:59.005790Z",
    "lead_time": 0.09
  },
  {
    "text": "具有紧急优先权的节点可在一个间隔期内多次获得总线控制权，允许它控制的总线可用时间",
    "id": 3095,
    "label": [
      {
        "start": 22,
        "end": 27,
        "text": "总线控制权",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 34,
        "end": 36,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4528,
    "created_at": "2024-08-01T09:21:59.926465Z",
    "updated_at": "2024-08-01T09:21:59.926465Z",
    "lead_time": 0.094
  },
  {
    "text": "协议集的一个重要特色是，它规范了一个三层协议集，将串行总线与各外围设备的交互动作标准化",
    "id": 3096,
    "label": [
      {
        "start": 25,
        "end": 29,
        "text": "串行总线",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 31,
        "end": 35,
        "text": "外围设备",
        "labels": [
          "IO"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4529,
    "created_at": "2024-08-01T09:22:00.774619Z",
    "updated_at": "2024-08-01T09:22:00.774619Z",
    "lead_time": 0.071
  },
  {
    "text": "图表示IEEE的协议集",
    "id": 3097,
    "annotator": 1,
    "annotation_id": 4530,
    "created_at": "2024-08-01T09:22:01.701597Z",
    "updated_at": "2024-08-01T09:22:01.701597Z",
    "lead_time": 0.196
  },
  {
    "text": "业务层定义了一个完整的请求响应协议实现总线传输，包括读操作、写操作和锁定操作",
    "id": 3098,
    "label": [
      {
        "start": 26,
        "end": 29,
        "text": "读操作",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 30,
        "end": 33,
        "text": "写操作",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 19,
        "end": 23,
        "text": "总线传输",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4531,
    "created_at": "2024-08-01T09:22:02.511713Z",
    "updated_at": "2024-08-01T09:22:02.511713Z",
    "lead_time": 0.099
  },
  {
    "text": "链路层可为应用程序直接提供等步数据传送服务",
    "id": 3099,
    "label": [
      {
        "start": 5,
        "end": 9,
        "text": "应用程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4532,
    "created_at": "2024-08-01T09:22:03.686928Z",
    "updated_at": "2024-08-01T09:22:03.686928Z",
    "lead_time": 0.174
  },
  {
    "text": "它支持异步和等步的包发送和接收",
    "id": 3100,
    "annotator": 1,
    "annotation_id": 4533,
    "created_at": "2024-08-01T09:22:04.655774Z",
    "updated_at": "2024-08-01T09:22:04.655774Z",
    "lead_time": 0.064
  },
  {
    "text": "异步包传送是，一个可变总量的数据及业务层的几个信息字节作为一个包传送到显式地址的目标方，并要求返回一个认可包",
    "id": 3101,
    "label": [
      {
        "start": 25,
        "end": 27,
        "text": "字节",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 37,
        "end": 39,
        "text": "地址",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4534,
    "created_at": "2024-08-01T09:22:05.800981Z",
    "updated_at": "2024-08-01T09:22:05.800981Z",
    "lead_time": 0.512
  },
  {
    "text": "等步包传送是，一个可变总量的数据以一串固定大小的包按照规整间隔来发送，使用简化寻址方式，不要求目标方认可",
    "id": 3102,
    "label": [
      {
        "start": 39,
        "end": 43,
        "text": "寻址方式",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4535,
    "created_at": "2024-08-01T09:22:06.557671Z",
    "updated_at": "2024-08-01T09:22:06.557671Z",
    "lead_time": 0.203
  },
  {
    "text": "把完成一个包的递交过程称为子动作",
    "id": 3103,
    "annotator": 1,
    "annotation_id": 4536,
    "created_at": "2024-08-01T09:22:07.285823Z",
    "updated_at": "2024-08-01T09:22:07.285823Z",
    "lead_time": 0.048
  },
  {
    "text": "物理层将链路层的逻辑信号根据不同的串行总线介质转换成相应的电信号，也为串行总线的接口定义了电气和机械特性",
    "id": 3104,
    "label": [
      {
        "start": 17,
        "end": 21,
        "text": "串行总线",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "接口",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 35,
        "end": 39,
        "text": "串行总线",
        "labels": [
          "IO"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4537,
    "created_at": "2024-08-01T09:22:08.027533Z",
    "updated_at": "2024-08-01T09:22:08.027533Z",
    "lead_time": 0.081
  },
  {
    "text": "实际上，串行接口的物理拓扑结构分成“底板环境”和“电气环境”两部分",
    "id": 3105,
    "label": [
      {
        "start": 11,
        "end": 15,
        "text": "拓扑结构",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 4,
        "end": 8,
        "text": "串行接口",
        "labels": [
          "IO"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4538,
    "created_at": "2024-08-01T09:22:08.825580Z",
    "updated_at": "2024-08-01T09:22:08.825580Z",
    "lead_time": 0.175
  },
  {
    "text": "总线规范并未要求特别的环境设定",
    "id": 3106,
    "label": [
      {
        "start": 0,
        "end": 2,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4539,
    "created_at": "2024-08-01T09:22:09.698508Z",
    "updated_at": "2024-08-01T09:22:09.698508Z",
    "lead_time": 0.196
  },
  {
    "text": "所有节点可严格限定在单一底板上，也可直接连在电缆上",
    "id": 3107,
    "annotator": 1,
    "annotation_id": 4540,
    "created_at": "2024-08-01T09:22:10.135991Z",
    "updated_at": "2024-08-01T09:22:10.135991Z",
    "lead_time": 0.031
  },
  {
    "text": "串行总线管理它提供总线节点所需的标准控制、状态寄存器服务和基本控制功能",
    "id": 3108,
    "label": [
      {
        "start": 21,
        "end": 26,
        "text": "状态寄存器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 0,
        "end": 4,
        "text": "串行总线",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 9,
        "end": 11,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4541,
    "created_at": "2024-08-01T09:22:12.362676Z",
    "updated_at": "2024-08-01T09:22:12.362676Z",
    "lead_time": 1.707
  },
  {
    "text": "总之，IEEE是一种高速串行IO标准接口",
    "id": 3109,
    "label": [
      {
        "start": 18,
        "end": 20,
        "text": "接口",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 12,
        "end": 14,
        "text": "串行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4542,
    "created_at": "2024-08-01T09:22:13.140574Z",
    "updated_at": "2024-08-01T09:22:13.141583Z",
    "lead_time": 0.324
  },
  {
    "text": "英特尔、微软等公司联手将列为年以后的新一代PC机新标准",
    "id": 3110,
    "label": [
      {
        "start": 0,
        "end": 3,
        "text": "英特尔",
        "labels": [
          "CORP"
        ]
      },
      {
        "start": 21,
        "end": 24,
        "text": "PC机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4543,
    "created_at": "2024-08-01T09:22:13.697953Z",
    "updated_at": "2024-08-01T09:22:13.697953Z",
    "lead_time": 0.096
  },
  {
    "text": "另一个重大特点是，各被连接装置的关系是平等的，不用PC机介入也能自成系统",
    "id": 3111,
    "label": [
      {
        "start": 25,
        "end": 28,
        "text": "PC机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4544,
    "created_at": "2024-08-01T09:22:14.344759Z",
    "updated_at": "2024-08-01T09:22:14.344759Z",
    "lead_time": 0.045
  },
  {
    "text": "例如，利用数字相机直接进行印刷的打印机便可利用这一特点",
    "id": 3112,
    "label": [
      {
        "start": 16,
        "end": 19,
        "text": "打印机",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 6,
        "end": 7,
        "text": "字",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4545,
    "created_at": "2024-08-01T09:22:14.998618Z",
    "updated_at": "2024-08-01T09:22:14.998618Z",
    "lead_time": 0.056
  },
  {
    "text": "这意味着在家电等消费类设备的连接应用方面有很好的前景",
    "id": 3113,
    "annotator": 1,
    "annotation_id": 4546,
    "created_at": "2024-08-01T09:22:15.599740Z",
    "updated_at": "2024-08-01T09:22:15.599740Z",
    "lead_time": 0.05
  },
  {
    "text": "IO系统设计要考虑两种主要规范：时延约束和带宽约束",
    "id": 3114,
    "label": [
      {
        "start": 21,
        "end": 23,
        "text": "带宽",
        "labels": [
          "PERF"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4547,
    "created_at": "2024-08-01T09:22:16.648651Z",
    "updated_at": "2024-08-01T09:22:16.648651Z",
    "lead_time": 0.564
  },
  {
    "text": "在这两种情况下，对通信模式的认知将影响整个系统的分析和设计",
    "id": 3115,
    "annotator": 1,
    "annotation_id": 4548,
    "created_at": "2024-08-01T09:22:17.138421Z",
    "updated_at": "2024-08-01T09:22:17.138421Z",
    "lead_time": 0.044
  },
  {
    "text": "时延约束时延约束确保完成一次IO操作的延迟时间被限制在某个数量范围内",
    "id": 3116,
    "annotator": 1,
    "annotation_id": 4549,
    "created_at": "2024-08-01T09:22:17.706173Z",
    "updated_at": "2024-08-01T09:22:17.706173Z",
    "lead_time": 0.058
  },
  {
    "text": "一种简单的情况是认为系统是无负载的，设计者必须保证满足某些时延约束，这是因为这种限制对应用程序非常重要，或者设备为了防止某种错误必须接受某些有保证的服务",
    "id": 3117,
    "label": [
      {
        "start": 43,
        "end": 47,
        "text": "应用程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4550,
    "created_at": "2024-08-01T09:22:18.297556Z",
    "updated_at": "2024-08-01T09:22:18.297556Z",
    "lead_time": 0.09
  },
  {
    "text": "同样，在一个无负载系统中计算延迟时间相对比较容易，因为只用跟踪IO操作的路径并累加单个延迟时间即可",
    "id": 3118,
    "annotator": 1,
    "annotation_id": 4551,
    "created_at": "2024-08-01T09:22:23.618998Z",
    "updated_at": "2024-08-01T09:22:23.618998Z",
    "lead_time": 4.701
  },
  {
    "text": "在有负载的情况下，得到平均时延是一个复杂的问题",
    "id": 3119,
    "annotator": 1,
    "annotation_id": 4552,
    "created_at": "2024-08-01T09:22:25.378037Z",
    "updated_at": "2024-08-01T09:22:25.378037Z",
    "lead_time": 1.315
  },
  {
    "text": "这些问题可以通过排队理论当工作量请求的行为和IO服务次数能够通过简单的分布来近似时或模拟当IO事件的行为很复杂时的方法解决",
    "id": 3120,
    "annotator": 1,
    "annotation_id": 4553,
    "created_at": "2024-08-01T09:22:26.275814Z",
    "updated_at": "2024-08-01T09:22:26.275814Z",
    "lead_time": 0.405
  },
  {
    "text": "带宽约束给定一个工作负载，设计一个满足一组带宽约束的IO系统是设计者需要面对的另一个典型问题",
    "id": 3121,
    "label": [
      {
        "start": 0,
        "end": 2,
        "text": "带宽",
        "labels": [
          "PERF"
        ]
      },
      {
        "start": 21,
        "end": 23,
        "text": "带宽",
        "labels": [
          "PERF"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4554,
    "created_at": "2024-08-01T09:22:27.088791Z",
    "updated_at": "2024-08-01T09:22:27.088791Z",
    "lead_time": 0.346
  },
  {
    "text": "或者，给定一个部分配置好的IO系统，要求设计者平衡系统，以维持该系统预配置部分规定的可能达到的最大带宽",
    "id": 3122,
    "label": [
      {
        "start": 49,
        "end": 51,
        "text": "带宽",
        "labels": [
          "PERF"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4555,
    "created_at": "2024-08-01T09:22:27.713020Z",
    "updated_at": "2024-08-01T09:22:27.713020Z",
    "lead_time": 0.139
  },
  {
    "text": "设计这样一个系统的一般方法如下",
    "id": 3123,
    "annotator": 1,
    "annotation_id": 4556,
    "created_at": "2024-08-01T09:22:28.607998Z",
    "updated_at": "2024-08-01T09:22:28.607998Z",
    "lead_time": 0.287
  },
  {
    "text": "找出IO系统中效率最低的连接，它是IO路径中约束设计的部件",
    "id": 3124,
    "annotator": 1,
    "annotation_id": 4557,
    "created_at": "2024-08-01T09:22:29.335619Z",
    "updated_at": "2024-08-01T09:22:29.335619Z",
    "lead_time": 0.245
  },
  {
    "text": "依赖于不同的工作负载，该部件可以存在于任何地方，包括CPU、内存系统、底板总线、IO控制器或IO设计",
    "id": 3125,
    "label": [
      {
        "start": 26,
        "end": 29,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 40,
        "end": 45,
        "text": "IO控制器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 30,
        "end": 32,
        "text": "内存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 37,
        "end": 39,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4558,
    "created_at": "2024-08-01T09:22:30.078787Z",
    "updated_at": "2024-08-01T09:22:30.078787Z",
    "lead_time": 0.286
  },
  {
    "text": "工作负载和配置限制会决定这个效率最低的部件到底在哪儿",
    "id": 3126,
    "annotator": 1,
    "annotation_id": 4559,
    "created_at": "2024-08-01T09:22:30.842776Z",
    "updated_at": "2024-08-01T09:22:30.842776Z",
    "lead_time": 0.043
  },
  {
    "text": "配置这个部件以保持所需的带宽",
    "id": 3127,
    "label": [
      {
        "start": 12,
        "end": 14,
        "text": "带宽",
        "labels": [
          "PERF"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4560,
    "created_at": "2024-08-01T09:22:31.445428Z",
    "updated_at": "2024-08-01T09:22:31.445428Z",
    "lead_time": 0.06
  },
  {
    "text": "研究系统中其他部分的需求，配置它们以支持这个带宽",
    "id": 3128,
    "label": [
      {
        "start": 22,
        "end": 24,
        "text": "带宽",
        "labels": [
          "PERF"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4561,
    "created_at": "2024-08-01T09:22:32.251752Z",
    "updated_at": "2024-08-01T09:22:32.251752Z",
    "lead_time": 0.245
  },
  {
    "text": "各种外围设备的数据传输速率相差很大",
    "id": 3129,
    "label": [
      {
        "start": 2,
        "end": 6,
        "text": "外围设备",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 7,
        "end": 13,
        "text": "数据传输速率",
        "labels": [
          "PERF"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4562,
    "created_at": "2024-08-01T09:22:32.993891Z",
    "updated_at": "2024-08-01T09:22:32.993891Z",
    "lead_time": 0.219
  },
  {
    "text": "如何保证主机与外围设备在时间上同步，则涉及外围设备的定时问题",
    "id": 3130,
    "label": [
      {
        "start": 4,
        "end": 6,
        "text": "主机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 7,
        "end": 11,
        "text": "外围设备",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 15,
        "end": 17,
        "text": "同步",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 21,
        "end": 25,
        "text": "外围设备",
        "labels": [
          "IO"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4563,
    "created_at": "2024-08-01T09:22:33.619003Z",
    "updated_at": "2024-08-01T09:22:33.619003Z",
    "lead_time": 0.064
  },
  {
    "text": "一个计算机系统的性能，不仅取决于CPU，还取决于IO速度",
    "id": 3131,
    "label": [
      {
        "start": 16,
        "end": 19,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 2,
        "end": 7,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4564,
    "created_at": "2024-08-01T09:22:34.314054Z",
    "updated_at": "2024-08-01T09:22:34.314054Z",
    "lead_time": 0.056
  },
  {
    "text": "在计算机系统中，CPU对外围设备的管理方式有：程序查询方式；程序中断方式；DMA方式；通道方式",
    "id": 3132,
    "label": [
      {
        "start": 1,
        "end": 6,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 12,
        "end": 16,
        "text": "外围设备",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 8,
        "end": 11,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 32,
        "end": 36,
        "text": "中断方式",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 37,
        "end": 40,
        "text": "DMA",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 30,
        "end": 32,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4565,
    "created_at": "2024-08-01T09:22:35.010574Z",
    "updated_at": "2024-08-01T09:22:35.010574Z",
    "lead_time": 0.076
  },
  {
    "text": "每种方式都需要硬件和软件结合起来进行",
    "id": 3133,
    "label": [
      {
        "start": 7,
        "end": 9,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 10,
        "end": 12,
        "text": "软件",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4566,
    "created_at": "2024-08-01T09:22:35.852738Z",
    "updated_at": "2024-08-01T09:22:35.852738Z",
    "lead_time": 0.055
  },
  {
    "text": "程序查询方式是CPU管理IO设备的最简单方式，CPU定期执行设备服务程序，主动来了解设备的工作状态",
    "id": 3134,
    "label": [
      {
        "start": 12,
        "end": 16,
        "text": "IO设备",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 7,
        "end": 10,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 26,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 0,
        "end": 2,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 34,
        "end": 36,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4567,
    "created_at": "2024-08-01T09:22:36.537332Z",
    "updated_at": "2024-08-01T09:22:36.537332Z",
    "lead_time": 0.081
  },
  {
    "text": "这种方式浪费CPU的宝贵资源",
    "id": 3135,
    "label": [
      {
        "start": 6,
        "end": 9,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4568,
    "created_at": "2024-08-01T09:22:37.222714Z",
    "updated_at": "2024-08-01T09:22:37.222714Z",
    "lead_time": 0.103
  },
  {
    "text": "程序中断方式是各类计算机中广泛使用的一种数据交换方式",
    "id": 3136,
    "label": [
      {
        "start": 9,
        "end": 12,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 2,
        "end": 6,
        "text": "中断方式",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 2,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4569,
    "created_at": "2024-08-01T09:22:37.922968Z",
    "updated_at": "2024-08-01T09:22:37.922968Z",
    "lead_time": 0.087
  },
  {
    "text": "当某一外设的数据准备就绪后，它“主动”向CPU发出请求信号",
    "id": 3137,
    "label": [
      {
        "start": 20,
        "end": 23,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 3,
        "end": 5,
        "text": "外设",
        "labels": [
          "IO"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4570,
    "created_at": "2024-08-01T09:22:39.056006Z",
    "updated_at": "2024-08-01T09:22:39.056006Z",
    "lead_time": 0.494
  },
  {
    "text": "CPU响应中断请求后，暂停运行主程序，自动转移到该设备的中断服务子程序，为该设备进行服务，结束时返回主程序",
    "id": 3138,
    "label": [
      {
        "start": 0,
        "end": 3,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 5,
        "end": 7,
        "text": "中断",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 28,
        "end": 30,
        "text": "中断",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 16,
        "end": 18,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 33,
        "end": 35,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 51,
        "end": 53,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4571,
    "created_at": "2024-08-01T09:22:39.674920Z",
    "updated_at": "2024-08-01T09:22:39.674920Z",
    "lead_time": 0.083
  },
  {
    "text": "中断处理过程可以嵌套进行，优先级高的设备可以中断优先级低的中断服务程序",
    "id": 3139,
    "label": [
      {
        "start": 13,
        "end": 16,
        "text": "优先级",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 24,
        "end": 27,
        "text": "优先级",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 2,
        "text": "中断",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 22,
        "end": 24,
        "text": "中断",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 29,
        "end": 31,
        "text": "中断",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 33,
        "end": 35,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4572,
    "created_at": "2024-08-01T09:22:40.464746Z",
    "updated_at": "2024-08-01T09:22:40.464746Z",
    "lead_time": 0.113
  },
  {
    "text": "DMA技术的出现，使得外围设备可以通过DMA控制器直接访问内存，与此同时，CPU可以继续程序",
    "id": 3140,
    "label": [
      {
        "start": 19,
        "end": 25,
        "text": "DMA控制器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 37,
        "end": 40,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 11,
        "end": 15,
        "text": "外围设备",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 0,
        "end": 3,
        "text": "DMA",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 29,
        "end": 31,
        "text": "内存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 44,
        "end": 46,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4573,
    "created_at": "2024-08-01T09:22:41.388714Z",
    "updated_at": "2024-08-01T09:22:41.388714Z",
    "lead_time": 0.274
  },
  {
    "text": "DMA方式采用以下三种方法：停止CPU访内；周期挪用；DMA与CPU交替访内",
    "id": 3141,
    "label": [
      {
        "start": 16,
        "end": 19,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 0,
        "end": 3,
        "text": "DMA",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 31,
        "end": 34,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 27,
        "end": 30,
        "text": "DMA",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4574,
    "created_at": "2024-08-01T09:22:42.021785Z",
    "updated_at": "2024-08-01T09:22:42.021785Z",
    "lead_time": 0.063
  },
  {
    "text": "DMA控制器按其组成结构，分为选择型和多路型两类",
    "id": 3142,
    "label": [
      {
        "start": 0,
        "end": 6,
        "text": "DMA控制器",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4575,
    "created_at": "2024-08-01T09:22:43.034518Z",
    "updated_at": "2024-08-01T09:22:43.034518Z",
    "lead_time": 0.32
  },
  {
    "text": "通道是一个特殊功能的处理器",
    "id": 3143,
    "label": [
      {
        "start": 10,
        "end": 13,
        "text": "处理器",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4576,
    "created_at": "2024-08-01T09:22:43.879791Z",
    "updated_at": "2024-08-01T09:22:43.879791Z",
    "lead_time": 0.306
  },
  {
    "text": "它有自己的指令和程序专门负责数据输入输出的传输控制，从而使CPU将“传输控制”的功能下放给通道，CPU只负责“数据处理”功能",
    "id": 3144,
    "label": [
      {
        "start": 29,
        "end": 32,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 8,
        "end": 10,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 5,
        "end": 7,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 48,
        "end": 51,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4577,
    "created_at": "2024-08-01T09:22:44.476215Z",
    "updated_at": "2024-08-01T09:22:44.476215Z",
    "lead_time": 0.06
  },
  {
    "text": "这样，通道与CPU分时使用内存，实现了CPU内部的数据处理与IO设备的平行工作",
    "id": 3145,
    "label": [
      {
        "start": 6,
        "end": 9,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 30,
        "end": 34,
        "text": "IO设备",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "内存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 19,
        "end": 22,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4578,
    "created_at": "2024-08-01T09:22:45.204548Z",
    "updated_at": "2024-08-01T09:22:45.204548Z",
    "lead_time": 0.093
  },
  {
    "text": "通道有两种类型：选择通道；多路通道",
    "id": 3146,
    "annotator": 1,
    "annotation_id": 4579,
    "created_at": "2024-08-01T09:22:47.562741Z",
    "updated_at": "2024-08-01T09:22:47.562741Z",
    "lead_time": 0.178
  },
  {
    "text": "标准化是建立开放式系统的基础",
    "id": 3147,
    "annotator": 1,
    "annotation_id": 4580,
    "created_at": "2024-08-01T09:22:48.374917Z",
    "updated_at": "2024-08-01T09:22:48.374917Z",
    "lead_time": 0.186
  },
  {
    "text": "CPU、系统总线、IO总线及标准接口技术近年来取得了重大进步",
    "id": 3148,
    "label": [
      {
        "start": 4,
        "end": 8,
        "text": "系统总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 9,
        "end": 13,
        "text": "IO总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 0,
        "end": 3,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 16,
        "end": 18,
        "text": "接口",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4581,
    "created_at": "2024-08-01T09:22:49.176950Z",
    "updated_at": "2024-08-01T09:22:49.176950Z",
    "lead_time": 0.237
  },
  {
    "text": "其中并行IO接口SCSI与串行IO接口IEEE是两个最具权威性和发展前景的标准接口技术",
    "id": 3149,
    "label": [
      {
        "start": 4,
        "end": 8,
        "text": "IO接口",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "串行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 2,
        "end": 4,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 15,
        "end": 19,
        "text": "IO接口",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 39,
        "end": 41,
        "text": "接口",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4582,
    "created_at": "2024-08-01T09:22:50.118619Z",
    "updated_at": "2024-08-01T09:22:50.118619Z",
    "lead_time": 0.297
  },
  {
    "text": "SCSI是系统级接口，是处于主适配器和智能设备控制器之间的并行IO接口，改进的SCSI可允许连接台不同类型的高速外围设备",
    "id": 3150,
    "label": [
      {
        "start": 21,
        "end": 26,
        "text": "设备控制器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 31,
        "end": 35,
        "text": "IO接口",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 29,
        "end": 31,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 56,
        "end": 60,
        "text": "外围设备",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 15,
        "end": 18,
        "text": "适配器",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 8,
        "end": 10,
        "text": "接口",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4583,
    "created_at": "2024-08-01T09:22:50.994956Z",
    "updated_at": "2024-08-01T09:22:50.995973Z",
    "lead_time": 0.108
  },
  {
    "text": "SCSI的不足处在于硬件较昂贵，并需要通用设备驱动程序和各类设备的驱动程序模块的支持",
    "id": 3151,
    "label": [
      {
        "start": 10,
        "end": 12,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 27,
        "text": "驱动程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 33,
        "end": 37,
        "text": "驱动程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4584,
    "created_at": "2024-08-01T09:22:51.741665Z",
    "updated_at": "2024-08-01T09:22:51.741665Z",
    "lead_time": 0.069
  },
  {
    "text": "IEEE是串行IO标准接口",
    "id": 3152,
    "label": [
      {
        "start": 5,
        "end": 7,
        "text": "串行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 11,
        "end": 13,
        "text": "接口",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4585,
    "created_at": "2024-08-01T09:22:52.552397Z",
    "updated_at": "2024-08-01T09:22:52.552397Z",
    "lead_time": 0.081
  },
  {
    "text": "与SCSI并行IO接口相比，它具有更高的数据传输速率和数据传送的实时性，具有更小的体积和连接的方便性",
    "id": 3153,
    "label": [
      {
        "start": 20,
        "end": 26,
        "text": "数据传输速率",
        "labels": [
          "PERF"
        ]
      },
      {
        "start": 7,
        "end": 11,
        "text": "IO接口",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 5,
        "end": 7,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4586,
    "created_at": "2024-08-01T09:22:53.364744Z",
    "updated_at": "2024-08-01T09:22:53.364744Z",
    "lead_time": 0.089
  },
  {
    "text": "IEEE的一个重大特点是，各被连接的设备的关系是平等的，不用PC介入也能自成系统",
    "id": 3154,
    "annotator": 1,
    "annotation_id": 4587,
    "created_at": "2024-08-01T09:22:54.125538Z",
    "updated_at": "2024-08-01T09:22:54.125538Z",
    "lead_time": 0.077
  },
  {
    "text": "因此IEEE已成为Intel、Microsoft等公司联手制定的新标准",
    "id": 3155,
    "label": [
      {
        "start": 9,
        "end": 14,
        "text": "Intel",
        "labels": [
          "CORP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4588,
    "created_at": "2024-08-01T09:22:54.869781Z",
    "updated_at": "2024-08-01T09:22:54.869781Z",
    "lead_time": 0.076
  },
  {
    "text": "计算机系统中的并行性有不同的等级",
    "id": 3156,
    "label": [
      {
        "start": 7,
        "end": 10,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 5,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4589,
    "created_at": "2024-08-01T09:22:56.104522Z",
    "updated_at": "2024-08-01T09:22:56.104522Z",
    "lead_time": 0.44
  },
  {
    "text": "所谓并行性，是指计算机系统具有可以同时进行运算或操作的特性，它包括同时性与并发性两种含义",
    "id": 3157,
    "label": [
      {
        "start": 8,
        "end": 13,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 2,
        "end": 5,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 37,
        "end": 40,
        "text": "并发性",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4590,
    "created_at": "2024-08-01T09:22:56.772654Z",
    "updated_at": "2024-08-01T09:22:56.772654Z",
    "lead_time": 0.062
  },
  {
    "text": "同时性两个或两个以上的事件在同一时刻发生",
    "id": 3158,
    "annotator": 1,
    "annotation_id": 4591,
    "created_at": "2024-08-01T09:22:57.785782Z",
    "updated_at": "2024-08-01T09:22:57.785782Z",
    "lead_time": 0.29
  },
  {
    "text": "并发性两个或两个以上的事件在同一时间间隔内发生",
    "id": 3159,
    "label": [
      {
        "start": 0,
        "end": 3,
        "text": "并发性",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4592,
    "created_at": "2024-08-01T09:22:58.514166Z",
    "updated_at": "2024-08-01T09:22:58.514166Z",
    "lead_time": 0.073
  },
  {
    "text": "从处理数据的角度看，并行性等级从低到高可分为：字串位串：同时只对一个字的一位进行处理",
    "id": 3160,
    "label": [
      {
        "start": 10,
        "end": 13,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 25,
        "end": 26,
        "text": "位",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 37,
        "end": 38,
        "text": "位",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 23,
        "end": 24,
        "text": "字",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 34,
        "end": 35,
        "text": "字",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4593,
    "created_at": "2024-08-01T09:22:59.432375Z",
    "updated_at": "2024-08-01T09:22:59.432375Z",
    "lead_time": 0.107
  },
  {
    "text": "这是最基本的串行处理方式，不存在并行性",
    "id": 3161,
    "label": [
      {
        "start": 16,
        "end": 19,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 6,
        "end": 10,
        "text": "串行处理",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4594,
    "created_at": "2024-08-01T09:23:00.428538Z",
    "updated_at": "2024-08-01T09:23:00.428538Z",
    "lead_time": 0.104
  },
  {
    "text": "字串位并：同时对一个字的全部位进行处理，不同字之间是串行的",
    "id": 3162,
    "label": [
      {
        "start": 26,
        "end": 28,
        "text": "串行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 2,
        "end": 3,
        "text": "位",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 14,
        "end": 15,
        "text": "位",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 0,
        "end": 1,
        "text": "字",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 10,
        "end": 11,
        "text": "字",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 22,
        "end": 23,
        "text": "字",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4595,
    "created_at": "2024-08-01T09:23:01.671686Z",
    "updated_at": "2024-08-01T09:23:01.671686Z",
    "lead_time": 0.545
  },
  {
    "text": "这里已开始出现并行性",
    "id": 3163,
    "label": [
      {
        "start": 7,
        "end": 10,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4596,
    "created_at": "2024-08-01T09:23:02.745997Z",
    "updated_at": "2024-08-01T09:23:02.745997Z",
    "lead_time": 0.322
  },
  {
    "text": "字并位串：同时对许多字的同一位进行处理",
    "id": 3164,
    "label": [
      {
        "start": 2,
        "end": 3,
        "text": "位",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 14,
        "end": 15,
        "text": "位",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 0,
        "end": 1,
        "text": "字",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 10,
        "end": 11,
        "text": "字",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4597,
    "created_at": "2024-08-01T09:23:03.692693Z",
    "updated_at": "2024-08-01T09:23:03.692693Z",
    "lead_time": 0.101
  },
  {
    "text": "这种方式有较高的并行性",
    "id": 3165,
    "label": [
      {
        "start": 8,
        "end": 11,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4598,
    "created_at": "2024-08-01T09:23:04.569589Z",
    "updated_at": "2024-08-01T09:23:04.569589Z",
    "lead_time": 0.066
  },
  {
    "text": "全并行：同时对许多字的全部位进行处理",
    "id": 3166,
    "label": [
      {
        "start": 9,
        "end": 10,
        "text": "字",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 13,
        "end": 14,
        "text": "位",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 1,
        "end": 3,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4599,
    "created_at": "2024-08-01T09:23:06.197652Z",
    "updated_at": "2024-08-01T09:23:06.197652Z",
    "lead_time": 0.95
  },
  {
    "text": "这是最高一级的并行",
    "id": 3167,
    "label": [
      {
        "start": 7,
        "end": 9,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4600,
    "created_at": "2024-08-01T09:23:06.886774Z",
    "updated_at": "2024-08-01T09:23:06.886774Z",
    "lead_time": 0.07
  },
  {
    "text": "从执行程序的角度看，并行性等级从低到高可分为：指令内部并行：一条指令执行时各微操作之间的并行",
    "id": 3168,
    "label": [
      {
        "start": 10,
        "end": 13,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 38,
        "end": 41,
        "text": "微操作",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 3,
        "end": 5,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 27,
        "end": 29,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 32,
        "end": 34,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 44,
        "end": 46,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4601,
    "created_at": "2024-08-01T09:23:07.596795Z",
    "updated_at": "2024-08-01T09:23:07.596795Z",
    "lead_time": 0.092
  },
  {
    "text": "指令级并行：并行执行两条或多条指令",
    "id": 3169,
    "label": [
      {
        "start": 0,
        "end": 2,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 3,
        "end": 5,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 15,
        "end": 17,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 6,
        "end": 8,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4602,
    "created_at": "2024-08-01T09:23:08.563850Z",
    "updated_at": "2024-08-01T09:23:08.563850Z",
    "lead_time": 0.084
  },
  {
    "text": "任务级或过程级并行：并行执行两个以上过程或任务程序段",
    "id": 3170,
    "label": [
      {
        "start": 23,
        "end": 26,
        "text": "程序段",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 7,
        "end": 9,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 10,
        "end": 12,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4603,
    "created_at": "2024-08-01T09:23:09.856580Z",
    "updated_at": "2024-08-01T09:23:09.856580Z",
    "lead_time": 0.685
  },
  {
    "text": "作业或程序级并行：并行执行两个以上作业或程序",
    "id": 3171,
    "label": [
      {
        "start": 3,
        "end": 5,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 6,
        "end": 8,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 9,
        "end": 11,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4604,
    "created_at": "2024-08-01T09:23:10.930978Z",
    "updated_at": "2024-08-01T09:23:10.930978Z",
    "lead_time": 0.399
  },
  {
    "text": "在计算机系统中，可以采取多种并行性措施",
    "id": 3172,
    "label": [
      {
        "start": 14,
        "end": 17,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 1,
        "end": 6,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4605,
    "created_at": "2024-08-01T09:23:12.703713Z",
    "updated_at": "2024-08-01T09:23:12.703713Z",
    "lead_time": 0.86
  },
  {
    "text": "既可以有处理数据方面的并行性，又可以有执行程序方面的并行性",
    "id": 3173,
    "label": [
      {
        "start": 11,
        "end": 14,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 26,
        "end": 29,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 21,
        "end": 23,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4606,
    "created_at": "2024-08-01T09:23:13.556987Z",
    "updated_at": "2024-08-01T09:23:13.556987Z",
    "lead_time": 0.084
  },
  {
    "text": "当并行性提高到一定级别时，则进入并行处理领域",
    "id": 3174,
    "label": [
      {
        "start": 1,
        "end": 4,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 16,
        "end": 18,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4607,
    "created_at": "2024-08-01T09:23:14.427806Z",
    "updated_at": "2024-08-01T09:23:14.427806Z",
    "lead_time": 0.075
  },
  {
    "text": "并行处理着重挖掘计算过程中的并行事件，使并行性达到较高的级别",
    "id": 3175,
    "label": [
      {
        "start": 20,
        "end": 23,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 2,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 14,
        "end": 16,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4608,
    "created_at": "2024-08-01T09:23:15.468608Z",
    "updated_at": "2024-08-01T09:23:15.469610Z",
    "lead_time": 0.134
  },
  {
    "text": "因此，并行处理是体系结构、硬件、软件、算法、编程语言等多方面综合的领域",
    "id": 3176,
    "label": [
      {
        "start": 22,
        "end": 26,
        "text": "编程语言",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 19,
        "end": 21,
        "text": "算法",
        "labels": [
          "ALG"
        ]
      },
      {
        "start": 16,
        "end": 18,
        "text": "软件",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 3,
        "end": 5,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4609,
    "created_at": "2024-08-01T09:23:17.682082Z",
    "updated_at": "2024-08-01T09:23:17.682082Z",
    "lead_time": 1.332
  },
  {
    "text": "计算机系统中提高并行性的措施多种多样，就其基本思想而言，可归纳成如下四条途径",
    "id": 3177,
    "label": [
      {
        "start": 8,
        "end": 11,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 5,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4610,
    "created_at": "2024-08-01T09:23:18.569018Z",
    "updated_at": "2024-08-01T09:23:18.570009Z",
    "lead_time": 0.072
  },
  {
    "text": "时间重叠",
    "id": 3178,
    "annotator": 1,
    "annotation_id": 4611,
    "created_at": "2024-08-01T09:23:19.535491Z",
    "updated_at": "2024-08-01T09:23:19.535491Z",
    "lead_time": 0.067
  },
  {
    "text": "时间重叠即时间并行",
    "id": 3179,
    "label": [
      {
        "start": 5,
        "end": 9,
        "text": "时间并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4612,
    "created_at": "2024-08-01T09:23:20.650636Z",
    "updated_at": "2024-08-01T09:23:20.650636Z",
    "lead_time": 0.375
  },
  {
    "text": "在并行性概念中引入时间因素，让多个处理过程在时间上相互错开，轮流重叠地使用同一套硬件设备的各个部分，以加快硬件周转而赢得速度",
    "id": 3180,
    "label": [
      {
        "start": 1,
        "end": 4,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 53,
        "end": 55,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4613,
    "created_at": "2024-08-01T09:23:21.583799Z",
    "updated_at": "2024-08-01T09:23:21.583799Z",
    "lead_time": 0.202
  },
  {
    "text": "时间重叠的实质就是把一件工作按功能分割为若干个相互联系的部分，每一部分指定专门的部件完成，各部分执行过程在时间上重叠起来，使所有部件依次分工合作完成完整的工作",
    "id": 3181,
    "annotator": 1,
    "annotation_id": 4614,
    "created_at": "2024-08-01T09:23:22.292324Z",
    "updated_at": "2024-08-01T09:23:22.292324Z",
    "lead_time": 0.06
  },
  {
    "text": "时间重叠的典型应用就是流水线技术",
    "id": 3182,
    "label": [
      {
        "start": 11,
        "end": 14,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4615,
    "created_at": "2024-08-01T09:23:23.423857Z",
    "updated_at": "2024-08-01T09:23:23.423857Z",
    "lead_time": 0.334
  },
  {
    "text": "资源重复",
    "id": 3183,
    "annotator": 1,
    "annotation_id": 4616,
    "created_at": "2024-08-01T09:23:24.709754Z",
    "updated_at": "2024-08-01T09:23:24.709754Z",
    "lead_time": 0.45
  },
  {
    "text": "资源重复即空间并行",
    "id": 3184,
    "label": [
      {
        "start": 5,
        "end": 9,
        "text": "空间并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4617,
    "created_at": "2024-08-01T09:23:25.332734Z",
    "updated_at": "2024-08-01T09:23:25.332734Z",
    "lead_time": 0.07
  },
  {
    "text": "在并行性概念中引入空间因素，以数量取胜的原则，通过重复设置硬件资源，大幅度提高计算机系统的性能",
    "id": 3185,
    "label": [
      {
        "start": 39,
        "end": 44,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 1,
        "end": 4,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 29,
        "end": 31,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4618,
    "created_at": "2024-08-01T09:23:26.219784Z",
    "updated_at": "2024-08-01T09:23:26.219784Z",
    "lead_time": 0.099
  },
  {
    "text": "随着硬件价格的降低，资源重复在单处理机中通过部件冗余、多存储体等方式被广泛应用，而多处理机本身就是实施“资源重复”原理的结果",
    "id": 3186,
    "label": [
      {
        "start": 41,
        "end": 45,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 15,
        "end": 19,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 2,
        "end": 4,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 28,
        "end": 31,
        "text": "存储体",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4619,
    "created_at": "2024-08-01T09:23:32.586410Z",
    "updated_at": "2024-08-01T09:23:32.586410Z",
    "lead_time": 5.524
  },
  {
    "text": "时间重叠资源重复",
    "id": 3187,
    "annotator": 1,
    "annotation_id": 4620,
    "created_at": "2024-08-01T09:23:33.772884Z",
    "updated_at": "2024-08-01T09:23:33.772884Z",
    "lead_time": 0.47
  },
  {
    "text": "在计算机系统中同时运用时间并行和空间并行技术，这种方式在计算机系统中得到广泛应用，成为并行性主流技术",
    "id": 3188,
    "label": [
      {
        "start": 16,
        "end": 22,
        "text": "空间并行技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 1,
        "end": 6,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 11,
        "end": 15,
        "text": "时间并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 28,
        "end": 33,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 43,
        "end": 46,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4621,
    "created_at": "2024-08-01T09:23:34.474944Z",
    "updated_at": "2024-08-01T09:23:34.474944Z",
    "lead_time": 0.084
  },
  {
    "text": "资源共享",
    "id": 3189,
    "annotator": 1,
    "annotation_id": 4622,
    "created_at": "2024-08-01T09:23:35.418803Z",
    "updated_at": "2024-08-01T09:23:35.418803Z",
    "lead_time": 0.059
  },
  {
    "text": "资源共享是一种软件方法的并行，它使多个任务按一定时间顺序轮流使用同一套硬件设备",
    "id": 3190,
    "label": [
      {
        "start": 7,
        "end": 9,
        "text": "软件",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 35,
        "end": 37,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 12,
        "end": 14,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4623,
    "created_at": "2024-08-01T09:23:36.524776Z",
    "updated_at": "2024-08-01T09:23:36.524776Z",
    "lead_time": 0.121
  },
  {
    "text": "多道程序、分时系统就是资源共享的具体应用",
    "id": 3191,
    "label": [
      {
        "start": 2,
        "end": 4,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4624,
    "created_at": "2024-08-01T09:23:37.437586Z",
    "updated_at": "2024-08-01T09:23:37.438583Z",
    "lead_time": 0.077
  },
  {
    "text": "资源共享既降低了成本，又提高了计算机硬件的利用率",
    "id": 3192,
    "label": [
      {
        "start": 15,
        "end": 20,
        "text": "计算机硬件",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4625,
    "created_at": "2024-08-01T09:23:50.291980Z",
    "updated_at": "2024-08-01T09:23:50.291980Z",
    "lead_time": 0.636
  },
  {
    "text": "早期单处理机的发展过程中，起着主导作用的是时间并行流水线技术",
    "id": 3193,
    "label": [
      {
        "start": 25,
        "end": 28,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 2,
        "end": 6,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 21,
        "end": 25,
        "text": "时间并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4626,
    "created_at": "2024-08-01T09:23:51.329399Z",
    "updated_at": "2024-08-01T09:23:51.329399Z",
    "lead_time": 0.414
  },
  {
    "text": "实现时间并行的物质基础是“部件功能专用化”，即把一件工作按功能分割为若干相互联系的部分，把每一部分指定给专门的部件完成；然后按时间重叠原理把各部分执行过程在时间上重叠起来，使所有部件依次分工完成一组同样的工作",
    "id": 3194,
    "label": [
      {
        "start": 2,
        "end": 6,
        "text": "时间并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4627,
    "created_at": "2024-08-01T09:23:52.230746Z",
    "updated_at": "2024-08-01T09:23:52.230746Z",
    "lead_time": 0.13
  },
  {
    "text": "例如，指令执行的个子过程分别需要个专用部件，即取指令部件IF、指令译码部件ID、指令执行部件EX、访问存储器部件M、结果写回部件WB",
    "id": 3195,
    "label": [
      {
        "start": 31,
        "end": 35,
        "text": "指令译码",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 23,
        "end": 26,
        "text": "取指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 51,
        "end": 54,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 3,
        "end": 5,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4628,
    "created_at": "2024-08-01T09:23:53.083938Z",
    "updated_at": "2024-08-01T09:23:53.083938Z",
    "lead_time": 0.1
  },
  {
    "text": "将它们按流水方式连接起来，就满足时间重叠原理，从而使得处理机内部能同时处理多条指令，提高了处理机的速度",
    "id": 3196,
    "label": [
      {
        "start": 27,
        "end": 30,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "流水",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 39,
        "end": 41,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 45,
        "end": 48,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4629,
    "created_at": "2024-08-01T09:23:54.088667Z",
    "updated_at": "2024-08-01T09:23:54.088667Z",
    "lead_time": 0.103
  },
  {
    "text": "显然，时间并行技术开发了计算机系统中的指令级并行",
    "id": 3197,
    "label": [
      {
        "start": 3,
        "end": 9,
        "text": "时间并行技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 12,
        "end": 17,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 19,
        "end": 21,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 22,
        "end": 24,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4630,
    "created_at": "2024-08-01T09:23:54.884731Z",
    "updated_at": "2024-08-01T09:23:54.884731Z",
    "lead_time": 0.095
  },
  {
    "text": "在单处理机中，空间并行技术的运用也已经十分普遍",
    "id": 3198,
    "label": [
      {
        "start": 1,
        "end": 5,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 7,
        "end": 13,
        "text": "空间并行技术",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4631,
    "created_at": "2024-08-01T09:23:55.758781Z",
    "updated_at": "2024-08-01T09:23:55.758781Z",
    "lead_time": 0.063
  },
  {
    "text": "例如，不论是非流水线处理机，还是流水线处理机，多体存储器和多操作部件都是成功应用的结构形式",
    "id": 3199,
    "label": [
      {
        "start": 10,
        "end": 13,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 19,
        "end": 22,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 25,
        "end": 28,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 7,
        "end": 10,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 16,
        "end": 19,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4632,
    "created_at": "2024-08-01T09:23:56.606016Z",
    "updated_at": "2024-08-01T09:23:56.606016Z",
    "lead_time": 0.107
  },
  {
    "text": "在多操作部件处理机中，通用部件被分解成若干个专用操作部件，如加法部件、乘法部件、除法部件、逻辑运算部件等",
    "id": 3200,
    "label": [
      {
        "start": 45,
        "end": 49,
        "text": "逻辑运算",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 6,
        "end": 9,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4633,
    "created_at": "2024-08-01T09:23:57.349882Z",
    "updated_at": "2024-08-01T09:23:57.349882Z",
    "lead_time": 0.056
  },
  {
    "text": "一条指令所需的操作部件只要空闲，就可以开始执行这条指令，这就是指令级并行",
    "id": 3201,
    "label": [
      {
        "start": 2,
        "end": 4,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 25,
        "end": 27,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 31,
        "end": 33,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 34,
        "end": 36,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4634,
    "created_at": "2024-08-01T09:23:58.031947Z",
    "updated_at": "2024-08-01T09:23:58.031947Z",
    "lead_time": 0.073
  },
  {
    "text": "在单处理机中，资源共享的概念实质上是用单处理机模拟多处理机的功能，形成所谓虚拟机的概念",
    "id": 3202,
    "label": [
      {
        "start": 25,
        "end": 29,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 1,
        "end": 5,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 19,
        "end": 23,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4635,
    "created_at": "2024-08-01T09:23:59.415853Z",
    "updated_at": "2024-08-01T09:23:59.416864Z",
    "lead_time": 0.697
  },
  {
    "text": "例如，分时系统，在多终端情况下，每个终端上的用户感到好像自己独占一台处理机一样",
    "id": 3203,
    "label": [
      {
        "start": 34,
        "end": 37,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4636,
    "created_at": "2024-08-01T09:24:00.106946Z",
    "updated_at": "2024-08-01T09:24:00.106946Z",
    "lead_time": 0.057
  },
  {
    "text": "单处理机并行性发展的代表作有奔腾系列机和安腾系列机",
    "id": 3204,
    "label": [
      {
        "start": 0,
        "end": 4,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 4,
        "end": 7,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4637,
    "created_at": "2024-08-01T09:24:00.785952Z",
    "updated_at": "2024-08-01T09:24:00.785952Z",
    "lead_time": 0.071
  },
  {
    "text": "多处理机系统也遵循时间重叠、资源重复、资源共享原理，向着不同体系结构的多处理机方向发展",
    "id": 3205,
    "label": [
      {
        "start": 0,
        "end": 4,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 35,
        "end": 39,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4638,
    "created_at": "2024-08-01T09:24:01.726449Z",
    "updated_at": "2024-08-01T09:24:01.726449Z",
    "lead_time": 0.1
  },
  {
    "text": "但在采取的技术措施上与单处理机系统有些差别",
    "id": 3206,
    "label": [
      {
        "start": 11,
        "end": 15,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4639,
    "created_at": "2024-08-01T09:24:02.559898Z",
    "updated_at": "2024-08-01T09:24:02.559898Z",
    "lead_time": 0.073
  },
  {
    "text": "为了反映多处理机系统各机器之间物理连接的紧密程度与交互作用能力的强弱，通常使用耦合度这一术语",
    "id": 3207,
    "label": [
      {
        "start": 4,
        "end": 10,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4640,
    "created_at": "2024-08-01T09:24:03.470890Z",
    "updated_at": "2024-08-01T09:24:03.471898Z",
    "lead_time": 0.088
  },
  {
    "text": "多处理机系统的耦合度，分为紧耦合系统和松耦合系统两大类",
    "id": 3208,
    "label": [
      {
        "start": 0,
        "end": 6,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4641,
    "created_at": "2024-08-01T09:24:04.547735Z",
    "updated_at": "2024-08-01T09:24:04.547735Z",
    "lead_time": 0.088
  },
  {
    "text": "紧耦合系统又称直接耦合系统，指处理机之间物理连接的频带较高，一般是通过总线或高速开关实现互连，可以共享主存",
    "id": 3209,
    "label": [
      {
        "start": 51,
        "end": 53,
        "text": "主存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 15,
        "end": 18,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 35,
        "end": 37,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4642,
    "created_at": "2024-08-01T09:24:05.627368Z",
    "updated_at": "2024-08-01T09:24:05.627368Z",
    "lead_time": 0.249
  },
  {
    "text": "由于具有较高的信息传输率，因而可以快速并行处理作业或任务",
    "id": 3210,
    "label": [
      {
        "start": 19,
        "end": 21,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4643,
    "created_at": "2024-08-01T09:24:06.595746Z",
    "updated_at": "2024-08-01T09:24:06.595746Z",
    "lead_time": 0.191
  },
  {
    "text": "松耦合系统又称间接耦合系统，一般是通过通道或通信线路实现处理机之间的互连，可以共享外存设备磁盘、磁带等",
    "id": 3211,
    "label": [
      {
        "start": 41,
        "end": 45,
        "text": "外存设备",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 28,
        "end": 31,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 48,
        "end": 50,
        "text": "磁带",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 45,
        "end": 47,
        "text": "磁盘",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4644,
    "created_at": "2024-08-01T09:24:07.666741Z",
    "updated_at": "2024-08-01T09:24:07.666741Z",
    "lead_time": 0.152
  },
  {
    "text": "机器之间的相互作用是在文件或数据集一级上进行",
    "id": 3212,
    "annotator": 1,
    "annotation_id": 4645,
    "created_at": "2024-08-01T09:24:08.586584Z",
    "updated_at": "2024-08-01T09:24:08.586584Z",
    "lead_time": 0.061
  },
  {
    "text": "松耦合系统表现为两种形式：一种是多台计算机和共享的外存设备连接，不同机器之间实现功能上的分工功能专用化，机器处理的结果以文件或数据集的形式送到共享外存设备，供其他机器继续处理",
    "id": 3213,
    "label": [
      {
        "start": 25,
        "end": 29,
        "text": "外存设备",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 18,
        "end": 21,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 73,
        "end": 75,
        "text": "外存",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4646,
    "created_at": "2024-08-01T09:24:12.328939Z",
    "updated_at": "2024-08-01T09:24:12.328939Z",
    "lead_time": 3.026
  },
  {
    "text": "另一种是计算机网，机器通过通信线路连接，以求得更大范围的资源共享",
    "id": 3214,
    "label": [
      {
        "start": 4,
        "end": 7,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4647,
    "created_at": "2024-08-01T09:24:13.919809Z",
    "updated_at": "2024-08-01T09:24:13.919809Z",
    "lead_time": 1.044
  },
  {
    "text": "多处理机中为了实现时间重叠，将处理功能分散给各专用处理机去完成，即功能专用化，各处理机之间则按时间重叠原理工作",
    "id": 3215,
    "label": [
      {
        "start": 0,
        "end": 4,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 25,
        "end": 28,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 40,
        "end": 43,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4648,
    "created_at": "2024-08-01T09:24:36.226709Z",
    "updated_at": "2024-08-01T09:24:36.226709Z",
    "lead_time": 21.641
  },
  {
    "text": "如输入输出功能的分离，导致由通道向专用外围处理机发展",
    "id": 3216,
    "label": [
      {
        "start": 21,
        "end": 24,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4649,
    "created_at": "2024-08-01T09:24:42.686588Z",
    "updated_at": "2024-08-01T09:24:42.686588Z",
    "lead_time": 5.885
  },
  {
    "text": "许多主要功能，如数组运算、高级语言编译、数据库管理等，也逐渐分离出来，交由专用处理机完成，机间的耦合程度逐渐加强，从而发展成为异构多处理机系统",
    "id": 3217,
    "label": [
      {
        "start": 13,
        "end": 17,
        "text": "高级语言",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 17,
        "end": 19,
        "text": "编译",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 65,
        "end": 71,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 39,
        "end": 42,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4650,
    "created_at": "2024-08-01T09:24:49.501735Z",
    "updated_at": "2024-08-01T09:24:49.501735Z",
    "lead_time": 6.212
  },
  {
    "text": "随着硬件价格的降低，系统设计的目标聚焦到通过多处理机的并行处理来提高整个系统的速度",
    "id": 3218,
    "label": [
      {
        "start": 2,
        "end": 4,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 22,
        "end": 26,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 27,
        "end": 29,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4651,
    "created_at": "2024-08-01T09:24:50.206499Z",
    "updated_at": "2024-08-01T09:24:50.206499Z",
    "lead_time": 0.099
  },
  {
    "text": "为此，对计算机间互联网络的性能提出了更高要求",
    "id": 3219,
    "label": [
      {
        "start": 4,
        "end": 7,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4652,
    "created_at": "2024-08-01T09:24:51.292738Z",
    "updated_at": "2024-08-01T09:24:51.292738Z",
    "lead_time": 0.227
  },
  {
    "text": "高带宽、低延迟、低开销的机间互联网络，是高效实现程序段或任务一级并行处理的前提条件",
    "id": 3220,
    "label": [
      {
        "start": 24,
        "end": 27,
        "text": "程序段",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 1,
        "end": 3,
        "text": "带宽",
        "labels": [
          "PERF"
        ]
      },
      {
        "start": 32,
        "end": 34,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4653,
    "created_at": "2024-08-01T09:24:52.372872Z",
    "updated_at": "2024-08-01T09:24:52.372872Z",
    "lead_time": 0.093
  },
  {
    "text": "为了使并行处理的任务能在处理机之间随机地进行调度，就必须使各处理机具有同等的功能，从而成为同构多处理机系统",
    "id": 3221,
    "label": [
      {
        "start": 12,
        "end": 15,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 30,
        "end": 33,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 47,
        "end": 53,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 3,
        "end": 5,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4654,
    "created_at": "2024-08-01T09:24:53.252623Z",
    "updated_at": "2024-08-01T09:24:53.252623Z",
    "lead_time": 0.084
  },
  {
    "text": "世纪年代以来，芯片技术的飞速发展，为多处理机系统的研究和设计提供了强大的物质基础，各种类型的并行计算机系统纷纷问世",
    "id": 3222,
    "label": [
      {
        "start": 46,
        "end": 53,
        "text": "并行计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 18,
        "end": 24,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 7,
        "end": 9,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4655,
    "created_at": "2024-08-01T09:24:54.254413Z",
    "updated_at": "2024-08-01T09:24:54.254413Z",
    "lead_time": 0.092
  },
  {
    "text": "世纪年代，我国研制了向量处理机YH和",
    "id": 3223,
    "label": [
      {
        "start": 12,
        "end": 15,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4656,
    "created_at": "2024-08-01T09:24:55.188819Z",
    "updated_at": "2024-08-01T09:24:55.188819Z",
    "lead_time": 0.068
  },
  {
    "text": "它们都是流水线单机内部并行的机器",
    "id": 3224,
    "label": [
      {
        "start": 11,
        "end": 13,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 4,
        "end": 7,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4657,
    "created_at": "2024-08-01T09:24:56.456714Z",
    "updated_at": "2024-08-01T09:24:56.456714Z",
    "lead_time": 0.661
  },
  {
    "text": "进入年代以来，我国又研制了多种类型的并行计算机系统，打破了国外在高性能计算机领域对我国的封锁",
    "id": 3225,
    "label": [
      {
        "start": 18,
        "end": 25,
        "text": "并行计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 32,
        "end": 38,
        "text": "高性能计算机",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4658,
    "created_at": "2024-08-01T09:24:58.669693Z",
    "updated_at": "2024-08-01T09:24:58.669693Z",
    "lead_time": 1.649
  },
  {
    "text": "表列出了我国年代以来自行研制的几种并行计算机系统",
    "id": 3226,
    "label": [
      {
        "start": 17,
        "end": 24,
        "text": "并行计算机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4659,
    "created_at": "2024-08-01T09:24:59.490598Z",
    "updated_at": "2024-08-01T09:24:59.490598Z",
    "lead_time": 0.083
  },
  {
    "text": "年，超级计算机浮点最高运算速度达到每秒亿次",
    "id": 3227,
    "label": [
      {
        "start": 2,
        "end": 7,
        "text": "超级计算机",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4660,
    "created_at": "2024-08-01T09:25:00.363773Z",
    "updated_at": "2024-08-01T09:25:00.363773Z",
    "lead_time": 0.076
  },
  {
    "text": "我国的神威号计算机运算速度达到每秒亿次，使我国成为继美国、日本之后世界上第三个拥有高速计算机的国家",
    "id": 3228,
    "label": [
      {
        "start": 6,
        "end": 9,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 43,
        "end": 46,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4661,
    "created_at": "2024-08-01T09:25:01.223030Z",
    "updated_at": "2024-08-01T09:25:01.224031Z",
    "lead_time": 0.101
  },
  {
    "text": "年月曙光A被评为世界超级计算机五百强的第十名，并作为中国国家网格最大主节点安装在上海超级计算中心",
    "id": 3229,
    "label": [
      {
        "start": 10,
        "end": 15,
        "text": "超级计算机",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4662,
    "created_at": "2024-08-01T09:25:02.079762Z",
    "updated_at": "2024-08-01T09:25:02.079762Z",
    "lead_time": 0.082
  },
  {
    "text": "龙芯F是中国科学院计算技术研究所研制的采用nm设计技术的位高性能通用CPU芯片",
    "id": 3230,
    "label": [
      {
        "start": 4,
        "end": 16,
        "text": "中国科学院计算技术研究所",
        "labels": [
          "CORP"
        ]
      },
      {
        "start": 34,
        "end": 37,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 37,
        "end": 39,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 28,
        "end": 29,
        "text": "位",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4663,
    "created_at": "2024-08-01T09:25:03.002005Z",
    "updated_at": "2024-08-01T09:25:03.002005Z",
    "lead_time": 0.119
  },
  {
    "text": "年中国科学技术大学第一个用国产龙芯FCPU设计出了万亿次的高性能机器，这是值得称道和令人鼓舞的，是中国人用自己的CPU做超级计算机的开始",
    "id": 3231,
    "label": [
      {
        "start": 60,
        "end": 65,
        "text": "超级计算机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 18,
        "end": 21,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 56,
        "end": 59,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 3,
        "end": 7,
        "text": "科学技术",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4664,
    "created_at": "2024-08-01T09:25:04.121873Z",
    "updated_at": "2024-08-01T09:25:04.121873Z",
    "lead_time": 0.124
  },
  {
    "text": "年月，世界超级计算机五百强排行榜中，第一名是中国国防科技大学的“天河A”万亿次秒，第二名是美国Cray公司的Jaguar美洲虎，第三名是中国曙光信息产业有限公司的“星云”，第七名是美国IBM公司的Roadrunner走鹃",
    "id": 3232,
    "label": [
      {
        "start": 5,
        "end": 10,
        "text": "超级计算机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 92,
        "end": 97,
        "text": "IBM公司",
        "labels": [
          "CORP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4665,
    "created_at": "2024-08-01T09:25:05.115825Z",
    "updated_at": "2024-08-01T09:25:05.115825Z",
    "lead_time": 0.081
  },
  {
    "text": "表是这四台超级计算机的列表",
    "id": 3233,
    "label": [
      {
        "start": 5,
        "end": 10,
        "text": "超级计算机",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4666,
    "created_at": "2024-08-01T09:25:05.811589Z",
    "updated_at": "2024-08-01T09:25:05.811589Z",
    "lead_time": 0.06
  },
  {
    "text": "年，MJFlynn从计算机体系结构的并行性出发，按照指令流和数据流的不同组织方式，把计算机系统结构分为如下四种类型，如图所示",
    "id": 3234,
    "label": [
      {
        "start": 42,
        "end": 47,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 18,
        "end": 21,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 26,
        "end": 29,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 10,
        "end": 13,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4667,
    "created_at": "2024-08-01T09:25:06.652457Z",
    "updated_at": "2024-08-01T09:25:06.652457Z",
    "lead_time": 0.121
  },
  {
    "text": "单指令流单数据流SISD，其代表机型是单处理机",
    "id": 3235,
    "label": [
      {
        "start": 19,
        "end": 23,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 8,
        "end": 12,
        "text": "SISD",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 1,
        "end": 4,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4668,
    "created_at": "2024-08-01T09:25:07.500749Z",
    "updated_at": "2024-08-01T09:25:07.500749Z",
    "lead_time": 0.078
  },
  {
    "text": "单指令流多数据流SIMD，其代表机型是向量处理机",
    "id": 3236,
    "label": [
      {
        "start": 0,
        "end": 8,
        "text": "单指令流多数据流",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 8,
        "end": 12,
        "text": "SIMD",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 21,
        "end": 24,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4669,
    "created_at": "2024-08-01T09:25:08.241050Z",
    "updated_at": "2024-08-01T09:25:08.241050Z",
    "lead_time": 0.069
  },
  {
    "text": "多指令流单数据流MISD，这种结构从来没有实现过",
    "id": 3237,
    "label": [
      {
        "start": 8,
        "end": 12,
        "text": "MISD",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 1,
        "end": 4,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4670,
    "created_at": "2024-08-01T09:25:09.022030Z",
    "updated_at": "2024-08-01T09:25:09.022030Z",
    "lead_time": 0.063
  },
  {
    "text": "多指令流多数据流MIMD，其代表机型是多处理机和机群系统",
    "id": 3238,
    "label": [
      {
        "start": 8,
        "end": 12,
        "text": "MIMD",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 19,
        "end": 23,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 1,
        "end": 4,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4671,
    "created_at": "2024-08-01T09:25:09.841647Z",
    "updated_at": "2024-08-01T09:25:09.841647Z",
    "lead_time": 0.094
  },
  {
    "text": "前者为紧耦合系统，后者为松耦合系统",
    "id": 3239,
    "annotator": 1,
    "annotation_id": 4672,
    "created_at": "2024-08-01T09:25:10.571791Z",
    "updated_at": "2024-08-01T09:25:10.571791Z",
    "lead_time": 0.045
  },
  {
    "text": "图进一步说明了上述分类的组成方式",
    "id": 3240,
    "annotator": 1,
    "annotation_id": 4673,
    "created_at": "2024-08-01T09:25:11.357581Z",
    "updated_at": "2024-08-01T09:25:11.357581Z",
    "lead_time": 0.07
  },
  {
    "text": "其中，图a表示一个SISD的结构，CU代表控制单元，PU代表处理单元，MU代表存储单元，IS代表单一指令流，DS代表单一数据流",
    "id": 3241,
    "label": [
      {
        "start": 39,
        "end": 43,
        "text": "存储单元",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 9,
        "end": 13,
        "text": "SISD",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 50,
        "end": 53,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4674,
    "created_at": "2024-08-01T09:25:12.526890Z",
    "updated_at": "2024-08-01T09:25:12.526890Z",
    "lead_time": 0.529
  },
  {
    "text": "这是单处理机系统进行取指令和执行指令的过程",
    "id": 3242,
    "label": [
      {
        "start": 2,
        "end": 8,
        "text": "单处理机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 10,
        "end": 13,
        "text": "取指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 16,
        "end": 18,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4675,
    "created_at": "2024-08-01T09:25:13.142793Z",
    "updated_at": "2024-08-01T09:25:13.142793Z",
    "lead_time": 0.107
  },
  {
    "text": "图b表示SIMD的结构，仍是一个单一控制单元CU，但现在是向多个处理单元PUlPUn提供单一指令流，每个处理单元可有自己的专用存储器局部存储器LMlLMn",
    "id": 3243,
    "label": [
      {
        "start": 4,
        "end": 8,
        "text": "SIMD",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 46,
        "end": 49,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 63,
        "end": 66,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 68,
        "end": 71,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4676,
    "created_at": "2024-08-01T09:25:14.170888Z",
    "updated_at": "2024-08-01T09:25:14.170888Z",
    "lead_time": 0.345
  },
  {
    "text": "这些专用存储器组成分布式存储器",
    "id": 3244,
    "label": [
      {
        "start": 4,
        "end": 7,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 12,
        "end": 15,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4677,
    "created_at": "2024-08-01T09:25:15.207987Z",
    "updated_at": "2024-08-01T09:25:15.207987Z",
    "lead_time": 0.101
  },
  {
    "text": "图c和图d表示MIMD的结构，两者均有多个控制单元CUlCUn，每个控制单元向自己的处理部件PUlPUn提供一个独立的指令流",
    "id": 3245,
    "label": [
      {
        "start": 7,
        "end": 11,
        "text": "MIMD",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 59,
        "end": 62,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4678,
    "created_at": "2024-08-01T09:25:16.080881Z",
    "updated_at": "2024-08-01T09:25:16.080881Z",
    "lead_time": 0.08
  },
  {
    "text": "不同的是，图c是共享存储器多处理机，而图d是分布式存储器多处理机",
    "id": 3246,
    "label": [
      {
        "start": 13,
        "end": 17,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 28,
        "end": 32,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 10,
        "end": 13,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 25,
        "end": 28,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4679,
    "created_at": "2024-08-01T09:25:17.070652Z",
    "updated_at": "2024-08-01T09:25:17.070652Z",
    "lead_time": 0.089
  },
  {
    "text": "计算机体系结构可以采用不同方式的并行机制",
    "id": 3247,
    "label": [
      {
        "start": 16,
        "end": 18,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 3,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4680,
    "created_at": "2024-08-01T09:25:17.964002Z",
    "updated_at": "2024-08-01T09:25:17.964002Z",
    "lead_time": 0.098
  },
  {
    "text": "超标量处理机和超长指令字处理机在计算机系统的最底层，流水线技术将时间并行性引入处理机，而多发射处理机则把空间并行性引入处理机",
    "id": 3248,
    "label": [
      {
        "start": 16,
        "end": 21,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 52,
        "end": 56,
        "text": "空间并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 32,
        "end": 36,
        "text": "时间并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 26,
        "end": 29,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 3,
        "end": 6,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 12,
        "end": 15,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 39,
        "end": 42,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 47,
        "end": 50,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 59,
        "end": 62,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 8,
        "end": 11,
        "text": "长指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 11,
        "end": 12,
        "text": "字",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4681,
    "created_at": "2024-08-01T09:25:18.945707Z",
    "updated_at": "2024-08-01T09:25:18.945707Z",
    "lead_time": 0.173
  },
  {
    "text": "超标量superscalar设计采用多发射技术，在处理机内部设置多条并行执行的指令流水线，通过在每个时钟周期内向执行单元发射多条指令实现指令级并行",
    "id": 3249,
    "label": [
      {
        "start": 39,
        "end": 44,
        "text": "指令流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 56,
        "end": 60,
        "text": "执行单元",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 50,
        "end": 54,
        "text": "时钟周期",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 25,
        "end": 28,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 34,
        "end": 36,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 64,
        "end": 66,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 68,
        "end": 70,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 71,
        "end": 73,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4682,
    "created_at": "2024-08-01T09:25:20.301733Z",
    "updated_at": "2024-08-01T09:25:20.301733Z",
    "lead_time": 0.146
  },
  {
    "text": "超长指令字技术verylonginstructionword，VLIW则由编译器在编译时找出指令间潜在的并行性，进行适当的调度安排，把多个能够并行执行的操作组合在一起，控制处理机中的多个相互独立的功能部件，相当于同时执行多条指令，从而提高处理机的并行性",
    "id": 3250,
    "label": [
      {
        "start": 52,
        "end": 55,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 86,
        "end": 89,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 37,
        "end": 40,
        "text": "编译器",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 41,
        "end": 43,
        "text": "编译",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 2,
        "end": 4,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 119,
        "end": 122,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 71,
        "end": 73,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 123,
        "end": 126,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 46,
        "end": 48,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 112,
        "end": 114,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 4,
        "end": 5,
        "text": "字",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4683,
    "created_at": "2024-08-01T09:25:21.260746Z",
    "updated_at": "2024-08-01T09:25:21.261744Z",
    "lead_time": 0.11
  },
  {
    "text": "多处理机和多计算机在单个处理机的性能一定的情况下，进一步提高计算机系统处理能力的简单方法就是让多个处理机协同工作，共同完成任务",
    "id": 3251,
    "label": [
      {
        "start": 0,
        "end": 4,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 30,
        "end": 35,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 12,
        "end": 15,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 49,
        "end": 52,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 6,
        "end": 9,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4684,
    "created_at": "2024-08-01T09:25:22.307852Z",
    "updated_at": "2024-08-01T09:25:22.307852Z",
    "lead_time": 0.102
  },
  {
    "text": "广义而言，使用多台计算机协同工作来完成所要求的任务的计算机系统称为多处理机multiprocessor系统",
    "id": 3252,
    "label": [
      {
        "start": 26,
        "end": 31,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 9,
        "end": 12,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 33,
        "end": 37,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4685,
    "created_at": "2024-08-01T09:25:23.681594Z",
    "updated_at": "2024-08-01T09:25:23.681594Z",
    "lead_time": 0.452
  },
  {
    "text": "具体而言，多处理机系统由多台独立的处理机组成，每台处理机都能够独立执行自己的程序和指令流，相互之间通过专门的网络连接，实现数据的交换和通信，共同完成某项大的计算或处理任务",
    "id": 3253,
    "label": [
      {
        "start": 5,
        "end": 9,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 41,
        "end": 44,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 38,
        "end": 40,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 17,
        "end": 20,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 25,
        "end": 28,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4686,
    "created_at": "2024-08-01T09:25:24.672380Z",
    "updated_at": "2024-08-01T09:25:24.672380Z",
    "lead_time": 0.13
  },
  {
    "text": "多处理机系统中的各台处理机由操作系统管理，实现作业级或任务级并行",
    "id": 3254,
    "label": [
      {
        "start": 0,
        "end": 6,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 30,
        "end": 32,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 10,
        "end": 13,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 14,
        "end": 18,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4687,
    "created_at": "2024-08-01T09:25:25.546621Z",
    "updated_at": "2024-08-01T09:25:25.546621Z",
    "lead_time": 0.089
  },
  {
    "text": "与广义多处理机系统不同，狭义多处理机系统仅指在同一计算机内处理机之间通过共享存储器方式通信的并行计算机系统",
    "id": 3255,
    "label": [
      {
        "start": 38,
        "end": 41,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 46,
        "end": 53,
        "text": "并行计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 3,
        "end": 9,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 25,
        "end": 28,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 15,
        "end": 18,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 29,
        "end": 32,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4688,
    "created_at": "2024-08-01T09:25:26.784872Z",
    "updated_at": "2024-08-01T09:25:26.784872Z",
    "lead_time": 0.407
  },
  {
    "text": "运行在狭义多处理机上的所有进程能够共享映射到公共内存的单一虚拟地址空间",
    "id": 3256,
    "label": [
      {
        "start": 29,
        "end": 35,
        "text": "虚拟地址空间",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 5,
        "end": 9,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 24,
        "end": 26,
        "text": "内存",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4689,
    "created_at": "2024-08-01T09:25:27.810871Z",
    "updated_at": "2024-08-01T09:25:27.810871Z",
    "lead_time": 0.103
  },
  {
    "text": "任何进程都能通过执行LOAD或STORE指令来读写一个内存字",
    "id": 3257,
    "label": [
      {
        "start": 2,
        "end": 4,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 27,
        "end": 29,
        "text": "内存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 29,
        "end": 30,
        "text": "字",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4690,
    "created_at": "2024-08-01T09:25:28.579663Z",
    "updated_at": "2024-08-01T09:25:28.579663Z",
    "lead_time": 0.074
  },
  {
    "text": "与狭义多处理机相对应，由不共享公共内存的多个处理机系统构成的并行系统又称为多计算机multicomputers系统",
    "id": 3258,
    "label": [
      {
        "start": 3,
        "end": 7,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 17,
        "end": 19,
        "text": "内存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 30,
        "end": 32,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 22,
        "end": 25,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 38,
        "end": 41,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4691,
    "created_at": "2024-08-01T09:25:29.354347Z",
    "updated_at": "2024-08-01T09:25:29.354855Z",
    "lead_time": 0.107
  },
  {
    "text": "每个系统都有自己的私有内存，通过消息传递的方式进行互相通信",
    "id": 3259,
    "label": [
      {
        "start": 11,
        "end": 13,
        "text": "内存",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4692,
    "created_at": "2024-08-01T09:25:30.140824Z",
    "updated_at": "2024-08-01T09:25:30.140824Z",
    "lead_time": 0.054
  },
  {
    "text": "多计算机系统有各种不同的形状和规模",
    "id": 3260,
    "label": [
      {
        "start": 0,
        "end": 6,
        "text": "多计算机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4693,
    "created_at": "2024-08-01T09:25:31.072780Z",
    "updated_at": "2024-08-01T09:25:31.072780Z",
    "lead_time": 0.112
  },
  {
    "text": "机群cluster，也称集群系统就是一种常见的多计算机系统",
    "id": 3261,
    "label": [
      {
        "start": 23,
        "end": 29,
        "text": "多计算机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4694,
    "created_at": "2024-08-01T09:25:31.530857Z",
    "updated_at": "2024-08-01T09:25:31.530857Z",
    "lead_time": 0.039
  },
  {
    "text": "机群系统是由一组完整计算机通过高性能的网络或局域网互连而成的系统，这组计算机作为统一的计算机资源一起工作，并能产生一台机器的印象",
    "id": 3262,
    "label": [
      {
        "start": 10,
        "end": 13,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 35,
        "end": 38,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 43,
        "end": 46,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4695,
    "created_at": "2024-08-01T09:25:33.501279Z",
    "updated_at": "2024-08-01T09:25:33.501279Z",
    "lead_time": 1.463
  },
  {
    "text": "术语“完整计算机”意指一台计算机离开机群系统仍能运行自己的任务",
    "id": 3263,
    "label": [
      {
        "start": 5,
        "end": 8,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 16,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4696,
    "created_at": "2024-08-01T09:25:37.019832Z",
    "updated_at": "2024-08-01T09:25:37.019832Z",
    "lead_time": 3.096
  },
  {
    "text": "机群系统中的每台计算机一般称为节点",
    "id": 3264,
    "label": [
      {
        "start": 8,
        "end": 11,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4697,
    "created_at": "2024-08-01T09:25:37.531020Z",
    "updated_at": "2024-08-01T09:25:37.531020Z",
    "lead_time": 0.049
  },
  {
    "text": "多线程处理机当通过简单提高处理机主频从而提升单处理机的性能的传统方法受到制约时，处理机厂商被迫转向处理机片内并行技术",
    "id": 3265,
    "label": [
      {
        "start": 22,
        "end": 26,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 16,
        "end": 18,
        "text": "主频",
        "labels": [
          "PERF"
        ]
      },
      {
        "start": 54,
        "end": 56,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 3,
        "end": 6,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 16,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 40,
        "end": 43,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 49,
        "end": 52,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 1,
        "end": 3,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4698,
    "created_at": "2024-08-01T09:25:38.214941Z",
    "updated_at": "2024-08-01T09:25:38.214941Z",
    "lead_time": 0.14
  },
  {
    "text": "除了传统的指令级并行技术之外，多线程技术和多核技术也是提高单芯片处理能力的片内并行技术",
    "id": 3266,
    "label": [
      {
        "start": 15,
        "end": 20,
        "text": "多线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 30,
        "end": 32,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 5,
        "end": 7,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 8,
        "end": 10,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 39,
        "end": 41,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4699,
    "created_at": "2024-08-01T09:25:44.227600Z",
    "updated_at": "2024-08-01T09:25:44.227600Z",
    "lead_time": 5.271
  },
  {
    "text": "由于现代处理机广泛采用指令流水线技术，因而处理机必须面对一个固有的问题：如果处理机访存时cache缺失不命中，则必须访问主存，这会导致执行部件长时间的等待，直到相关的cache块被加载到cache中",
    "id": 3267,
    "label": [
      {
        "start": 60,
        "end": 62,
        "text": "主存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 11,
        "end": 16,
        "text": "指令流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 44,
        "end": 49,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 4,
        "end": 7,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 21,
        "end": 24,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 38,
        "end": 41,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 83,
        "end": 88,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 93,
        "end": 98,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4700,
    "created_at": "2024-08-01T09:25:44.872040Z",
    "updated_at": "2024-08-01T09:25:44.872040Z",
    "lead_time": 0.11
  },
  {
    "text": "解决指令流水线因此必须暂停的一种方法就是片上多线程onchipmultithreading技术",
    "id": 3268,
    "label": [
      {
        "start": 2,
        "end": 7,
        "text": "指令流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4701,
    "created_at": "2024-08-01T09:25:45.607957Z",
    "updated_at": "2024-08-01T09:25:45.607957Z",
    "lead_time": 0.083
  },
  {
    "text": "该技术允许CPU同时运行多个硬件线程，如果某个线程被迫暂停，其他线程仍可以执行，这样能保证硬件资源被充分利用",
    "id": 3269,
    "label": [
      {
        "start": 5,
        "end": 8,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 14,
        "end": 18,
        "text": "硬件线程",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 32,
        "end": 34,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 45,
        "end": 47,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4702,
    "created_at": "2024-08-01T09:25:46.284866Z",
    "updated_at": "2024-08-01T09:25:46.284866Z",
    "lead_time": 0.073
  },
  {
    "text": "多核处理机片上多处理机多线程技术能够屏蔽线程的存储器访问延迟，增加系统吞吐率，但并未提高每个单线程的执行速度",
    "id": 3270,
    "label": [
      {
        "start": 7,
        "end": 11,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 11,
        "end": 16,
        "text": "多线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 5,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 26,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 46,
        "end": 49,
        "text": "单线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 18,
        "end": 20,
        "text": "屏蔽",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4703,
    "created_at": "2024-08-01T09:25:46.986669Z",
    "updated_at": "2024-08-01T09:25:46.986669Z",
    "lead_time": 0.079
  },
  {
    "text": "而多核multicore技术通过开发程序内的线程级或进程级并行性提高性能",
    "id": 3271,
    "label": [
      {
        "start": 18,
        "end": 20,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 22,
        "end": 24,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 29,
        "end": 32,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 26,
        "end": 28,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4704,
    "created_at": "2024-08-01T09:25:47.811832Z",
    "updated_at": "2024-08-01T09:25:47.812821Z",
    "lead_time": 0.069
  },
  {
    "text": "多核处理机是指在一颗处理机芯片内集成两个或两个以上完整且并行工作的计算引擎核，也称为片上多处理机chipmultiprocessor，CMP",
    "id": 3272,
    "label": [
      {
        "start": 44,
        "end": 48,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 28,
        "end": 30,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 5,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 10,
        "end": 13,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4705,
    "created_at": "2024-08-01T09:25:48.610753Z",
    "updated_at": "2024-08-01T09:25:48.610753Z",
    "lead_time": 0.077
  },
  {
    "text": "核core，又称内核或核心是指包含指令部件、算术逻辑部件、寄存器堆和一级或两级cache的处理单元，这些核通过某种方式互联后，能够相互交换数据，对外呈现为一个统一的多核处理机",
    "id": 3273,
    "label": [
      {
        "start": 82,
        "end": 87,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 39,
        "end": 44,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 29,
        "end": 33,
        "text": "寄存器堆",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 17,
        "end": 19,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4706,
    "created_at": "2024-08-01T09:25:57.050955Z",
    "updated_at": "2024-08-01T09:25:57.050955Z",
    "lead_time": 7.831
  },
  {
    "text": "多核技术的兴起一方面是由于单核技术面临继续发展的瓶颈，另一方面也是由于大规模集成电路技术的发展使单芯片容量增长到足够大，能够把原来大规模并行处理机结构中的多处理机和多计算机节点集成到同一芯片内，让各个处理机核实现片内并行运行",
    "id": 3274,
    "label": [
      {
        "start": 38,
        "end": 42,
        "text": "集成电路",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 100,
        "end": 104,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 77,
        "end": 81,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 49,
        "end": 51,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 70,
        "end": 73,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 83,
        "end": 86,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "单核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 93,
        "end": 95,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 68,
        "end": 70,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 108,
        "end": 110,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4707,
    "created_at": "2024-08-01T09:25:57.749874Z",
    "updated_at": "2024-08-01T09:25:57.749874Z",
    "lead_time": 0.107
  },
  {
    "text": "因此，多核处理机是一种特殊的多处理机架构",
    "id": 3275,
    "label": [
      {
        "start": 3,
        "end": 8,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 14,
        "end": 20,
        "text": "多处理机架构",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4708,
    "created_at": "2024-08-01T09:25:58.419838Z",
    "updated_at": "2024-08-01T09:25:58.419838Z",
    "lead_time": 0.057
  },
  {
    "text": "所有的处理机都在同一块芯片上，不同的核执行不同的线程，在内存的不同部分操作",
    "id": 3276,
    "label": [
      {
        "start": 3,
        "end": 6,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 28,
        "end": 30,
        "text": "内存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 11,
        "end": 13,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 24,
        "end": 26,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4709,
    "created_at": "2024-08-01T09:25:59.002293Z",
    "updated_at": "2024-08-01T09:25:59.002293Z",
    "lead_time": 0.056
  },
  {
    "text": "多核也是一个共享内存的多处理机：所有的核共享同一个内存空间",
    "id": 3277,
    "label": [
      {
        "start": 11,
        "end": 15,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 25,
        "end": 29,
        "text": "内存空间",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 8,
        "end": 10,
        "text": "内存",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4710,
    "created_at": "2024-08-01T09:25:59.781563Z",
    "updated_at": "2024-08-01T09:25:59.781563Z",
    "lead_time": 0.072
  },
  {
    "text": "多个核在一个芯片内直接连接，多线程和多进程可以并行运行",
    "id": 3278,
    "label": [
      {
        "start": 6,
        "end": 8,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 19,
        "end": 21,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 15,
        "end": 17,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4711,
    "created_at": "2024-08-01T09:26:00.478802Z",
    "updated_at": "2024-08-01T09:26:00.478802Z",
    "lead_time": 0.067
  },
  {
    "text": "不同于多核结构，在传统的多处理机结构中，分布于不同芯片上的多个处理机通过片外系统总线连接，因此需要占用更大的芯片尺寸，消耗更多的热量，并需要额外的软件支持",
    "id": 3279,
    "label": [
      {
        "start": 38,
        "end": 42,
        "text": "系统总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 12,
        "end": 16,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 73,
        "end": 75,
        "text": "软件",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 25,
        "end": 27,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 31,
        "end": 34,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 54,
        "end": 56,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4712,
    "created_at": "2024-08-01T09:26:01.227801Z",
    "updated_at": "2024-08-01T09:26:01.227801Z",
    "lead_time": 0.12
  },
  {
    "text": "多个处理机可以分布于不同的主板上，也可以构建在同一块电路板上，处理机之间通过高速通信接口连接",
    "id": 3280,
    "label": [
      {
        "start": 2,
        "end": 5,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 31,
        "end": 34,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 42,
        "end": 44,
        "text": "接口",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4713,
    "created_at": "2024-08-01T09:26:01.983717Z",
    "updated_at": "2024-08-01T09:26:01.983717Z",
    "lead_time": 0.094
  },
  {
    "text": "图af显示了不同结构的处理机形态",
    "id": 3281,
    "label": [
      {
        "start": 11,
        "end": 14,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4714,
    "created_at": "2024-08-01T09:26:02.681724Z",
    "updated_at": "2024-08-01T09:26:02.681724Z",
    "lead_time": 0.049
  },
  {
    "text": "图a是单核处理机结构，由执行单元、CPU状态、中断逻辑和片上cache组成",
    "id": 3282,
    "label": [
      {
        "start": 12,
        "end": 16,
        "text": "执行单元",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 30,
        "end": 35,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 17,
        "end": 20,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 5,
        "end": 8,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "中断",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 3,
        "end": 5,
        "text": "单核",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4715,
    "created_at": "2024-08-01T09:26:03.392633Z",
    "updated_at": "2024-08-01T09:26:03.392633Z",
    "lead_time": 0.08
  },
  {
    "text": "图b是多处理机结构，由两个完全独立的单核处理机构成双处理机系统",
    "id": 3283,
    "label": [
      {
        "start": 3,
        "end": 7,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 20,
        "end": 23,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 26,
        "end": 29,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 18,
        "end": 20,
        "text": "单核",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4716,
    "created_at": "2024-08-01T09:26:04.182461Z",
    "updated_at": "2024-08-01T09:26:04.182461Z",
    "lead_time": 0.106
  },
  {
    "text": "图c是多线程处理机结构，在一个物理处理机芯片内集成两个逻辑处理机，二者共享执行单元和片上cache，但各自有自己的CPU状态和中断逻辑",
    "id": 3284,
    "label": [
      {
        "start": 15,
        "end": 20,
        "text": "物理处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 27,
        "end": 32,
        "text": "逻辑处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 44,
        "end": 49,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 37,
        "end": 41,
        "text": "执行单元",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 57,
        "end": 60,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 6,
        "end": 9,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 63,
        "end": 65,
        "text": "中断",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4717,
    "created_at": "2024-08-01T09:26:05.076260Z",
    "updated_at": "2024-08-01T09:26:05.076260Z",
    "lead_time": 0.104
  },
  {
    "text": "图d是多核处理机结构，两个完全独立的单处理机核集成在同一个芯片内，构成双核处理机，每个核都有自己私有的片上cache",
    "id": 3285,
    "label": [
      {
        "start": 3,
        "end": 8,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 53,
        "end": 58,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 29,
        "end": 31,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 19,
        "end": 23,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 37,
        "end": 40,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4718,
    "created_at": "2024-08-01T09:26:05.834002Z",
    "updated_at": "2024-08-01T09:26:05.834002Z",
    "lead_time": 0.072
  },
  {
    "text": "图e同样是多核处理机结构，但与图d显示的多核处理机结构的差别在于两个核共享片内cache",
    "id": 3286,
    "label": [
      {
        "start": 5,
        "end": 10,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 39,
        "end": 44,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 20,
        "end": 25,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4719,
    "created_at": "2024-08-01T09:26:06.495681Z",
    "updated_at": "2024-08-01T09:26:06.495681Z",
    "lead_time": 0.062
  },
  {
    "text": "图f显示的是多核多线程处理机结构，这是多核与多线程相结合的片上并行技术",
    "id": 3287,
    "label": [
      {
        "start": 31,
        "end": 33,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 11,
        "end": 14,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 9,
        "end": 11,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4720,
    "created_at": "2024-08-01T09:26:07.376348Z",
    "updated_at": "2024-08-01T09:26:07.376348Z",
    "lead_time": 0.079
  },
  {
    "text": "两个完全独立的处理机核集成在同一个芯片内，每个核又是双线程的，故该处理机为双核四线程结构",
    "id": 3288,
    "label": [
      {
        "start": 17,
        "end": 19,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 7,
        "end": 11,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 27,
        "end": 29,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 33,
        "end": 36,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4721,
    "created_at": "2024-08-01T09:26:08.135732Z",
    "updated_at": "2024-08-01T09:26:08.135732Z",
    "lead_time": 0.079
  },
  {
    "text": "硬件多线程技术是提高处理机并行度的有效手段，以往常被应用于高性能计算机的处理机",
    "id": 3289,
    "label": [
      {
        "start": 10,
        "end": 13,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 29,
        "end": 35,
        "text": "高性能计算机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 36,
        "end": 39,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 2,
        "end": 7,
        "text": "多线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 2,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4722,
    "created_at": "2024-08-01T09:26:08.931824Z",
    "updated_at": "2024-08-01T09:26:08.931824Z",
    "lead_time": 0.076
  },
  {
    "text": "年秋，英特尔公司推出一款采用超线程hyperthreading，HT技术的Pentium处理机，使多线程技术进入桌面应用环境",
    "id": 3290,
    "label": [
      {
        "start": 3,
        "end": 8,
        "text": "英特尔公司",
        "labels": [
          "CORP"
        ]
      },
      {
        "start": 49,
        "end": 54,
        "text": "多线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 44,
        "end": 47,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 15,
        "end": 17,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4723,
    "created_at": "2024-08-01T09:26:12.206750Z",
    "updated_at": "2024-08-01T09:26:12.206750Z",
    "lead_time": 2.502
  },
  {
    "text": "超线程技术是同时多线程技术在英特尔处理机上的具体实现",
    "id": 3291,
    "label": [
      {
        "start": 14,
        "end": 17,
        "text": "英特尔",
        "labels": [
          "CORP"
        ]
      },
      {
        "start": 8,
        "end": 13,
        "text": "多线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 5,
        "text": "超线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 17,
        "end": 20,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4724,
    "created_at": "2024-08-01T09:26:12.856827Z",
    "updated_at": "2024-08-01T09:26:12.857834Z",
    "lead_time": 0.073
  },
  {
    "text": "在经过特殊设计的处理机中，原有的单个物理内核经过简单扩展后被模拟成两个逻辑内核，并能够同时执行两个相互独立的程序，从而减少了处理机的闲置时间，充分利用了中央处理机的执行资源",
    "id": 3292,
    "label": [
      {
        "start": 76,
        "end": 81,
        "text": "中央处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 8,
        "end": 11,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 54,
        "end": 56,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 62,
        "end": 65,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4725,
    "created_at": "2024-08-01T09:26:13.617732Z",
    "updated_at": "2024-08-01T09:26:13.617732Z",
    "lead_time": 0.138
  },
  {
    "text": "超标量处理机的水平浪费和垂直浪费超标量技术和超长指令字技术都是针对单一的指令流中的若干指令来提高并行处理能力的，当单一的指令流出现cache缺失等现象时，指令流水线就会断流；而指令之间的相关性也会严重影响执行单元的利用率",
    "id": 3293,
    "label": [
      {
        "start": 102,
        "end": 106,
        "text": "执行单元",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 22,
        "end": 29,
        "text": "超长指令字技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 16,
        "end": 21,
        "text": "超标量技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 77,
        "end": 82,
        "text": "指令流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 65,
        "end": 70,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 36,
        "end": 39,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 48,
        "end": 50,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 60,
        "end": 63,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 3,
        "end": 6,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 43,
        "end": 45,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 88,
        "end": 90,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4726,
    "created_at": "2024-08-01T09:26:14.506572Z",
    "updated_at": "2024-08-01T09:26:14.506572Z",
    "lead_time": 0.131
  },
  {
    "text": "例如，资源冲突会导致处理机流水线不能继续执行新的指令而造成垂直浪费，而指令相关会导致多条流水线中部分流水线被闲置，造成水平浪费",
    "id": 3294,
    "label": [
      {
        "start": 10,
        "end": 13,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 16,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 24,
        "end": 26,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 44,
        "end": 47,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 50,
        "end": 53,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 35,
        "end": 37,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4727,
    "created_at": "2024-08-01T09:26:15.440749Z",
    "updated_at": "2024-08-01T09:26:15.440749Z",
    "lead_time": 0.09
  },
  {
    "text": "图显示了一个有四条流水线的超标量处理机的指令执行实例",
    "id": 3295,
    "label": [
      {
        "start": 9,
        "end": 12,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 16,
        "end": 19,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4728,
    "created_at": "2024-08-01T09:26:16.222737Z",
    "updated_at": "2024-08-01T09:26:16.222737Z",
    "lead_time": 0.072
  },
  {
    "text": "图中，每个方框代表一个可用的指令发射时间，水平方向表示并行执行指令的条指令流水线指令发射槽，垂直方向表示时钟周期，“A”表示某指令流A占用的周期，白框为浪费的周期",
    "id": 3296,
    "label": [
      {
        "start": 35,
        "end": 40,
        "text": "指令流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 52,
        "end": 56,
        "text": "时钟周期",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 27,
        "end": 29,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 14,
        "end": 16,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 31,
        "end": 33,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 63,
        "end": 66,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4729,
    "created_at": "2024-08-01T09:26:17.167861Z",
    "updated_at": "2024-08-01T09:26:17.167861Z",
    "lead_time": 0.099
  },
  {
    "text": "显然，水平浪费和垂直浪费造成了处理机执行部件的空闲",
    "id": 3297,
    "label": [
      {
        "start": 15,
        "end": 18,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4730,
    "created_at": "2024-08-01T09:26:17.940697Z",
    "updated_at": "2024-08-01T09:26:17.940697Z",
    "lead_time": 0.047
  },
  {
    "text": "因此，如何减少处理机执行部件的空闲时间成为提升处理机性能的关键",
    "id": 3298,
    "label": [
      {
        "start": 7,
        "end": 10,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 26,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4731,
    "created_at": "2024-08-01T09:26:18.633765Z",
    "updated_at": "2024-08-01T09:26:18.633765Z",
    "lead_time": 0.063
  },
  {
    "text": "而线程级并行threadlevelparallelism，TLP技术正是针对这一问题而引入的",
    "id": 3299,
    "label": [
      {
        "start": 1,
        "end": 6,
        "text": "线程级并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4732,
    "created_at": "2024-08-01T09:26:22.425525Z",
    "updated_at": "2024-08-01T09:26:22.425525Z",
    "lead_time": 2.912
  },
  {
    "text": "硬件线程的概念多任务系统必须解决的首要问题就是如何分配宝贵的处理机时间，这通常是由操作系统负责的",
    "id": 3300,
    "label": [
      {
        "start": 0,
        "end": 4,
        "text": "硬件线程",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 41,
        "end": 45,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 30,
        "end": 33,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4733,
    "created_at": "2024-08-01T09:26:23.112643Z",
    "updated_at": "2024-08-01T09:26:23.112643Z",
    "lead_time": 0.088
  },
  {
    "text": "操作系统除了负责管理用户程序的执行外，也需要处理各种系统任务",
    "id": 3301,
    "label": [
      {
        "start": 0,
        "end": 4,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 10,
        "end": 14,
        "text": "用户程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4734,
    "created_at": "2024-08-01T09:26:24.324830Z",
    "updated_at": "2024-08-01T09:26:24.324830Z",
    "lead_time": 0.507
  },
  {
    "text": "在操作系统中，通常使用进程process这一概念描述程序的动态执行过程",
    "id": 3302,
    "label": [
      {
        "start": 1,
        "end": 5,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 11,
        "end": 13,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 26,
        "end": 28,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4735,
    "created_at": "2024-08-01T09:26:25.032952Z",
    "updated_at": "2024-08-01T09:26:25.032952Z",
    "lead_time": 0.069
  },
  {
    "text": "通俗地讲，程序是静态实体，而进程是动态实体，是执行中的程序",
    "id": 3303,
    "label": [
      {
        "start": 5,
        "end": 7,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 14,
        "end": 16,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 27,
        "end": 29,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4736,
    "created_at": "2024-08-01T09:26:25.871872Z",
    "updated_at": "2024-08-01T09:26:25.871872Z",
    "lead_time": 0.113
  },
  {
    "text": "进程不仅仅包含程序代码，也包含了当前的状态这由程序计数器和处理机中的相关寄存器表示和资源",
    "id": 3304,
    "label": [
      {
        "start": 36,
        "end": 39,
        "text": "寄存器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 28,
        "text": "程序计数器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 29,
        "end": 32,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 0,
        "end": 2,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 7,
        "end": 9,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4737,
    "created_at": "2024-08-01T09:26:26.661990Z",
    "updated_at": "2024-08-01T09:26:26.662990Z",
    "lead_time": 0.09
  },
  {
    "text": "因此，如果两个用户用同样一段代码分别执行相同功能的程序，那么其中的每一个都是一个独立的进程",
    "id": 3305,
    "label": [
      {
        "start": 43,
        "end": 45,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 25,
        "end": 27,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4738,
    "created_at": "2024-08-01T09:26:27.472020Z",
    "updated_at": "2024-08-01T09:26:27.473019Z",
    "lead_time": 0.055
  },
  {
    "text": "虽然其代码是相同的，但是数据却未必相同",
    "id": 3306,
    "annotator": 1,
    "annotation_id": 4739,
    "created_at": "2024-08-01T09:26:28.147931Z",
    "updated_at": "2024-08-01T09:26:28.147931Z",
    "lead_time": 0.049
  },
  {
    "text": "传统的计算机系统把进程当作系统中的一个基本单位，操作系统将内存空间、IO设备和文件等资源分配给每个进程，调度和代码执行也以进程作为基本单位",
    "id": 3307,
    "label": [
      {
        "start": 24,
        "end": 28,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 3,
        "end": 8,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 34,
        "end": 38,
        "text": "IO设备",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 29,
        "end": 33,
        "text": "内存空间",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 9,
        "end": 11,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 49,
        "end": 51,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 61,
        "end": 63,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 22,
        "end": 23,
        "text": "位",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 68,
        "end": 69,
        "text": "位",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4740,
    "created_at": "2024-08-01T09:26:28.941788Z",
    "updated_at": "2024-08-01T09:26:28.941788Z",
    "lead_time": 0.13
  },
  {
    "text": "但进程调度是频繁进行的，因而在处理机从一个进程切换到另一个进程的过程中，系统要不断地进行资源的分配与回收、现场的保存与恢复等工作，为此付出了较大的时间与空间的开销",
    "id": 3308,
    "label": [
      {
        "start": 15,
        "end": 18,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 1,
        "end": 3,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 21,
        "end": 23,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 29,
        "end": 31,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4741,
    "created_at": "2024-08-01T09:26:29.780972Z",
    "updated_at": "2024-08-01T09:26:29.780972Z",
    "lead_time": 0.071
  },
  {
    "text": "因此，在现代操作系统中，大都引入线程作为进程概念的延伸，线程是在操作系统中描述能被独立执行的程序代码的基本单位",
    "id": 3309,
    "label": [
      {
        "start": 16,
        "end": 18,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 6,
        "end": 10,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 46,
        "end": 48,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 32,
        "end": 36,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 28,
        "end": 30,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 54,
        "end": 55,
        "text": "位",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4742,
    "created_at": "2024-08-01T09:26:30.497787Z",
    "updated_at": "2024-08-01T09:26:30.497787Z",
    "lead_time": 0.082
  },
  {
    "text": "进程只作为资源分配的单位，不再是调度和执行的基本单位；而每个进程又拥有若干线程，线程则是调度和执行的基本单位",
    "id": 3310,
    "label": [
      {
        "start": 0,
        "end": 2,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 37,
        "end": 39,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 30,
        "end": 32,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 11,
        "end": 12,
        "text": "位",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 25,
        "end": 26,
        "text": "位",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 53,
        "end": 54,
        "text": "位",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4743,
    "created_at": "2024-08-01T09:26:31.992661Z",
    "updated_at": "2024-08-01T09:26:31.992661Z",
    "lead_time": 0.123
  },
  {
    "text": "除了拥有一点儿在运行中必不可少的独立资源如程序计数器、一组寄存器和栈之外，线程与属于同一个进程的其他线程共享进程所拥有的全部资源",
    "id": 3311,
    "label": [
      {
        "start": 21,
        "end": 26,
        "text": "程序计数器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 29,
        "end": 32,
        "text": "寄存器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 45,
        "end": 47,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 37,
        "end": 39,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 50,
        "end": 52,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 54,
        "end": 56,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4744,
    "created_at": "2024-08-01T09:26:33.090056Z",
    "updated_at": "2024-08-01T09:26:33.090056Z",
    "lead_time": 0.221
  },
  {
    "text": "由于线程调度时不进行资源的分配与回收等操作，因而线程切换的开销比进程切换少得多",
    "id": 3312,
    "label": [
      {
        "start": 32,
        "end": 34,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 2,
        "end": 4,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 24,
        "end": 26,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4745,
    "created_at": "2024-08-01T09:26:34.135892Z",
    "updated_at": "2024-08-01T09:26:34.136638Z",
    "lead_time": 0.109
  },
  {
    "text": "在处理机设计中引入硬件线程hardwarethread的概念，其原理与操作系统中的软件多线程并行技术相似",
    "id": 3313,
    "label": [
      {
        "start": 43,
        "end": 48,
        "text": "多线程并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 9,
        "end": 13,
        "text": "硬件线程",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 35,
        "end": 39,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 1,
        "end": 4,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 41,
        "end": 43,
        "text": "软件",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4746,
    "created_at": "2024-08-01T09:26:35.135773Z",
    "updated_at": "2024-08-01T09:26:35.135773Z",
    "lead_time": 0.1
  },
  {
    "text": "硬件线程用来描述一个独立的指令流，而多个指令流能共享同一个支持多线程的处理机",
    "id": 3314,
    "label": [
      {
        "start": 0,
        "end": 4,
        "text": "硬件线程",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 35,
        "end": 38,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 16,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 20,
        "end": 23,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 32,
        "end": 34,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4747,
    "created_at": "2024-08-01T09:26:36.276709Z",
    "updated_at": "2024-08-01T09:26:36.276709Z",
    "lead_time": 0.113
  },
  {
    "text": "当一个指令流因故暂时不能执行时，可以转向执行另一个线程的指令流",
    "id": 3315,
    "label": [
      {
        "start": 3,
        "end": 6,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 25,
        "end": 27,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 28,
        "end": 31,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4748,
    "created_at": "2024-08-01T09:26:37.540920Z",
    "updated_at": "2024-08-01T09:26:37.540920Z",
    "lead_time": 0.089
  },
  {
    "text": "由于各个线程相互独立，因而大大降低了因单线程指令流中各条指令之间的相互依赖导致的指令流水线冲突现象，从而有效提高处理机执行单元的利用率",
    "id": 3316,
    "label": [
      {
        "start": 56,
        "end": 59,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 40,
        "end": 45,
        "text": "指令流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 59,
        "end": 63,
        "text": "执行单元",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 22,
        "end": 25,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 19,
        "end": 22,
        "text": "单线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 28,
        "end": 30,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4749,
    "created_at": "2024-08-01T09:26:38.488457Z",
    "updated_at": "2024-08-01T09:26:38.488457Z",
    "lead_time": 0.102
  },
  {
    "text": "因此，并行的概念就从指令级并行扩展至线程级并行",
    "id": 3317,
    "label": [
      {
        "start": 18,
        "end": 23,
        "text": "线程级并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 3,
        "end": 5,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 10,
        "end": 12,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4750,
    "created_at": "2024-08-01T09:26:39.668911Z",
    "updated_at": "2024-08-01T09:26:39.668911Z",
    "lead_time": 0.116
  },
  {
    "text": "图显示了一个支持两个线程的超标量处理机的指令执行实例",
    "id": 3318,
    "label": [
      {
        "start": 10,
        "end": 12,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 16,
        "end": 19,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4751,
    "created_at": "2024-08-01T09:26:41.551321Z",
    "updated_at": "2024-08-01T09:26:41.551321Z",
    "lead_time": 1.111
  },
  {
    "text": "其中，“A”表示线程A指令流A占用的周期，“B”表示线程B指令流B占用的周期",
    "id": 3319,
    "label": [
      {
        "start": 11,
        "end": 14,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 8,
        "end": 10,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 26,
        "end": 28,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 29,
        "end": 32,
        "text": "指令流",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4752,
    "created_at": "2024-08-01T09:26:42.418096Z",
    "updated_at": "2024-08-01T09:26:42.418096Z",
    "lead_time": 0.093
  },
  {
    "text": "在每个时钟周期内，所有的流水线都用于执行同一线程的指令，但在下一个时钟周期则可以选择另一个线程的指令并行执行",
    "id": 3320,
    "label": [
      {
        "start": 12,
        "end": 15,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 3,
        "end": 7,
        "text": "时钟周期",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 22,
        "end": 24,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 50,
        "end": 52,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 25,
        "end": 27,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 33,
        "end": 37,
        "text": "时钟周期",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 45,
        "end": 47,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 48,
        "end": 50,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4753,
    "created_at": "2024-08-01T09:26:43.447023Z",
    "updated_at": "2024-08-01T09:26:43.447023Z",
    "lead_time": 0.138
  },
  {
    "text": "细粒度多线程和粗粒度多线程根据多线程处理机的具体实现方法差异，又可以分为细粒度多线程交错多线程处理机和粗粒度多线程阻塞多线程处理机",
    "id": 3321,
    "label": [
      {
        "start": 18,
        "end": 21,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 47,
        "end": 50,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 62,
        "end": 65,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 11,
        "end": 13,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 16,
        "end": 18,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 45,
        "end": 47,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 55,
        "end": 57,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 60,
        "end": 62,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4754,
    "created_at": "2024-08-01T09:26:44.748510Z",
    "updated_at": "2024-08-01T09:26:44.748510Z",
    "lead_time": 0.204
  },
  {
    "text": "细粒度多线程如图a所示，处理机交替执行A、B两个线程的指令，在每个时钟周期都进行线程切换",
    "id": 3322,
    "label": [
      {
        "start": 33,
        "end": 37,
        "text": "时钟周期",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 12,
        "end": 15,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 27,
        "end": 29,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 24,
        "end": 26,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4755,
    "created_at": "2024-08-01T09:26:45.960850Z",
    "updated_at": "2024-08-01T09:26:45.960850Z",
    "lead_time": 0.121
  },
  {
    "text": "由于多个线程交替执行，并且处于阻塞状态的线程在切换时被跳过，故在一定程度上降低了指令阻塞造成的处理机吞吐率损失",
    "id": 3323,
    "label": [
      {
        "start": 47,
        "end": 50,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4756,
    "created_at": "2024-08-01T09:26:48.409872Z",
    "updated_at": "2024-08-01T09:26:48.409872Z",
    "lead_time": 1.498
  },
  {
    "text": "当然，每个线程的执行速度降低了，因为就绪状态的线程会因为其他线程的执行而延迟",
    "id": 3324,
    "label": [
      {
        "start": 5,
        "end": 7,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 30,
        "end": 32,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4757,
    "created_at": "2024-08-01T09:26:49.282684Z",
    "updated_at": "2024-08-01T09:26:49.282684Z",
    "lead_time": 0.087
  },
  {
    "text": "粗粒度多线程如图b所示，只有在遇到代价较高的长延迟操作如因cache缺失需要访问主存时才由处理机硬件进行线程切换，否则一直执行同一个线程的指令",
    "id": 3325,
    "label": [
      {
        "start": 29,
        "end": 34,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 45,
        "end": 48,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "主存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 48,
        "end": 50,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 69,
        "end": 71,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 52,
        "end": 54,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 66,
        "end": 68,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4758,
    "created_at": "2024-08-01T09:26:50.565755Z",
    "updated_at": "2024-08-01T09:26:50.565755Z",
    "lead_time": 0.157
  },
  {
    "text": "因此，粗粒度多线程比细粒度多线程有更低的线程切换开销，且每个线程的执行速度几乎不会降低",
    "id": 3326,
    "label": [
      {
        "start": 7,
        "end": 9,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 14,
        "end": 16,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 30,
        "end": 32,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4759,
    "created_at": "2024-08-01T09:26:51.782105Z",
    "updated_at": "2024-08-01T09:26:51.782105Z",
    "lead_time": 0.108
  },
  {
    "text": "但是粗粒度多线程也有弱点，就是在线程切换的过程中需要排空或填充指令流水线",
    "id": 3327,
    "label": [
      {
        "start": 6,
        "end": 8,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 31,
        "end": 36,
        "text": "指令流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 16,
        "end": 18,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4760,
    "created_at": "2024-08-01T09:26:53.016903Z",
    "updated_at": "2024-08-01T09:26:53.016903Z",
    "lead_time": 0.112
  },
  {
    "text": "只有当长延迟操作导致线程被阻塞的时间远长于指令流水线排空或填充的时间时，粗粒度多线程才是有意义的",
    "id": 3328,
    "label": [
      {
        "start": 21,
        "end": 26,
        "text": "指令流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 10,
        "end": 12,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4761,
    "created_at": "2024-08-01T09:26:53.856745Z",
    "updated_at": "2024-08-01T09:26:53.856745Z",
    "lead_time": 0.077
  },
  {
    "text": "多线程处理机通常为每个线程维护独立的程序计数器和数据寄存器",
    "id": 3329,
    "label": [
      {
        "start": 24,
        "end": 29,
        "text": "数据寄存器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 18,
        "end": 23,
        "text": "程序计数器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 1,
        "end": 3,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 3,
        "end": 6,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 11,
        "end": 13,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4762,
    "created_at": "2024-08-01T09:26:54.638478Z",
    "updated_at": "2024-08-01T09:26:54.638478Z",
    "lead_time": 0.092
  },
  {
    "text": "处理机硬件能够快速实现线程间的切换",
    "id": 3330,
    "label": [
      {
        "start": 11,
        "end": 13,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 3,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 3,
        "end": 5,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4763,
    "created_at": "2024-08-01T09:26:55.815720Z",
    "updated_at": "2024-08-01T09:26:55.815720Z",
    "lead_time": 0.101
  },
  {
    "text": "由于多个相互独立的线程共享执行单元的处理机时间，并且能够进行快速的线程切换，因而多线程处理机能够有效地减少垂直浪费情况，从而利用线程级并行来提高处理机资源的利用率",
    "id": 3331,
    "label": [
      {
        "start": 18,
        "end": 21,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 64,
        "end": 69,
        "text": "线程级并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 13,
        "end": 17,
        "text": "执行单元",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 9,
        "end": 11,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 33,
        "end": 35,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 43,
        "end": 46,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 72,
        "end": 75,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 41,
        "end": 43,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4764,
    "created_at": "2024-08-01T09:26:56.811578Z",
    "updated_at": "2024-08-01T09:26:56.811578Z",
    "lead_time": 0.121
  },
  {
    "text": "从图可以看出，多线程处理机虽然可以减少长延迟操作和资源冲突造成的处理机执行单元浪费，但并不能完全利用处理机中的所有资源",
    "id": 3332,
    "label": [
      {
        "start": 35,
        "end": 39,
        "text": "执行单元",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 10,
        "end": 13,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 32,
        "end": 35,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 50,
        "end": 53,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 8,
        "end": 10,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4765,
    "created_at": "2024-08-01T09:26:57.847978Z",
    "updated_at": "2024-08-01T09:26:57.847978Z",
    "lead_time": 0.144
  },
  {
    "text": "这是因为每个时钟周期执行的指令都来自同一个线程，因而不能有效地消除水平浪费",
    "id": 3333,
    "label": [
      {
        "start": 6,
        "end": 10,
        "text": "时钟周期",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 21,
        "end": 23,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4766,
    "created_at": "2024-08-01T09:26:58.912864Z",
    "updated_at": "2024-08-01T09:26:58.912864Z",
    "lead_time": 0.113
  },
  {
    "text": "为了最大限度地利用处理机资源，同时多线程simultaneousmultithreading，SMT技术被引入现代处理机中",
    "id": 3334,
    "label": [
      {
        "start": 9,
        "end": 12,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 57,
        "end": 60,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 18,
        "end": 20,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4767,
    "created_at": "2024-08-01T09:27:00.047047Z",
    "updated_at": "2024-08-01T09:27:00.048045Z",
    "lead_time": 0.104
  },
  {
    "text": "同时多线程技术结合了超标量技术和细粒度多线程技术的优点，允许在一个时钟周期内发射来自不同线程的多条指令，因而可以同时减少水平浪费和垂直浪费",
    "id": 3335,
    "label": [
      {
        "start": 2,
        "end": 7,
        "text": "多线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 10,
        "end": 15,
        "text": "超标量技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 33,
        "end": 37,
        "text": "时钟周期",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 49,
        "end": 51,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 44,
        "end": 46,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4768,
    "created_at": "2024-08-01T09:27:01.394385Z",
    "updated_at": "2024-08-01T09:27:01.394385Z",
    "lead_time": 0.106
  },
  {
    "text": "图显示了一个支持两个线程的同时多线程处理机的指令执行实例",
    "id": 3336,
    "label": [
      {
        "start": 10,
        "end": 12,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 22,
        "end": 24,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 18,
        "end": 21,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 16,
        "end": 18,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4769,
    "created_at": "2024-08-01T09:27:02.373822Z",
    "updated_at": "2024-08-01T09:27:02.373822Z",
    "lead_time": 0.09
  },
  {
    "text": "在一个时钟周期内，处理机可以执行来自不同线程的多条指令",
    "id": 3337,
    "label": [
      {
        "start": 9,
        "end": 12,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 3,
        "end": 7,
        "text": "时钟周期",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 25,
        "end": 27,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4770,
    "created_at": "2024-08-01T09:27:03.644565Z",
    "updated_at": "2024-08-01T09:27:03.644565Z",
    "lead_time": 0.14
  },
  {
    "text": "当其中某个线程由于长延迟操作或资源冲突而没有指令可以执行时，另一个线程甚至能够使用所有的指令发射时间",
    "id": 3338,
    "label": [
      {
        "start": 5,
        "end": 7,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 22,
        "end": 24,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 33,
        "end": 35,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 44,
        "end": 46,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4771,
    "created_at": "2024-08-01T09:27:04.740755Z",
    "updated_at": "2024-08-01T09:27:04.740755Z",
    "lead_time": 0.096
  },
  {
    "text": "因此，同时多线程技术既能够利用线程级并行减少垂直浪费，又能够在一个时钟周期内同时利用线程级并行和指令级并行来减少水平浪费，从而大大提高处理机的整体性能",
    "id": 3339,
    "label": [
      {
        "start": 5,
        "end": 10,
        "text": "多线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 15,
        "end": 20,
        "text": "线程级并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 33,
        "end": 37,
        "text": "时钟周期",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 67,
        "end": 70,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 42,
        "end": 47,
        "text": "线程级并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 48,
        "end": 50,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 51,
        "end": 53,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4772,
    "created_at": "2024-08-01T09:27:05.850951Z",
    "updated_at": "2024-08-01T09:27:05.850951Z",
    "lead_time": 0.159
  },
  {
    "text": "同时多线程技术是一种简单、低成本的并行技术",
    "id": 3340,
    "label": [
      {
        "start": 17,
        "end": 19,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 2,
        "end": 7,
        "text": "多线程技术",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4773,
    "created_at": "2024-08-01T09:27:06.918799Z",
    "updated_at": "2024-08-01T09:27:06.918799Z",
    "lead_time": 0.085
  },
  {
    "text": "与单线程处理机相比，同时多线程处理机只花费很小的代价，而性能得到很大改善",
    "id": 3341,
    "label": [
      {
        "start": 4,
        "end": 7,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 15,
        "end": 18,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 1,
        "end": 4,
        "text": "单线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4774,
    "created_at": "2024-08-01T09:27:07.924932Z",
    "updated_at": "2024-08-01T09:27:07.924932Z",
    "lead_time": 0.107
  },
  {
    "text": "在原有的单线程处理机内部为多个线程提供各自的程序计数器、相关寄存器以及其他运行状态信息，一个“物理”处理机被模拟成多个“逻辑”处理机，以便多个线程同步执行并共享处理机的执行资源",
    "id": 3342,
    "label": [
      {
        "start": 30,
        "end": 33,
        "text": "寄存器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 22,
        "end": 27,
        "text": "程序计数器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 5,
        "end": 7,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 7,
        "end": 10,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 50,
        "end": 53,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 15,
        "end": 17,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 63,
        "end": 66,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 80,
        "end": 83,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 71,
        "end": 73,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 73,
        "end": 75,
        "text": "同步",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4775,
    "created_at": "2024-08-01T09:27:09.194369Z",
    "updated_at": "2024-08-01T09:27:09.194881Z",
    "lead_time": 0.132
  },
  {
    "text": "应用程序无须做任何修改就可以使用多个逻辑处理机",
    "id": 3343,
    "label": [
      {
        "start": 18,
        "end": 23,
        "text": "逻辑处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 0,
        "end": 4,
        "text": "应用程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4776,
    "created_at": "2024-08-01T09:27:10.207983Z",
    "updated_at": "2024-08-01T09:27:10.207983Z",
    "lead_time": 0.082
  },
  {
    "text": "由于多个逻辑处理机共享处理机内核的执行单元、高速缓存和系统总线接口等资源，因而在实现多线程时多个逻辑处理机需要交替工作",
    "id": 3344,
    "label": [
      {
        "start": 27,
        "end": 31,
        "text": "系统总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 11,
        "end": 16,
        "text": "处理机内核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 4,
        "end": 9,
        "text": "逻辑处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 17,
        "end": 21,
        "text": "执行单元",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 22,
        "end": 26,
        "text": "高速缓存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 31,
        "end": 33,
        "text": "接口",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 43,
        "end": 45,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 48,
        "end": 53,
        "text": "逻辑处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4777,
    "created_at": "2024-08-01T09:27:13.147947Z",
    "updated_at": "2024-08-01T09:27:13.147947Z",
    "lead_time": 2.151
  },
  {
    "text": "如果多个线程同时需要某一个共享资源，只有一个线程能够使用该资源，其他线程要暂停并等待资源空闲时才能继续执行",
    "id": 3345,
    "label": [
      {
        "start": 4,
        "end": 6,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 22,
        "end": 24,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 34,
        "end": 36,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4778,
    "created_at": "2024-08-01T09:27:14.723925Z",
    "updated_at": "2024-08-01T09:27:14.723925Z",
    "lead_time": 0.68
  },
  {
    "text": "因此，同时多线程技术就性能提升而言远不能等同于多个相同时钟频率处理机核组合而成的多核处理机，但从性能价格比的角度看，同时多线程技术是一种对单线程处理机执行资源的有效而经济的优化手段",
    "id": 3346,
    "label": [
      {
        "start": 5,
        "end": 10,
        "text": "多线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 40,
        "end": 45,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 27,
        "end": 31,
        "text": "时钟频率",
        "labels": [
          "PERF"
        ]
      },
      {
        "start": 31,
        "end": 35,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 60,
        "end": 65,
        "text": "多线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 72,
        "end": 75,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 69,
        "end": 72,
        "text": "单线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4779,
    "created_at": "2024-08-01T09:27:16.446008Z",
    "updated_at": "2024-08-01T09:27:16.446008Z",
    "lead_time": 0.925
  },
  {
    "text": "由于同时运行的多个线程需要共享执行资源，因而处理机的实时调度机制非常复杂",
    "id": 3347,
    "label": [
      {
        "start": 22,
        "end": 25,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 9,
        "end": 11,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4780,
    "created_at": "2024-08-01T09:27:18.052040Z",
    "updated_at": "2024-08-01T09:27:18.052040Z",
    "lead_time": 0.858
  },
  {
    "text": "就调度策略而言，取指部件要在单线程执行时间延迟与系统整体性能之间取得平衡",
    "id": 3348,
    "label": [
      {
        "start": 17,
        "end": 21,
        "text": "执行时间",
        "labels": [
          "PERF"
        ]
      },
      {
        "start": 14,
        "end": 17,
        "text": "单线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 8,
        "end": 10,
        "text": "取指",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4781,
    "created_at": "2024-08-01T09:27:19.552685Z",
    "updated_at": "2024-08-01T09:27:19.552685Z",
    "lead_time": 0.689
  },
  {
    "text": "与单线程处理机相比，并发执行的多个线程必然拉长单个线程的执行时间，但处理机可以通过指定一个线程为最高优先级而减小其执行延迟，只有当优先线程阻塞时才考虑其他线程",
    "id": 3349,
    "label": [
      {
        "start": 28,
        "end": 32,
        "text": "执行时间",
        "labels": [
          "PERF"
        ]
      },
      {
        "start": 50,
        "end": 53,
        "text": "优先级",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 10,
        "end": 12,
        "text": "并发",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 2,
        "end": 4,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 17,
        "end": 19,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 4,
        "end": 7,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 25,
        "end": 27,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 45,
        "end": 47,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 67,
        "end": 69,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 34,
        "end": 37,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 77,
        "end": 79,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4782,
    "created_at": "2024-08-01T09:27:21.064605Z",
    "updated_at": "2024-08-01T09:27:21.064605Z",
    "lead_time": 0.725
  },
  {
    "text": "为了最大限度地提高处理机整体性能，同时多线程处理机也可以采用另外一种策略，即处理机的取指部件可以选择那些可以带来最大性能好处的线程优先取指并执行，代价是牺牲单个线程的执行时间延迟",
    "id": 3350,
    "label": [
      {
        "start": 83,
        "end": 87,
        "text": "执行时间",
        "labels": [
          "PERF"
        ]
      },
      {
        "start": 9,
        "end": 12,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 22,
        "end": 25,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 42,
        "end": 44,
        "text": "取指",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 63,
        "end": 65,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 38,
        "end": 41,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 80,
        "end": 82,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 67,
        "end": 69,
        "text": "取指",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4783,
    "created_at": "2024-08-01T09:27:22.490824Z",
    "updated_at": "2024-08-01T09:27:22.490824Z",
    "lead_time": 0.571
  },
  {
    "text": "为了实现同时多线程，处理机需要解决一系列问题",
    "id": 3351,
    "label": [
      {
        "start": 10,
        "end": 13,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 7,
        "end": 9,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4784,
    "created_at": "2024-08-01T09:27:23.777954Z",
    "updated_at": "2024-08-01T09:27:23.777954Z",
    "lead_time": 0.167
  },
  {
    "text": "例如，处理机内需要设置大量寄存器保存每个线程的现场信息，需要保证由于并发执行多个线程带来的cache冲突不会导致显著的性能下降，确保线程切换的开销尽可能小",
    "id": 3352,
    "label": [
      {
        "start": 13,
        "end": 16,
        "text": "寄存器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 45,
        "end": 50,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 3,
        "end": 6,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 34,
        "end": 36,
        "text": "并发",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 66,
        "end": 68,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4785,
    "created_at": "2024-08-01T09:27:26.151845Z",
    "updated_at": "2024-08-01T09:27:26.151845Z",
    "lead_time": 1.339
  },
  {
    "text": "超线程技术是同时多线程技术在英特尔系列处理机产品中的具体实现",
    "id": 3353,
    "label": [
      {
        "start": 8,
        "end": 13,
        "text": "多线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 5,
        "text": "超线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 19,
        "end": 22,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 14,
        "end": 17,
        "text": "英特尔",
        "labels": [
          "CORP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4786,
    "created_at": "2024-08-01T09:27:27.089592Z",
    "updated_at": "2024-08-01T09:27:27.089592Z",
    "lead_time": 0.127
  },
  {
    "text": "自年起，英特尔公司先后在其奔腾处理机和至强XEON处理机等产品中采用超线程技术",
    "id": 3354,
    "label": [
      {
        "start": 4,
        "end": 9,
        "text": "英特尔公司",
        "labels": [
          "CORP"
        ]
      },
      {
        "start": 34,
        "end": 39,
        "text": "超线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 15,
        "end": 18,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 25,
        "end": 28,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4787,
    "created_at": "2024-08-01T09:27:28.190479Z",
    "updated_at": "2024-08-01T09:27:28.191499Z",
    "lead_time": 0.1
  },
  {
    "text": "奔腾处理机和至强处理机基于同样的IntelNetBurst微体系结构microarchitecture，处理机体系结构在硅芯片上的具体实现",
    "id": 3355,
    "label": [
      {
        "start": 16,
        "end": 21,
        "text": "Intel",
        "labels": [
          "CORP"
        ]
      },
      {
        "start": 61,
        "end": 63,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 60,
        "end": 61,
        "text": "硅",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 2,
        "end": 5,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 8,
        "end": 11,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 52,
        "end": 55,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4788,
    "created_at": "2024-08-01T09:27:29.382637Z",
    "updated_at": "2024-08-01T09:27:29.382637Z",
    "lead_time": 0.11
  },
  {
    "text": "图显示了支持超线程技术的NetBurst微体系结构的流水线结构",
    "id": 3356,
    "label": [
      {
        "start": 6,
        "end": 11,
        "text": "超线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 26,
        "end": 29,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4789,
    "created_at": "2024-08-01T09:27:30.302842Z",
    "updated_at": "2024-08-01T09:27:30.302842Z",
    "lead_time": 0.079
  },
  {
    "text": "每条指令的执行过程都需要经过个功能段组成的流水线",
    "id": 3357,
    "label": [
      {
        "start": 21,
        "end": 24,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 2,
        "end": 4,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4790,
    "created_at": "2024-08-01T09:27:31.427870Z",
    "updated_at": "2024-08-01T09:27:31.427870Z",
    "lead_time": 0.133
  },
  {
    "text": "图支持超线程技术的NetBurst微体系结构的流水线结构原有的流水线只支持单线程运行",
    "id": 3358,
    "label": [
      {
        "start": 3,
        "end": 8,
        "text": "超线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 23,
        "end": 26,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 37,
        "end": 40,
        "text": "单线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 31,
        "end": 34,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4791,
    "created_at": "2024-08-01T09:27:32.579427Z",
    "updated_at": "2024-08-01T09:27:32.579427Z",
    "lead_time": 0.107
  },
  {
    "text": "统计表明，单线程的NetBurst微体系结构的流水线在执行典型的指令序列时仅仅利用了大约的流水线资源",
    "id": 3359,
    "label": [
      {
        "start": 32,
        "end": 36,
        "text": "指令序列",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 26,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 5,
        "end": 8,
        "text": "单线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 45,
        "end": 48,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4792,
    "created_at": "2024-08-01T09:27:33.561016Z",
    "updated_at": "2024-08-01T09:27:33.561016Z",
    "lead_time": 0.082
  },
  {
    "text": "为了支持两个硬件线程同时运行，需要对流水线进行改造",
    "id": 3360,
    "label": [
      {
        "start": 6,
        "end": 10,
        "text": "硬件线程",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 18,
        "end": 21,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4793,
    "created_at": "2024-08-01T09:27:35.869010Z",
    "updated_at": "2024-08-01T09:27:35.869010Z",
    "lead_time": 1.355
  },
  {
    "text": "改造的方式是让每级流水线中的资源通过三种方式之一复用于两个线程：复制、分区或共享",
    "id": 3361,
    "label": [
      {
        "start": 9,
        "end": 12,
        "text": "流水线",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 29,
        "end": 31,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4794,
    "created_at": "2024-08-01T09:27:36.858639Z",
    "updated_at": "2024-08-01T09:27:36.858639Z",
    "lead_time": 0.098
  },
  {
    "text": "其中，复制方式是在处理机设计时分别为两个线程设置独立的部件",
    "id": 3362,
    "label": [
      {
        "start": 9,
        "end": 12,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4795,
    "created_at": "2024-08-01T09:27:37.726394Z",
    "updated_at": "2024-08-01T09:27:37.726394Z",
    "lead_time": 0.075
  },
  {
    "text": "被复制的资源包括所有的处理机状态、指令指针IP程序计数器寄存器、寄存器重命名部件和一些简单资源如指令TLB等",
    "id": 3363,
    "label": [
      {
        "start": 28,
        "end": 31,
        "text": "寄存器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 48,
        "end": 53,
        "text": "指令TLB",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 28,
        "text": "程序计数器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 11,
        "end": 14,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 17,
        "end": 19,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 32,
        "end": 35,
        "text": "寄存器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 19,
        "end": 21,
        "text": "指针",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4796,
    "created_at": "2024-08-01T09:27:38.648767Z",
    "updated_at": "2024-08-01T09:27:38.649756Z",
    "lead_time": 0.107
  },
  {
    "text": "复制这些资源仅仅会少许提高处理机的成本，而每个线程使用这些资源的方式与单线程相同",
    "id": 3364,
    "label": [
      {
        "start": 13,
        "end": 16,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 35,
        "end": 38,
        "text": "单线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4797,
    "created_at": "2024-08-01T09:27:40.114921Z",
    "updated_at": "2024-08-01T09:27:40.114921Z",
    "lead_time": 0.104
  },
  {
    "text": "分区方式则是在处理机设计时把原有的用于单线程的独立资源分割成两部分，分别供两个线程使用",
    "id": 3365,
    "label": [
      {
        "start": 7,
        "end": 10,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 19,
        "end": 22,
        "text": "单线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 39,
        "end": 41,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4798,
    "created_at": "2024-08-01T09:27:41.056096Z",
    "updated_at": "2024-08-01T09:27:41.056096Z",
    "lead_time": 0.075
  },
  {
    "text": "采用分区方式的主要是各种缓冲区和队列，如重排序缓冲区、取数存数缓冲区和各级队列等",
    "id": 3366,
    "label": [
      {
        "start": 16,
        "end": 18,
        "text": "队列",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 37,
        "end": 39,
        "text": "队列",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4799,
    "created_at": "2024-08-01T09:27:42.145927Z",
    "updated_at": "2024-08-01T09:27:42.145927Z",
    "lead_time": 0.081
  },
  {
    "text": "与单线程相比，每个线程使用的缓冲区或队列的容量减半，而处理机成本并没有增加",
    "id": 3367,
    "label": [
      {
        "start": 27,
        "end": 30,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 1,
        "end": 4,
        "text": "单线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 18,
        "end": 20,
        "text": "队列",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 9,
        "end": 11,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4800,
    "created_at": "2024-08-01T09:27:43.119751Z",
    "updated_at": "2024-08-01T09:27:43.119751Z",
    "lead_time": 0.124
  },
  {
    "text": "共享方式则是由处理机在执行指令的过程中根据使用资源的需要在两个线程之间动态分享资源",
    "id": 3368,
    "label": [
      {
        "start": 7,
        "end": 10,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 31,
        "end": 33,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4801,
    "created_at": "2024-08-01T09:27:44.241825Z",
    "updated_at": "2024-08-01T09:27:44.241825Z",
    "lead_time": 0.126
  },
  {
    "text": "乱序执行部件和cache采用共享方式复用",
    "id": 3369,
    "label": [
      {
        "start": 7,
        "end": 12,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4802,
    "created_at": "2024-08-01T09:27:45.300722Z",
    "updated_at": "2024-08-01T09:27:45.300722Z",
    "lead_time": 0.084
  },
  {
    "text": "这种方式同样不增加处理机成本，但单线程运行时存在的资源闲置得到有效改善",
    "id": 3370,
    "label": [
      {
        "start": 9,
        "end": 12,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 16,
        "end": 19,
        "text": "单线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4803,
    "created_at": "2024-08-01T09:27:46.265561Z",
    "updated_at": "2024-08-01T09:27:46.265561Z",
    "lead_time": 0.082
  },
  {
    "text": "由于不同的资源采用不同的复用方式，因此当指令在不同的资源之间转移时，处理机需在图中箭头和多路开关标识的选择点根据需要动态选择能够使用下级资源的线程",
    "id": 3371,
    "label": [
      {
        "start": 34,
        "end": 37,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 71,
        "end": 73,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4804,
    "created_at": "2024-08-01T09:27:47.442959Z",
    "updated_at": "2024-08-01T09:27:47.442959Z",
    "lead_time": 0.121
  },
  {
    "text": "多线程技术只对传统的单线程超标量处理机结构做了很少改动，但却获得很大的性能提升",
    "id": 3372,
    "label": [
      {
        "start": 0,
        "end": 5,
        "text": "多线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 10,
        "end": 13,
        "text": "单线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 16,
        "end": 19,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4805,
    "created_at": "2024-08-01T09:27:48.530790Z",
    "updated_at": "2024-08-01T09:27:48.530790Z",
    "lead_time": 0.096
  },
  {
    "text": "启用超线程技术的内核比禁用超线程技术的内核吞吐率要高出",
    "id": 3373,
    "label": [
      {
        "start": 2,
        "end": 7,
        "text": "超线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 13,
        "end": 18,
        "text": "超线程技术",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4806,
    "created_at": "2024-08-01T09:27:49.595458Z",
    "updated_at": "2024-08-01T09:27:49.595458Z",
    "lead_time": 0.113
  },
  {
    "text": "当然，超线程技术需要解决一系列复杂的技术问题",
    "id": 3374,
    "label": [
      {
        "start": 3,
        "end": 8,
        "text": "超线程技术",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4807,
    "created_at": "2024-08-01T09:27:50.549868Z",
    "updated_at": "2024-08-01T09:27:50.549868Z",
    "lead_time": 0.074
  },
  {
    "text": "例如，作业调度策略、取指和发射策略、寄存器回收机制、存储系统层次设计等比单线程处理机复杂许多",
    "id": 3375,
    "label": [
      {
        "start": 18,
        "end": 21,
        "text": "寄存器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 26,
        "end": 30,
        "text": "存储系统",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 10,
        "end": 12,
        "text": "取指",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 39,
        "end": 42,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 36,
        "end": 39,
        "text": "单线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4808,
    "created_at": "2024-08-01T09:27:51.598084Z",
    "updated_at": "2024-08-01T09:27:51.598084Z",
    "lead_time": 0.115
  },
  {
    "text": "多处理机系统由多个独立的处理机组成，每个处理机能够独立执行自己的程序",
    "id": 3376,
    "label": [
      {
        "start": 0,
        "end": 6,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 32,
        "end": 34,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 12,
        "end": 15,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 20,
        "end": 23,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4809,
    "created_at": "2024-08-01T09:27:56.870037Z",
    "updated_at": "2024-08-01T09:27:56.871038Z",
    "lead_time": 4.13
  },
  {
    "text": "现有的多处理机系统分为如下四种类型：并行向量处理机PVP、对称多处理机SMP、大规模并行处理机MPP、分布共享存储器多处理机DSM，如图所示",
    "id": 3377,
    "label": [
      {
        "start": 3,
        "end": 9,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 31,
        "end": 35,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 58,
        "end": 62,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 22,
        "end": 25,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 44,
        "end": 47,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 55,
        "end": 58,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 18,
        "end": 20,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 42,
        "end": 44,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4810,
    "created_at": "2024-08-01T09:27:57.737823Z",
    "updated_at": "2024-08-01T09:27:57.737823Z",
    "lead_time": 0.119
  },
  {
    "text": "并行向量处理机见图a",
    "id": 3378,
    "label": [
      {
        "start": 4,
        "end": 7,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 0,
        "end": 2,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4811,
    "created_at": "2024-08-01T09:27:59.811867Z",
    "updated_at": "2024-08-01T09:27:59.811867Z",
    "lead_time": 1.243
  },
  {
    "text": "它是由少数几台巨型向量处理机采用共享存储器方式互连而成，在这种类型中，处理机数目不可能很多",
    "id": 3379,
    "label": [
      {
        "start": 11,
        "end": 14,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 35,
        "end": 38,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 18,
        "end": 21,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4812,
    "created_at": "2024-08-01T09:28:02.020710Z",
    "updated_at": "2024-08-01T09:28:02.020710Z",
    "lead_time": 1.47
  },
  {
    "text": "对称多处理机见图b",
    "id": 3380,
    "label": [
      {
        "start": 2,
        "end": 6,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4813,
    "created_at": "2024-08-01T09:28:04.041613Z",
    "updated_at": "2024-08-01T09:28:04.041613Z",
    "lead_time": 1.304
  },
  {
    "text": "它由一组处理机和一组存储器模块经过互联网络连接而成",
    "id": 3381,
    "label": [
      {
        "start": 10,
        "end": 13,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 4,
        "end": 7,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4814,
    "created_at": "2024-08-01T09:28:12.273915Z",
    "updated_at": "2024-08-01T09:28:12.273915Z",
    "lead_time": 7.37
  },
  {
    "text": "有多个处理机且是对称的，每台处理机的能力都完全相同",
    "id": 3382,
    "label": [
      {
        "start": 3,
        "end": 6,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 14,
        "end": 17,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4815,
    "created_at": "2024-08-01T09:28:13.158069Z",
    "updated_at": "2024-08-01T09:28:13.158069Z",
    "lead_time": 0.148
  },
  {
    "text": "每次访问存储器时，数据在处理机和存储器模块间的传送都要经过互联网络",
    "id": 3383,
    "label": [
      {
        "start": 16,
        "end": 21,
        "text": "存储器模块",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 12,
        "end": 15,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 4,
        "end": 7,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4816,
    "created_at": "2024-08-01T09:28:16.074882Z",
    "updated_at": "2024-08-01T09:28:16.074882Z",
    "lead_time": 2.031
  },
  {
    "text": "由于是紧耦合系统，不管访问的数据在哪一个存储器模块中，访问存储器所需的延迟时间都是一样的",
    "id": 3384,
    "label": [
      {
        "start": 20,
        "end": 23,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 29,
        "end": 32,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4817,
    "created_at": "2024-08-01T09:28:16.969960Z",
    "updated_at": "2024-08-01T09:28:16.969960Z",
    "lead_time": 0.083
  },
  {
    "text": "分布共享存储器多处理机见图c",
    "id": 3385,
    "label": [
      {
        "start": 7,
        "end": 11,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 4,
        "end": 7,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4818,
    "created_at": "2024-08-01T09:28:17.806601Z",
    "updated_at": "2024-08-01T09:28:17.806601Z",
    "lead_time": 0.075
  },
  {
    "text": "同PVP和SMP一样，它也属于紧耦合系统",
    "id": 3386,
    "annotator": 1,
    "annotation_id": 4819,
    "created_at": "2024-08-01T09:28:18.943996Z",
    "updated_at": "2024-08-01T09:28:18.943996Z",
    "lead_time": 0.075
  },
  {
    "text": "它的共享存储器分布在各台处理机中，每台处理机都带有自己的本地存储器，组成一个处理机存储器单元",
    "id": 3387,
    "label": [
      {
        "start": 12,
        "end": 15,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 19,
        "end": 22,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 38,
        "end": 41,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 4,
        "end": 7,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 30,
        "end": 33,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 41,
        "end": 44,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4820,
    "created_at": "2024-08-01T09:28:20.028806Z",
    "updated_at": "2024-08-01T09:28:20.028806Z",
    "lead_time": 0.124
  },
  {
    "text": "但是这些分布在各台处理机中的实际存储器又合在一起统一编址，在逻辑上组成一个共享存储器",
    "id": 3388,
    "label": [
      {
        "start": 24,
        "end": 28,
        "text": "统一编址",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 9,
        "end": 12,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 16,
        "end": 19,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 39,
        "end": 42,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4821,
    "created_at": "2024-08-01T09:28:21.262809Z",
    "updated_at": "2024-08-01T09:28:21.262809Z",
    "lead_time": 0.098
  },
  {
    "text": "这些处理机存储器单元通过互联网络连接在一起，每台处理机除了能访问本地存储器外，还能通过互联网络直接访问在其他处理机存储器单元中的“远程存储器”",
    "id": 3389,
    "label": [
      {
        "start": 2,
        "end": 5,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 24,
        "end": 27,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 54,
        "end": 57,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 5,
        "end": 8,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 34,
        "end": 37,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 57,
        "end": 60,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 67,
        "end": 70,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4822,
    "created_at": "2024-08-01T09:28:22.312689Z",
    "updated_at": "2024-08-01T09:28:22.312689Z",
    "lead_time": 0.113
  },
  {
    "text": "处理机在访问远程存储器时所需的延迟时间与访问本地存储器时所需的延迟时间是不一样的，访问本地存储器要快得多",
    "id": 3390,
    "label": [
      {
        "start": 0,
        "end": 3,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 8,
        "end": 11,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 24,
        "end": 27,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 45,
        "end": 48,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4823,
    "created_at": "2024-08-01T09:28:23.587906Z",
    "updated_at": "2024-08-01T09:28:23.587906Z",
    "lead_time": 0.13
  },
  {
    "text": "大规模并行处理机见图d",
    "id": 3391,
    "label": [
      {
        "start": 5,
        "end": 8,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 3,
        "end": 5,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4824,
    "created_at": "2024-08-01T09:28:24.652601Z",
    "updated_at": "2024-08-01T09:28:24.652601Z",
    "lead_time": 0.082
  },
  {
    "text": "它属于松耦合多处理机系统",
    "id": 3392,
    "label": [
      {
        "start": 6,
        "end": 12,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4825,
    "created_at": "2024-08-01T09:28:25.592955Z",
    "updated_at": "2024-08-01T09:28:25.592955Z",
    "lead_time": 0.078
  },
  {
    "text": "每个计算机模块称为一个结点",
    "id": 3393,
    "label": [
      {
        "start": 2,
        "end": 5,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4826,
    "created_at": "2024-08-01T09:28:27.042459Z",
    "updated_at": "2024-08-01T09:28:27.042459Z",
    "lead_time": 0.479
  },
  {
    "text": "每个结点有一台处理机和它的局部存储器LM、结点接口NIC，有的还有本身的IO设备，这几部分通过结点内的总线连在一起",
    "id": 3394,
    "label": [
      {
        "start": 36,
        "end": 40,
        "text": "IO设备",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 7,
        "end": 10,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 51,
        "end": 53,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "接口",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 15,
        "end": 18,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 26,
        "end": 28,
        "text": "IC",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4827,
    "created_at": "2024-08-01T09:28:27.998989Z",
    "updated_at": "2024-08-01T09:28:27.998989Z",
    "lead_time": 0.167
  },
  {
    "text": "计算机模块又通过结点接口连接到互联网络上",
    "id": 3395,
    "label": [
      {
        "start": 0,
        "end": 3,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 10,
        "end": 12,
        "text": "接口",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4828,
    "created_at": "2024-08-01T09:28:29.201553Z",
    "updated_at": "2024-08-01T09:28:29.201553Z",
    "lead_time": 0.083
  },
  {
    "text": "由于VLSI技术的发展，整个结点上的计算机已可以做在一个芯片上",
    "id": 3396,
    "label": [
      {
        "start": 18,
        "end": 21,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 28,
        "end": 30,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 2,
        "end": 8,
        "text": "VLSI技术",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4829,
    "created_at": "2024-08-01T09:28:30.156512Z",
    "updated_at": "2024-08-01T09:28:30.156512Z",
    "lead_time": 0.084
  },
  {
    "text": "第章并行组织与结构在这种松耦合的多计算机系统中，各台计算机间传送数据的速度低，延迟时间长，且各结点间的距离是不相等的，因此把经常要在结点间传送数据的任务放在相邻的结点中执行",
    "id": 3397,
    "label": [
      {
        "start": 16,
        "end": 22,
        "text": "多计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 26,
        "end": 29,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 2,
        "end": 4,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4830,
    "created_at": "2024-08-01T09:28:41.818658Z",
    "updated_at": "2024-08-01T09:28:41.818658Z",
    "lead_time": 10.749
  },
  {
    "text": "由于松耦合的多计算机系统的互联网络的成本低得多，故同紧耦合多处理机系统相比，其优点是可以组成计算机数目很多的大规模并行处理系统",
    "id": 3398,
    "label": [
      {
        "start": 29,
        "end": 35,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 6,
        "end": 12,
        "text": "多计算机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 46,
        "end": 49,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 57,
        "end": 59,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4831,
    "created_at": "2024-08-01T09:28:42.748876Z",
    "updated_at": "2024-08-01T09:28:42.749872Z",
    "lead_time": 0.131
  },
  {
    "text": "也就是说，可以比较经济合理地用微处理机构成几百台乃至几千台的多计算机系统",
    "id": 3399,
    "label": [
      {
        "start": 15,
        "end": 19,
        "text": "微处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 30,
        "end": 36,
        "text": "多计算机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4832,
    "created_at": "2024-08-01T09:28:44.121589Z",
    "updated_at": "2024-08-01T09:28:44.121589Z",
    "lead_time": 0.085
  },
  {
    "text": "鉴于当前并行处理系统的发展趋势，下面重点讲授对称多处理机SMP",
    "id": 3400,
    "label": [
      {
        "start": 24,
        "end": 28,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4833,
    "created_at": "2024-08-01T09:28:45.006847Z",
    "updated_at": "2024-08-01T09:28:45.006847Z",
    "lead_time": 0.071
  },
  {
    "text": "不久前，所有的单用户个人计算机和大多数工作站还只含有单一通用微处理机",
    "id": 3401,
    "label": [
      {
        "start": 12,
        "end": 15,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 30,
        "end": 34,
        "text": "微处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4834,
    "created_at": "2024-08-01T09:28:46.126045Z",
    "updated_at": "2024-08-01T09:28:46.126045Z",
    "lead_time": 0.085
  },
  {
    "text": "随着性能需求的增长和微处理机价格的持续下跌，计算机制造商推出了SMP系统",
    "id": 3402,
    "label": [
      {
        "start": 10,
        "end": 14,
        "text": "微处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 22,
        "end": 25,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4835,
    "created_at": "2024-08-01T09:28:47.129695Z",
    "updated_at": "2024-08-01T09:28:47.129695Z",
    "lead_time": 0.095
  },
  {
    "text": "SMP既指计算机硬件体系结构，也指反映此体系结构的操作系统行为",
    "id": 3403,
    "label": [
      {
        "start": 25,
        "end": 29,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 5,
        "end": 8,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 8,
        "end": 10,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4836,
    "created_at": "2024-08-01T09:28:48.649921Z",
    "updated_at": "2024-08-01T09:28:48.649921Z",
    "lead_time": 0.551
  },
  {
    "text": "SMP定义为具有如下特征的独立计算机系统",
    "id": 3404,
    "label": [
      {
        "start": 15,
        "end": 20,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4837,
    "created_at": "2024-08-01T09:28:49.489562Z",
    "updated_at": "2024-08-01T09:28:49.489562Z",
    "lead_time": 0.071
  },
  {
    "text": "有两个以上功能相似的处理机",
    "id": 3405,
    "label": [
      {
        "start": 10,
        "end": 13,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4838,
    "created_at": "2024-08-01T09:28:50.342438Z",
    "updated_at": "2024-08-01T09:28:50.342438Z",
    "lead_time": 0.059
  },
  {
    "text": "这些处理机共享同一主存和IO设施，以总线或其他内部连接机制互连在一起；这样，存储器存取时间对每个处理机都是大致相同的",
    "id": 3406,
    "label": [
      {
        "start": 9,
        "end": 11,
        "text": "主存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 41,
        "end": 45,
        "text": "存取时间",
        "labels": [
          "PERF"
        ]
      },
      {
        "start": 2,
        "end": 5,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 38,
        "end": 41,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 18,
        "end": 20,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 48,
        "end": 51,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4839,
    "created_at": "2024-08-01T09:28:55.349364Z",
    "updated_at": "2024-08-01T09:28:55.349364Z",
    "lead_time": 3.92
  },
  {
    "text": "所有处理机共享对IO设备的访问，或通过同一通道，或通过提供到同一设备路径的不同通道",
    "id": 3407,
    "label": [
      {
        "start": 2,
        "end": 5,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 8,
        "end": 12,
        "text": "IO设备",
        "labels": [
          "IO"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4840,
    "created_at": "2024-08-01T09:28:57.594534Z",
    "updated_at": "2024-08-01T09:28:57.594534Z",
    "lead_time": 1.284
  },
  {
    "text": "所有处理机能完成同样的功能",
    "id": 3408,
    "label": [
      {
        "start": 2,
        "end": 5,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4841,
    "created_at": "2024-08-01T09:28:58.595658Z",
    "updated_at": "2024-08-01T09:28:58.595658Z",
    "lead_time": 0.096
  },
  {
    "text": "系统被一个集中式操作系统OS控制",
    "id": 3409,
    "label": [
      {
        "start": 8,
        "end": 12,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4842,
    "created_at": "2024-08-01T09:28:59.769501Z",
    "updated_at": "2024-08-01T09:28:59.770503Z",
    "lead_time": 0.079
  },
  {
    "text": "OS提供各处理机及其程序之间的作业级、任务级、文件级和数据元素级的交互",
    "id": 3410,
    "label": [
      {
        "start": 5,
        "end": 8,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 10,
        "end": 12,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4843,
    "created_at": "2024-08-01T09:29:00.841875Z",
    "updated_at": "2024-08-01T09:29:00.841875Z",
    "lead_time": 0.112
  },
  {
    "text": "其中，是十分明显的",
    "id": 3411,
    "annotator": 1,
    "annotation_id": 4844,
    "created_at": "2024-08-01T09:29:01.836840Z",
    "updated_at": "2024-08-01T09:29:01.836840Z",
    "lead_time": 0.073
  },
  {
    "text": "表示了SMP与机群系统之类的松耦合多处理系统的对照",
    "id": 3412,
    "annotator": 1,
    "annotation_id": 4845,
    "created_at": "2024-08-01T09:29:02.771786Z",
    "updated_at": "2024-08-01T09:29:02.771786Z",
    "lead_time": 0.143
  },
  {
    "text": "后者的交互物理单位通常是消息或整个文件；而在SMP中，个别的数据元素能成为交互级别，于是处理机间能够有高度的相互协作",
    "id": 3413,
    "label": [
      {
        "start": 44,
        "end": 47,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 8,
        "end": 9,
        "text": "位",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4846,
    "created_at": "2024-08-01T09:29:03.946557Z",
    "updated_at": "2024-08-01T09:29:03.946557Z",
    "lead_time": 0.098
  },
  {
    "text": "SMP的操作系统能跨越所有处理机来调度进程或线程",
    "id": 3414,
    "label": [
      {
        "start": 4,
        "end": 8,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 13,
        "end": 16,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 19,
        "end": 21,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 22,
        "end": 24,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4847,
    "created_at": "2024-08-01T09:29:42.184699Z",
    "updated_at": "2024-08-01T09:29:42.184699Z",
    "lead_time": 37.319
  },
  {
    "text": "SMP有如下几个超过单处理机的优点",
    "id": 3415,
    "label": [
      {
        "start": 10,
        "end": 14,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4848,
    "created_at": "2024-08-01T09:29:43.379937Z",
    "updated_at": "2024-08-01T09:29:43.379937Z",
    "lead_time": 0.146
  },
  {
    "text": "性能如果可以对一台计算机完成的工作进行组织，使得某些工作部分能够并行完成；则具有多个处理机的系统与具有同样类型的单处理机的系统相比，将产生更高的性能",
    "id": 3416,
    "label": [
      {
        "start": 56,
        "end": 60,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 42,
        "end": 45,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 9,
        "end": 12,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 32,
        "end": 34,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4849,
    "created_at": "2024-08-01T09:29:44.504855Z",
    "updated_at": "2024-08-01T09:29:44.504855Z",
    "lead_time": 0.103
  },
  {
    "text": "可用性在一个对称多处理机系统中，所有处理机都能完成同样的功能，故单个处理机的故障不会造成系统的停机，系统在性能降低的情况下继续运行",
    "id": 3417,
    "label": [
      {
        "start": 9,
        "end": 12,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 18,
        "end": 21,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 34,
        "end": 37,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4850,
    "created_at": "2024-08-01T09:29:45.868497Z",
    "updated_at": "2024-08-01T09:29:45.868497Z",
    "lead_time": 0.293
  },
  {
    "text": "增量式增长用户可以通过在系统中添加处理机来提高系统性能",
    "id": 3418,
    "label": [
      {
        "start": 17,
        "end": 20,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4851,
    "created_at": "2024-08-01T09:29:47.189668Z",
    "updated_at": "2024-08-01T09:29:47.190670Z",
    "lead_time": 0.106
  },
  {
    "text": "可扩展性厂商能提供一个产品范围，它们基于系统中配置的处理机数目不同而有不同的价格和性能特征",
    "id": 3419,
    "label": [
      {
        "start": 26,
        "end": 29,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4852,
    "created_at": "2024-08-01T09:29:48.437666Z",
    "updated_at": "2024-08-01T09:29:48.437666Z",
    "lead_time": 0.125
  },
  {
    "text": "SMP的一个有吸引力的特点是：多个处理机的存在对用户是透明的；由操作系统实际关注各个处理机上进程或线程的调度，以及处理机间的同步",
    "id": 3420,
    "label": [
      {
        "start": 32,
        "end": 36,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 17,
        "end": 20,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 46,
        "end": 48,
        "text": "进程",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 62,
        "end": 64,
        "text": "同步",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 49,
        "end": 51,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 42,
        "end": 45,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 57,
        "end": 60,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4853,
    "created_at": "2024-08-01T09:29:51.282675Z",
    "updated_at": "2024-08-01T09:29:51.282675Z",
    "lead_time": 1.572
  },
  {
    "text": "对个人计算机、工作站和服务器而言，互连机构使用分时共享总线",
    "id": 3421,
    "label": [
      {
        "start": 3,
        "end": 6,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 27,
        "end": 29,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4854,
    "created_at": "2024-08-01T09:29:52.575597Z",
    "updated_at": "2024-08-01T09:29:52.575597Z",
    "lead_time": 0.085
  },
  {
    "text": "分时共享总线是构成一个多处理机系统的最简单机构",
    "id": 3422,
    "label": [
      {
        "start": 11,
        "end": 17,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4855,
    "created_at": "2024-08-01T09:29:53.504793Z",
    "updated_at": "2024-08-01T09:29:53.504793Z",
    "lead_time": 0.075
  },
  {
    "text": "结构和界面基本上同于使用总线互连的单处理机系统",
    "id": 3423,
    "label": [
      {
        "start": 17,
        "end": 23,
        "text": "单处理机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 12,
        "end": 14,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4856,
    "created_at": "2024-08-01T09:29:54.977788Z",
    "updated_at": "2024-08-01T09:29:54.977788Z",
    "lead_time": 0.426
  },
  {
    "text": "总线由控制、地址和数据线组成",
    "id": 3424,
    "label": [
      {
        "start": 0,
        "end": 2,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 9,
        "end": 12,
        "text": "数据线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 6,
        "end": 8,
        "text": "地址",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4857,
    "created_at": "2024-08-01T09:29:55.920608Z",
    "updated_at": "2024-08-01T09:29:55.920608Z",
    "lead_time": 0.091
  },
  {
    "text": "为便利来自IO处理器的DMA传送，应具备如下特征",
    "id": 3425,
    "label": [
      {
        "start": 11,
        "end": 16,
        "text": "DMA传送",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 7,
        "end": 10,
        "text": "处理器",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4858,
    "created_at": "2024-08-01T09:29:57.125596Z",
    "updated_at": "2024-08-01T09:29:57.125596Z",
    "lead_time": 0.088
  },
  {
    "text": "寻址必须能区别总线上各模块，以确定数据的源和目标",
    "id": 3426,
    "label": [
      {
        "start": 0,
        "end": 2,
        "text": "寻址",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 7,
        "end": 9,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4859,
    "created_at": "2024-08-01T09:29:58.020989Z",
    "updated_at": "2024-08-01T09:29:58.020989Z",
    "lead_time": 0.08
  },
  {
    "text": "仲裁任何IO模块都能临时具备主控器master功能",
    "id": 3427,
    "label": [
      {
        "start": 4,
        "end": 8,
        "text": "IO模块",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4860,
    "created_at": "2024-08-01T09:29:59.190707Z",
    "updated_at": "2024-08-01T09:29:59.190707Z",
    "lead_time": 0.13
  },
  {
    "text": "要提供一种机制来对总线控制的竞争请求进行仲裁，可使用某种类型的优先级策略",
    "id": 3428,
    "label": [
      {
        "start": 31,
        "end": 34,
        "text": "优先级",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 9,
        "end": 11,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4861,
    "created_at": "2024-08-01T09:30:00.398926Z",
    "updated_at": "2024-08-01T09:30:00.398926Z",
    "lead_time": 0.097
  },
  {
    "text": "分时共享当一个模块正在控制总线时，其他模块是被锁住的，而且如果需要，应能挂起它的操作直到当前的总线访问完成",
    "id": 3429,
    "label": [
      {
        "start": 11,
        "end": 15,
        "text": "控制总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 47,
        "end": 49,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4862,
    "created_at": "2024-08-01T09:30:01.302621Z",
    "updated_at": "2024-08-01T09:30:01.302621Z",
    "lead_time": 0.078
  },
  {
    "text": "这些单处理机特征在对称多处理机配置中是直接可用的，但可能会出现多个处理机以及多个IO适配器都试图掌管总线，并对一个或多个存储器模块进行存取操作的更为复杂的情况",
    "id": 3430,
    "label": [
      {
        "start": 60,
        "end": 63,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 67,
        "end": 71,
        "text": "存取操作",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 2,
        "end": 6,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 42,
        "end": 45,
        "text": "适配器",
        "labels": [
          "IO"
        ]
      },
      {
        "start": 50,
        "end": 52,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 12,
        "end": 15,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 33,
        "end": 36,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4863,
    "created_at": "2024-08-01T09:30:02.665079Z",
    "updated_at": "2024-08-01T09:30:02.665079Z",
    "lead_time": 0.128
  },
  {
    "text": "与其他方法比较，总线组织方式有如下几个优点",
    "id": 3431,
    "label": [
      {
        "start": 8,
        "end": 10,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4864,
    "created_at": "2024-08-01T09:30:03.704587Z",
    "updated_at": "2024-08-01T09:30:03.704587Z",
    "lead_time": 0.07
  },
  {
    "text": "简易性这是多处理机系统组成的最简单方式",
    "id": 3432,
    "label": [
      {
        "start": 5,
        "end": 11,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4865,
    "created_at": "2024-08-01T09:30:04.966780Z",
    "updated_at": "2024-08-01T09:30:04.966780Z",
    "lead_time": 0.093
  },
  {
    "text": "物理接口以及每个处理机的寻址、仲裁和分时逻辑保持与单处理机系统相同",
    "id": 3433,
    "label": [
      {
        "start": 25,
        "end": 29,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 8,
        "end": 11,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 12,
        "end": 14,
        "text": "寻址",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 2,
        "end": 4,
        "text": "接口",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4866,
    "created_at": "2024-08-01T09:30:05.920868Z",
    "updated_at": "2024-08-01T09:30:05.920868Z",
    "lead_time": 0.1
  },
  {
    "text": "灵活性以附加更多处理机到总线的方法来扩充系统，一般来说也是容易的",
    "id": 3434,
    "label": [
      {
        "start": 8,
        "end": 11,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 12,
        "end": 14,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4867,
    "created_at": "2024-08-01T09:30:07.087848Z",
    "updated_at": "2024-08-01T09:30:07.087848Z",
    "lead_time": 0.149
  },
  {
    "text": "可靠性本质上来说，总线是一个被动介质，并且总线上任一设备的故障不会引起整个系统的失败",
    "id": 3435,
    "label": [
      {
        "start": 9,
        "end": 11,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 21,
        "end": 23,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4868,
    "created_at": "2024-08-01T09:30:08.247957Z",
    "updated_at": "2024-08-01T09:30:08.247957Z",
    "lead_time": 0.089
  },
  {
    "text": "总线组织的主要缺点在于性能",
    "id": 3436,
    "label": [
      {
        "start": 0,
        "end": 2,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4869,
    "created_at": "2024-08-01T09:30:09.285677Z",
    "updated_at": "2024-08-01T09:30:09.285677Z",
    "lead_time": 0.061
  },
  {
    "text": "所有的存储器访问都要通过公共总线，于是系统速度受限于总线周期",
    "id": 3437,
    "label": [
      {
        "start": 3,
        "end": 6,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 26,
        "end": 30,
        "text": "总线周期",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 14,
        "end": 16,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4870,
    "created_at": "2024-08-01T09:30:10.389004Z",
    "updated_at": "2024-08-01T09:30:10.389004Z",
    "lead_time": 0.09
  },
  {
    "text": "为改善性能，就要求为每个处理机配置cache，这将急剧地减少总线访问次数",
    "id": 3438,
    "label": [
      {
        "start": 17,
        "end": 22,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 12,
        "end": 15,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 30,
        "end": 32,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4871,
    "created_at": "2024-08-01T09:30:12.065831Z",
    "updated_at": "2024-08-01T09:30:12.065831Z",
    "lead_time": 0.682
  },
  {
    "text": "一般来说，工作站和个人机SMP都有两级cache，Lcache是内部的与处理机同一芯片，Lcache或是内部的，或是外部的",
    "id": 3439,
    "label": [
      {
        "start": 41,
        "end": 43,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 19,
        "end": 24,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 36,
        "end": 39,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 26,
        "end": 31,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 45,
        "end": 50,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4872,
    "created_at": "2024-08-01T09:30:13.125825Z",
    "updated_at": "2024-08-01T09:30:13.125825Z",
    "lead_time": 0.086
  },
  {
    "text": "现在，某些处理机还使用了Lcache",
    "id": 3440,
    "label": [
      {
        "start": 5,
        "end": 8,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 18,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4873,
    "created_at": "2024-08-01T09:30:13.870030Z",
    "updated_at": "2024-08-01T09:30:13.870030Z",
    "lead_time": 0.06
  },
  {
    "text": "cache的使用导致某些新的设计考虑，因为每个局部cache只保存部分存储器的映像，如果在某个cache中修改了一个字，可想象出其他cache中的此字将会是无效的",
    "id": 3441,
    "label": [
      {
        "start": 35,
        "end": 38,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 0,
        "end": 5,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 58,
        "end": 59,
        "text": "字",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 25,
        "end": 30,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 47,
        "end": 52,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 66,
        "end": 71,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 74,
        "end": 75,
        "text": "字",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4874,
    "created_at": "2024-08-01T09:30:15.106013Z",
    "updated_at": "2024-08-01T09:30:15.106583Z",
    "lead_time": 0.461
  },
  {
    "text": "为防止这个问题，必须通知其他处理机：已经发生了修改",
    "id": 3442,
    "label": [
      {
        "start": 14,
        "end": 17,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4875,
    "created_at": "2024-08-01T09:30:16.204896Z",
    "updated_at": "2024-08-01T09:30:16.204896Z",
    "lead_time": 0.391
  },
  {
    "text": "这个问题称为cache一致性问题，并且一般是以硬件解决",
    "id": 3443,
    "label": [
      {
        "start": 23,
        "end": 25,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 6,
        "end": 14,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4876,
    "created_at": "2024-08-01T09:30:17.409433Z",
    "updated_at": "2024-08-01T09:30:17.409433Z",
    "lead_time": 0.506
  },
  {
    "text": "从单处理机到多核处理机的变化并不是处理机设计厂商根据客户需求和市场趋势做出的主动选择，而是在物理规律限制下的无奈之举",
    "id": 3444,
    "label": [
      {
        "start": 6,
        "end": 11,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 1,
        "end": 5,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 17,
        "end": 20,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4877,
    "created_at": "2024-08-01T09:30:18.099199Z",
    "updated_at": "2024-08-01T09:30:18.099199Z",
    "lead_time": 0.072
  },
  {
    "text": "多核解决方案可以利用新工艺带来的集成电路集成度的提高，将几个处理机核心集成在一块芯片内",
    "id": 3445,
    "label": [
      {
        "start": 16,
        "end": 20,
        "text": "集成电路",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 30,
        "end": 35,
        "text": "处理机核心",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4878,
    "created_at": "2024-08-01T09:30:18.812676Z",
    "updated_at": "2024-08-01T09:30:18.812676Z",
    "lead_time": 0.065
  },
  {
    "text": "与传统的单核技术相比，多核技术是应对芯片物理规律限制的相对简单的办法",
    "id": 3446,
    "label": [
      {
        "start": 18,
        "end": 20,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "单核",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4879,
    "created_at": "2024-08-01T09:30:19.783761Z",
    "updated_at": "2024-08-01T09:30:19.784273Z",
    "lead_time": 0.071
  },
  {
    "text": "与提高处理机主频相比，在一个芯片内集成多个相对简单而主频稍低的处理机核既可以充分利用摩尔定律带来的芯片面积提升，又可以更容易地解决功耗、芯片内部互联延迟和设计复杂度等问题",
    "id": 3447,
    "label": [
      {
        "start": 42,
        "end": 46,
        "text": "摩尔定律",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 31,
        "end": 35,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 3,
        "end": 6,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 6,
        "end": 8,
        "text": "主频",
        "labels": [
          "PERF"
        ]
      },
      {
        "start": 14,
        "end": 16,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 26,
        "end": 28,
        "text": "主频",
        "labels": [
          "PERF"
        ]
      },
      {
        "start": 49,
        "end": 51,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 68,
        "end": 70,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4880,
    "created_at": "2024-08-01T09:30:20.572831Z",
    "updated_at": "2024-08-01T09:30:20.572831Z",
    "lead_time": 0.091
  },
  {
    "text": "高并行性：每个处理机核都不必提高晶体管的翻转速度，而多核处理机可同时执行的线程数或任务数是单处理机的数倍，极大地提升了处理机的并行性，带来了更强的并行处理能力和更高的计算密度",
    "id": 3448,
    "label": [
      {
        "start": 26,
        "end": 31,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 45,
        "end": 49,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 1,
        "end": 4,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 16,
        "end": 19,
        "text": "晶体管",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 37,
        "end": 39,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 7,
        "end": 11,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 59,
        "end": 62,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 63,
        "end": 65,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 73,
        "end": 75,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4881,
    "created_at": "2024-08-01T09:30:21.392953Z",
    "updated_at": "2024-08-01T09:30:21.392953Z",
    "lead_time": 0.086
  },
  {
    "text": "高通信效率：多个核集成在片内，各个处理机核只需要在核内部的相对较小的区域内交换数据，不需要很长的互联线，通信延迟变低，提高了通信效率，数据传输带宽也得到提高",
    "id": 3449,
    "label": [
      {
        "start": 17,
        "end": 21,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 69,
        "end": 73,
        "text": "传输带宽",
        "labels": [
          "PERF"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4882,
    "created_at": "2024-08-01T09:30:22.352567Z",
    "updated_at": "2024-08-01T09:30:22.352567Z",
    "lead_time": 0.056
  },
  {
    "text": "高资源利用率：多核结构可以有效支持片内资源共享，片上资源的利用率得到了提高",
    "id": 3450,
    "annotator": 1,
    "annotation_id": 4883,
    "created_at": "2024-08-01T09:30:23.088682Z",
    "updated_at": "2024-08-01T09:30:23.088682Z",
    "lead_time": 0.054
  },
  {
    "text": "低功耗：处理机的功耗增长随着内核数目的增加呈线性增长，而不是随着频率的增加呈指数级增长",
    "id": 3451,
    "label": [
      {
        "start": 4,
        "end": 7,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4884,
    "created_at": "2024-08-01T09:30:23.788574Z",
    "updated_at": "2024-08-01T09:30:23.788574Z",
    "lead_time": 0.057
  },
  {
    "text": "由于不再依靠提高主频改善性能，内核的工作频率不需要达到上限，多个简单低速核的功耗远低于一个高速复杂处理机的功耗",
    "id": 3452,
    "label": [
      {
        "start": 49,
        "end": 52,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 8,
        "end": 10,
        "text": "主频",
        "labels": [
          "PERF"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4885,
    "created_at": "2024-08-01T09:30:24.692024Z",
    "updated_at": "2024-08-01T09:30:24.692024Z",
    "lead_time": 0.058
  },
  {
    "text": "如果进一步采用动态管理各处理机核功耗的方法，针对不同的任务，每个核可以被降频或关闭，多核在功耗控制上会更有优势",
    "id": 3453,
    "label": [
      {
        "start": 12,
        "end": 16,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4886,
    "created_at": "2024-08-01T09:30:25.466556Z",
    "updated_at": "2024-08-01T09:30:25.466556Z",
    "lead_time": 0.164
  },
  {
    "text": "低设计复杂度：多核处理机中的每个核的结构相对简单，易于优化设计，扩展性强",
    "id": 3454,
    "label": [
      {
        "start": 7,
        "end": 12,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4887,
    "created_at": "2024-08-01T09:30:26.229642Z",
    "updated_at": "2024-08-01T09:30:26.230656Z",
    "lead_time": 0.088
  },
  {
    "text": "设计高速而复杂的单处理机往往要采用超标量处理机结构和超长指令字结构，控制逻辑复杂",
    "id": 3455,
    "label": [
      {
        "start": 8,
        "end": 12,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 20,
        "end": 23,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 27,
        "end": 30,
        "text": "长指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 30,
        "end": 31,
        "text": "字",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4888,
    "created_at": "2024-08-01T09:30:27.157840Z",
    "updated_at": "2024-08-01T09:30:27.157840Z",
    "lead_time": 0.07
  },
  {
    "text": "而在芯片内复制多个低速简单内核的设计难度显然更低，设计和验证周期更短，出现错误的机会也更小",
    "id": 3456,
    "label": [
      {
        "start": 2,
        "end": 4,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4889,
    "created_at": "2024-08-01T09:30:27.909113Z",
    "updated_at": "2024-08-01T09:30:27.909113Z",
    "lead_time": 0.056
  },
  {
    "text": "较低的成本：多核处理机内的各个核共享器件芯片封装和芯片IO资源，也使占单核处理机成本的芯片封装和IO成本的比重大大下降，生产成本得以降低",
    "id": 3457,
    "label": [
      {
        "start": 6,
        "end": 11,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 25,
        "end": 27,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 43,
        "end": 45,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 37,
        "end": 40,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 35,
        "end": 37,
        "text": "单核",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4890,
    "created_at": "2024-08-01T09:30:28.688655Z",
    "updated_at": "2024-08-01T09:30:28.688655Z",
    "lead_time": 0.088
  },
  {
    "text": "设计复杂度的降低也会使处理机设计开发的成本降低",
    "id": 3458,
    "label": [
      {
        "start": 11,
        "end": 14,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4891,
    "created_at": "2024-08-01T09:30:29.637445Z",
    "updated_at": "2024-08-01T09:30:29.637445Z",
    "lead_time": 0.053
  },
  {
    "text": "这些优势最终推动多核的发展并使多核逐渐取代单核处理机成为主流技术",
    "id": 3459,
    "label": [
      {
        "start": 23,
        "end": 26,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 21,
        "end": 23,
        "text": "单核",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4892,
    "created_at": "2024-08-01T09:30:30.392992Z",
    "updated_at": "2024-08-01T09:30:30.392992Z",
    "lead_time": 0.064
  },
  {
    "text": "多核技术是在超线程、超标量和多处理机等技术的基础上发展起来的，也充分吸收了其他技术的优势",
    "id": 3460,
    "label": [
      {
        "start": 14,
        "end": 18,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 7,
        "end": 9,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4893,
    "created_at": "2024-08-01T09:30:31.223881Z",
    "updated_at": "2024-08-01T09:30:31.223881Z",
    "lead_time": 0.062
  },
  {
    "text": "超线程技术是通过隐藏潜在访存延迟的方法提高处理机的性能，其主要目的是充分利用空闲的处理机资源，本质上仍然是多个线程共享一个处理机核",
    "id": 3461,
    "label": [
      {
        "start": 61,
        "end": 65,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 0,
        "end": 5,
        "text": "超线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 21,
        "end": 24,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 41,
        "end": 44,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 55,
        "end": 57,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4894,
    "created_at": "2024-08-01T09:30:32.162567Z",
    "updated_at": "2024-08-01T09:30:32.162567Z",
    "lead_time": 0.081
  },
  {
    "text": "因此，采用超线程技术是否能获得性能的提升依赖于应用程序以及硬件平台",
    "id": 3462,
    "label": [
      {
        "start": 5,
        "end": 10,
        "text": "超线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 23,
        "end": 27,
        "text": "应用程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 29,
        "end": 31,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4895,
    "created_at": "2024-08-01T09:30:35.161639Z",
    "updated_at": "2024-08-01T09:30:35.161639Z",
    "lead_time": 2.254
  },
  {
    "text": "多核处理机则是将多个独立的处理机核嵌入到一个处理机芯片内部，每个线程都具有完整的硬件执行环境，故各线程之间可以实现真正意义上的并行",
    "id": 3463,
    "label": [
      {
        "start": 0,
        "end": 5,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 17,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 40,
        "end": 42,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 32,
        "end": 34,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 63,
        "end": 65,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 22,
        "end": 25,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 49,
        "end": 51,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 25,
        "end": 27,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4896,
    "created_at": "2024-08-01T09:30:35.946938Z",
    "updated_at": "2024-08-01T09:30:35.946938Z",
    "lead_time": 0.098
  },
  {
    "text": "当然，多核架构中灵活性的提升是以牺牲资源利用率为代价的",
    "id": 3464,
    "annotator": 1,
    "annotation_id": 4897,
    "created_at": "2024-08-01T09:30:36.864313Z",
    "updated_at": "2024-08-01T09:30:36.864313Z",
    "lead_time": 0.045
  },
  {
    "text": "不管是超线程处理机还是多核处理机，性能的提升都需要软件的配合，性能提升的程度取决于并行性的大小",
    "id": 3465,
    "label": [
      {
        "start": 11,
        "end": 16,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 41,
        "end": 44,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 25,
        "end": 27,
        "text": "软件",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 6,
        "end": 9,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4898,
    "created_at": "2024-08-01T09:30:37.608662Z",
    "updated_at": "2024-08-01T09:30:37.609697Z",
    "lead_time": 0.076
  },
  {
    "text": "多处理机系统是利用任务级并行的方式提高系统性能的，即把任务并行化并分配到多个处理机中去执行",
    "id": 3466,
    "label": [
      {
        "start": 0,
        "end": 6,
        "text": "多处理机系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 12,
        "end": 14,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 38,
        "end": 41,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 29,
        "end": 31,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4899,
    "created_at": "2024-08-01T09:30:38.416380Z",
    "updated_at": "2024-08-01T09:30:38.416380Z",
    "lead_time": 0.064
  },
  {
    "text": "由于多处理机之间的耦合度较低，不适合实现细粒度并行，而功耗也较高",
    "id": 3467,
    "label": [
      {
        "start": 2,
        "end": 6,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4900,
    "created_at": "2024-08-01T09:30:39.442756Z",
    "updated_at": "2024-08-01T09:30:39.442756Z",
    "lead_time": 0.064
  },
  {
    "text": "而多核处理机由于在一个芯片内集成多个核心，核间耦合度高，核间互连延迟更小，功耗更低，故可以在任务级、线程级和指令级等多个层次充分发挥程序的并行性，灵活度高",
    "id": 3468,
    "label": [
      {
        "start": 1,
        "end": 6,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 69,
        "end": 72,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 11,
        "end": 13,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 66,
        "end": 68,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 50,
        "end": 52,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 54,
        "end": 56,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4901,
    "created_at": "2024-08-01T09:30:40.279068Z",
    "updated_at": "2024-08-01T09:30:40.279068Z",
    "lead_time": 0.086
  },
  {
    "text": "同构多核处理机与异构多核处理机与多处理机的分类方法类似，按多核处理机内的计算内核的地位对等与否划分，多核处理机可以分为同构多核和异构多核两种类型",
    "id": 3469,
    "label": [
      {
        "start": 16,
        "end": 20,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 2,
        "end": 7,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 10,
        "end": 15,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 29,
        "end": 34,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 50,
        "end": 55,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 42,
        "end": 43,
        "text": "位",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4902,
    "created_at": "2024-08-01T09:30:44.218672Z",
    "updated_at": "2024-08-01T09:30:44.218672Z",
    "lead_time": 3.083
  },
  {
    "text": "同构多核homogenousmulticore处理机同构多核处理机内的所有计算内核结构相同，地位对等",
    "id": 3470,
    "label": [
      {
        "start": 23,
        "end": 26,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 28,
        "end": 33,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 47,
        "end": 48,
        "text": "位",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4903,
    "created_at": "2024-08-01T09:30:45.044180Z",
    "updated_at": "2024-08-01T09:30:45.044696Z",
    "lead_time": 0.072
  },
  {
    "text": "同构多核处理机大多由通用的处理机核心构成，每个处理机核心可以独立地执行任务，其结构与通用单核处理机结构相近",
    "id": 3471,
    "label": [
      {
        "start": 13,
        "end": 18,
        "text": "处理机核心",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 28,
        "text": "处理机核心",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 2,
        "end": 7,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 46,
        "end": 49,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 44,
        "end": 46,
        "text": "单核",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4904,
    "created_at": "2024-08-01T09:30:45.969656Z",
    "updated_at": "2024-08-01T09:30:45.969656Z",
    "lead_time": 0.121
  },
  {
    "text": "同构多核处理机的各个核心之间可以通过共享存储器互连，也可以通过cache或局部存储器互连",
    "id": 3472,
    "label": [
      {
        "start": 31,
        "end": 36,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 20,
        "end": 23,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 2,
        "end": 7,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 39,
        "end": 42,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4905,
    "created_at": "2024-08-01T09:30:46.854225Z",
    "updated_at": "2024-08-01T09:30:46.854225Z",
    "lead_time": 0.067
  },
  {
    "text": "在英特尔公司的通用桌面计算机上的多核处理机通常采用同构多核结构",
    "id": 3473,
    "label": [
      {
        "start": 1,
        "end": 6,
        "text": "英特尔公司",
        "labels": [
          "CORP"
        ]
      },
      {
        "start": 16,
        "end": 21,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 11,
        "end": 14,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4906,
    "created_at": "2024-08-01T09:30:47.774300Z",
    "updated_at": "2024-08-01T09:30:47.774809Z",
    "lead_time": 0.078
  },
  {
    "text": "异构多核heterogeneousmulticore处理机异构多核处理机内的各个计算内核结构不同，地位不对等",
    "id": 3474,
    "label": [
      {
        "start": 26,
        "end": 29,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 31,
        "end": 36,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 50,
        "end": 51,
        "text": "位",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4907,
    "created_at": "2024-08-01T09:30:48.890804Z",
    "updated_at": "2024-08-01T09:30:48.890804Z",
    "lead_time": 0.085
  },
  {
    "text": "异构多核处理机根据不同的应用需求配置不同的处理机核心，一般多采用“主处理核协处理核”的主从架构",
    "id": 3475,
    "label": [
      {
        "start": 21,
        "end": 26,
        "text": "处理机核心",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 2,
        "end": 7,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4908,
    "created_at": "2024-08-01T09:30:49.730300Z",
    "updated_at": "2024-08-01T09:30:49.730300Z",
    "lead_time": 0.068
  },
  {
    "text": "异构多核处理机的优势在于可以同时发挥不同类型处理机各自的长处来满足不同种类的应用的性能和功耗需求",
    "id": 3476,
    "label": [
      {
        "start": 4,
        "end": 7,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 22,
        "end": 25,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4909,
    "created_at": "2024-08-01T09:30:50.785930Z",
    "updated_at": "2024-08-01T09:30:50.785930Z",
    "lead_time": 0.274
  },
  {
    "text": "异构多核处理机将结构、功能、功耗、运算性能各不相同的多个核心集成在芯片上，并通过任务分工和划分将不同的任务分配给不同的核心，让每个核心处理自己擅长的任务",
    "id": 3477,
    "label": [
      {
        "start": 33,
        "end": 35,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 2,
        "end": 7,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 51,
        "end": 55,
        "text": "任务分配",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4910,
    "created_at": "2024-08-01T09:30:51.823861Z",
    "updated_at": "2024-08-01T09:30:51.823861Z",
    "lead_time": 0.086
  },
  {
    "text": "目前的异构多核处理机通常同时集成通用处理机、数字信号处理机DSP、媒体处理机、网络处理机等多种类型的处理机核心，并针对不同需求配置应用其计算性能",
    "id": 3478,
    "label": [
      {
        "start": 50,
        "end": 55,
        "text": "处理机核心",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 5,
        "end": 10,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 22,
        "end": 26,
        "text": "数字信号",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 18,
        "end": 21,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 26,
        "end": 29,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 35,
        "end": 38,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 41,
        "end": 44,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4911,
    "created_at": "2024-08-01T09:30:53.014421Z",
    "updated_at": "2024-08-01T09:30:53.014421Z",
    "lead_time": 0.37
  },
  {
    "text": "其中，通用处理机核常作为处理机控制主核，并用于通用计算；而其他处理机核则作为从核用于加速特定的应用",
    "id": 3479,
    "label": [
      {
        "start": 5,
        "end": 9,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 12,
        "end": 15,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 31,
        "end": 35,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4912,
    "created_at": "2024-08-01T09:30:54.461801Z",
    "updated_at": "2024-08-01T09:30:54.461801Z",
    "lead_time": 0.529
  },
  {
    "text": "例如，多核异构网络处理机配有负责管理调度的主核和负责网络处理功能的从核，经常用于科学计算的异构多核处理机在主核之外可以配置用于定点运算和浮点运算等计算功能的专用核心",
    "id": 3480,
    "label": [
      {
        "start": 47,
        "end": 52,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 9,
        "end": 12,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 63,
        "end": 65,
        "text": "定点",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4913,
    "created_at": "2024-08-01T09:30:55.614021Z",
    "updated_at": "2024-08-01T09:30:55.614021Z",
    "lead_time": 0.337
  },
  {
    "text": "研究表明，异构组织方式比同构的多核处理机执行任务更有效率，实现了资源的最优化配置，而且降低了系统的整体功耗",
    "id": 3481,
    "label": [
      {
        "start": 15,
        "end": 20,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4914,
    "created_at": "2024-08-01T09:30:56.747970Z",
    "updated_at": "2024-08-01T09:30:56.747970Z",
    "lead_time": 0.166
  },
  {
    "text": "多核处理机的对称性同构多核和异构多核是对处理机内核硬件结构和地位一致性的划分",
    "id": 3482,
    "label": [
      {
        "start": 0,
        "end": 5,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 25,
        "end": 27,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 20,
        "end": 25,
        "text": "处理机内核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 31,
        "end": 32,
        "text": "位",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4915,
    "created_at": "2024-08-01T09:30:57.845600Z",
    "updated_at": "2024-08-01T09:30:57.845600Z",
    "lead_time": 0.31
  },
  {
    "text": "如果再考虑各个核之上的操作系统，从用户的角度看，可以把多核处理机的运行模式划分为对称symmetricmultiprocessing，SMP多核和非对称asymmetricmultiprocessing，AMP多核两种类型",
    "id": 3483,
    "label": [
      {
        "start": 11,
        "end": 15,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 27,
        "end": 32,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4916,
    "created_at": "2024-08-01T09:30:59.014524Z",
    "updated_at": "2024-08-01T09:30:59.014524Z",
    "lead_time": 0.19
  },
  {
    "text": "多核处理机中的对称SMP多核结构是指处理机片内包含相同结构的核，多个核紧密耦合，并运行一个统一的操作系统",
    "id": 3484,
    "label": [
      {
        "start": 48,
        "end": 52,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 0,
        "end": 5,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 18,
        "end": 21,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4917,
    "created_at": "2024-08-01T09:31:00.236510Z",
    "updated_at": "2024-08-01T09:31:00.236510Z",
    "lead_time": 0.084
  },
  {
    "text": "每个核的地位是对等的，共同处理操作系统的所有任务",
    "id": 3485,
    "label": [
      {
        "start": 15,
        "end": 19,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 5,
        "end": 6,
        "text": "位",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4918,
    "created_at": "2024-08-01T09:31:01.996046Z",
    "updated_at": "2024-08-01T09:31:01.996046Z",
    "lead_time": 0.684
  },
  {
    "text": "SMP由多个同构的处理机核和共享存储器构成，由一个操作系统的实例同时管理所有处理机核，并将应用程序分配至各个核上运行",
    "id": 3486,
    "label": [
      {
        "start": 45,
        "end": 49,
        "text": "应用程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 9,
        "end": 13,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 25,
        "end": 29,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 38,
        "end": 42,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 16,
        "end": 19,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4919,
    "created_at": "2024-08-01T09:31:03.374313Z",
    "updated_at": "2024-08-01T09:31:03.374313Z",
    "lead_time": 0.562
  },
  {
    "text": "只要有一个内核空闲可用，操作系统就在线程等待队列中分配下一个线程给这个空闲内核来运行",
    "id": 3487,
    "label": [
      {
        "start": 12,
        "end": 16,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 22,
        "end": 24,
        "text": "队列",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 18,
        "end": 20,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 30,
        "end": 32,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4920,
    "created_at": "2024-08-01T09:31:04.525495Z",
    "updated_at": "2024-08-01T09:31:04.525495Z",
    "lead_time": 0.091
  },
  {
    "text": "应用程序本身可以不关心有多少个核在运行，由操作系统自动协调运行，并管理共享资源",
    "id": 3488,
    "label": [
      {
        "start": 21,
        "end": 25,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 0,
        "end": 4,
        "text": "应用程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4921,
    "created_at": "2024-08-01T09:31:05.799208Z",
    "updated_at": "2024-08-01T09:31:05.799208Z",
    "lead_time": 0.218
  },
  {
    "text": "同构多核处理机也可以构成非对称AMP多核结构",
    "id": 3489,
    "label": [
      {
        "start": 2,
        "end": 7,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4922,
    "created_at": "2024-08-01T09:31:07.167600Z",
    "updated_at": "2024-08-01T09:31:07.167600Z",
    "lead_time": 0.387
  },
  {
    "text": "若处理机芯片内部是同构多核，但每个核运行一个独立的操作系统或同一操作系统的独立实例，那就变成非对称多核",
    "id": 3490,
    "label": [
      {
        "start": 25,
        "end": 29,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 1,
        "end": 4,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 32,
        "end": 36,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4923,
    "created_at": "2024-08-01T09:31:08.450592Z",
    "updated_at": "2024-08-01T09:31:08.450592Z",
    "lead_time": 0.244
  },
  {
    "text": "AMP多核系统也可以由异构多核和共享存储器构成",
    "id": 3491,
    "label": [
      {
        "start": 3,
        "end": 7,
        "text": "多核系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 18,
        "end": 21,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4924,
    "created_at": "2024-08-01T09:31:09.883790Z",
    "updated_at": "2024-08-01T09:31:09.884307Z",
    "lead_time": 0.352
  },
  {
    "text": "多核处理机的cache组织在设计多核处理机时，除了处理机的结构和数量，cache的级数和大小也是需要考虑的重要问题",
    "id": 3492,
    "label": [
      {
        "start": 0,
        "end": 5,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 6,
        "end": 11,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 16,
        "end": 21,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 25,
        "end": 28,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 35,
        "end": 40,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4925,
    "created_at": "2024-08-01T09:31:11.245019Z",
    "updated_at": "2024-08-01T09:31:11.245019Z",
    "lead_time": 0.466
  },
  {
    "text": "根据多核处理机内的cache配置，可以把多核处理机的组织结构分成以下四种",
    "id": 3493,
    "label": [
      {
        "start": 2,
        "end": 7,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 9,
        "end": 14,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 20,
        "end": 25,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4926,
    "created_at": "2024-08-01T09:31:12.462645Z",
    "updated_at": "2024-08-01T09:31:12.462645Z",
    "lead_time": 0.189
  },
  {
    "text": "片内私有Lcache结构图a显示的多核结构是简单的多核计算机片内cache结构",
    "id": 3494,
    "label": [
      {
        "start": 5,
        "end": 10,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 32,
        "end": 37,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 27,
        "end": 30,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4927,
    "created_at": "2024-08-01T09:31:13.686732Z",
    "updated_at": "2024-08-01T09:31:13.686732Z",
    "lead_time": 0.107
  },
  {
    "text": "系统cache由L和L两级组成",
    "id": 3495,
    "label": [
      {
        "start": 2,
        "end": 7,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4928,
    "created_at": "2024-08-01T09:31:14.737007Z",
    "updated_at": "2024-08-01T09:31:14.737007Z",
    "lead_time": 0.061
  },
  {
    "text": "处理机片内的多个核各自有自己私有的Lcache，一般被划分为指令LcacheLI和数据LcacheLD",
    "id": 3496,
    "label": [
      {
        "start": 18,
        "end": 23,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 0,
        "end": 3,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 33,
        "end": 38,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 44,
        "end": 49,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 30,
        "end": 32,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4929,
    "created_at": "2024-08-01T09:31:16.277844Z",
    "updated_at": "2024-08-01T09:31:16.278841Z",
    "lead_time": 0.517
  },
  {
    "text": "而多核共享的Lcache则存在于处理机芯片之外",
    "id": 3497,
    "label": [
      {
        "start": 7,
        "end": 12,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 16,
        "end": 19,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 19,
        "end": 21,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4930,
    "created_at": "2024-08-01T09:31:17.528855Z",
    "updated_at": "2024-08-01T09:31:17.528855Z",
    "lead_time": 0.302
  },
  {
    "text": "ARM公司ARM微体系结构的MPCore多核嵌入式处理机就采用这种结构",
    "id": 3498,
    "label": [
      {
        "start": 0,
        "end": 5,
        "text": "ARM公司",
        "labels": [
          "CORP"
        ]
      },
      {
        "start": 22,
        "end": 28,
        "text": "嵌入式处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4931,
    "created_at": "2024-08-01T09:31:18.749039Z",
    "updated_at": "2024-08-01T09:31:18.749039Z",
    "lead_time": 0.29
  },
  {
    "text": "片内私有Lcache结构在图b显示的多核结构中，处理机片内的多个核仍然保留自己私有的指令LcacheLI和数据LcacheLD，但Lcache被移至处理机片内，且Lcache为各个核私有",
    "id": 3499,
    "label": [
      {
        "start": 5,
        "end": 10,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 24,
        "end": 27,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 74,
        "end": 77,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 45,
        "end": 50,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 56,
        "end": 61,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 66,
        "end": 71,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 82,
        "end": 87,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 42,
        "end": 44,
        "text": "指令",
        "labels": [
          "INST"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4932,
    "created_at": "2024-08-01T09:31:20.075682Z",
    "updated_at": "2024-08-01T09:31:20.075682Z",
    "lead_time": 0.127
  },
  {
    "text": "多核共享处理机芯片之外的主存",
    "id": 3500,
    "label": [
      {
        "start": 12,
        "end": 14,
        "text": "主存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 7,
        "end": 9,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 4,
        "end": 7,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4933,
    "created_at": "2024-08-01T09:31:21.583854Z",
    "updated_at": "2024-08-01T09:31:21.583854Z",
    "lead_time": 0.337
  },
  {
    "text": "AMD公司专门为服务器和工作站设计的皓龙Opteron处理机就采用这种结构",
    "id": 3501,
    "label": [
      {
        "start": 0,
        "end": 5,
        "text": "AMD公司",
        "labels": [
          "CORP"
        ]
      },
      {
        "start": 27,
        "end": 30,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4934,
    "created_at": "2024-08-01T09:31:22.628643Z",
    "updated_at": "2024-08-01T09:31:22.628643Z",
    "lead_time": 0.118
  },
  {
    "text": "片内共享Lcache结构在图c显示的多核结构与图b显示的多核结构相似，都是片上两级cache结构",
    "id": 3502,
    "label": [
      {
        "start": 5,
        "end": 10,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 41,
        "end": 46,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4935,
    "created_at": "2024-08-01T09:31:23.856571Z",
    "updated_at": "2024-08-01T09:31:23.856571Z",
    "lead_time": 0.125
  },
  {
    "text": "不同之处在于处理机片内的私有Lcache变为多核共享Lcache",
    "id": 3503,
    "label": [
      {
        "start": 15,
        "end": 20,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 6,
        "end": 9,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 27,
        "end": 32,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4936,
    "created_at": "2024-08-01T09:31:25.694155Z",
    "updated_at": "2024-08-01T09:31:25.694670Z",
    "lead_time": 0.658
  },
  {
    "text": "多核仍然共享处理机芯片之外的主存",
    "id": 3504,
    "label": [
      {
        "start": 14,
        "end": 16,
        "text": "主存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 6,
        "end": 9,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 9,
        "end": 11,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4937,
    "created_at": "2024-08-01T09:31:26.911651Z",
    "updated_at": "2024-08-01T09:31:26.911651Z",
    "lead_time": 0.163
  },
  {
    "text": "对处理机的每个核而言，片内私有Lcache的访问速度更高",
    "id": 3505,
    "label": [
      {
        "start": 16,
        "end": 21,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 1,
        "end": 4,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4938,
    "created_at": "2024-08-01T09:31:28.064771Z",
    "updated_at": "2024-08-01T09:31:28.064771Z",
    "lead_time": 0.091
  },
  {
    "text": "但在处理机片内使用共享的Lcache取代各个核私有的Lcache能够获得系统整体性能的提升，这是因为：共享cache有助于提高整体cache命中率",
    "id": 3506,
    "label": [
      {
        "start": 13,
        "end": 18,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 2,
        "end": 5,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 70,
        "end": 73,
        "text": "命中率",
        "labels": [
          "PERF"
        ]
      },
      {
        "start": 27,
        "end": 32,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 53,
        "end": 58,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 65,
        "end": 70,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4939,
    "created_at": "2024-08-01T09:31:29.220038Z",
    "updated_at": "2024-08-01T09:31:29.220038Z",
    "lead_time": 0.1
  },
  {
    "text": "如果处理机内的多个核先后访问主存同一个页面，首次访问该地址的操作会将该页面调入共享cache，其他核在此后访问同样的主存页面时可以直接在共享cache中快速存取，从而减少访问主存的次数",
    "id": 3507,
    "label": [
      {
        "start": 41,
        "end": 46,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 58,
        "end": 62,
        "text": "主存页面",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 2,
        "end": 5,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 14,
        "end": 16,
        "text": "主存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 27,
        "end": 29,
        "text": "地址",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 19,
        "end": 21,
        "text": "页面",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 70,
        "end": 75,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 87,
        "end": 89,
        "text": "主存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 35,
        "end": 37,
        "text": "页面",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4940,
    "created_at": "2024-08-01T09:31:30.544461Z",
    "updated_at": "2024-08-01T09:31:30.544461Z",
    "lead_time": 0.356
  },
  {
    "text": "并且，在私有cache结构中，不同核访问主存相同页面会在各自私有cache中都保存该主存页面的副本，而共享cache则不会重复复制数据",
    "id": 3508,
    "label": [
      {
        "start": 6,
        "end": 11,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 42,
        "end": 46,
        "text": "主存页面",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "主存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 24,
        "end": 26,
        "text": "页面",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 32,
        "end": 37,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 53,
        "end": 58,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4941,
    "created_at": "2024-08-01T09:31:31.973774Z",
    "updated_at": "2024-08-01T09:31:31.973774Z",
    "lead_time": 0.136
  },
  {
    "text": "共享cache的存储空间可以在不同核之间动态按需分配，实现“统计时分复用”",
    "id": 3509,
    "label": [
      {
        "start": 2,
        "end": 7,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 8,
        "end": 12,
        "text": "存储空间",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4942,
    "created_at": "2024-08-01T09:31:33.118807Z",
    "updated_at": "2024-08-01T09:31:33.118807Z",
    "lead_time": 0.125
  },
  {
    "text": "而私有cache的大小是固定不变的",
    "id": 3510,
    "label": [
      {
        "start": 3,
        "end": 8,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4943,
    "created_at": "2024-08-01T09:31:34.252046Z",
    "updated_at": "2024-08-01T09:31:34.252046Z",
    "lead_time": 0.095
  },
  {
    "text": "共享cache还可以作为处理机间交互信息的通道",
    "id": 3511,
    "label": [
      {
        "start": 2,
        "end": 7,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 12,
        "end": 15,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4944,
    "created_at": "2024-08-01T09:31:35.283868Z",
    "updated_at": "2024-08-01T09:31:35.283868Z",
    "lead_time": 0.1
  },
  {
    "text": "多核处理机必须解决多级cache的一致性问题，而只设计L一级私有cache可以降低解决cache一致性问题的难度，从而提供额外的性能优势",
    "id": 3512,
    "label": [
      {
        "start": 0,
        "end": 5,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 43,
        "end": 51,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 11,
        "end": 16,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 32,
        "end": 37,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4945,
    "created_at": "2024-08-01T09:31:36.792325Z",
    "updated_at": "2024-08-01T09:31:36.792325Z",
    "lead_time": 0.376
  },
  {
    "text": "英特尔公司的第一代酷睿双核CoreDuo低功耗处理机就采用这种结构",
    "id": 3513,
    "label": [
      {
        "start": 0,
        "end": 5,
        "text": "英特尔公司",
        "labels": [
          "CORP"
        ]
      },
      {
        "start": 23,
        "end": 26,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 9,
        "end": 11,
        "text": "酷睿",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4946,
    "created_at": "2024-08-01T09:31:37.814458Z",
    "updated_at": "2024-08-01T09:31:37.814458Z",
    "lead_time": 0.193
  },
  {
    "text": "片内共享Lcache结构随着处理机芯片上的可用存储器资源的增长，高性能的处理机甚至把Lcache也从处理机片外移至片内",
    "id": 3514,
    "label": [
      {
        "start": 5,
        "end": 10,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 14,
        "end": 17,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 23,
        "end": 26,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 17,
        "end": 19,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 36,
        "end": 39,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 43,
        "end": 48,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 50,
        "end": 53,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4947,
    "created_at": "2024-08-01T09:31:38.868550Z",
    "updated_at": "2024-08-01T09:31:38.868550Z",
    "lead_time": 0.203
  },
  {
    "text": "图d显示的多核结构在图b显示的片内私有Lcache结构的基础上增加了片内多核共享Lcache，使存储系统的性能有了较大提高",
    "id": 3515,
    "label": [
      {
        "start": 20,
        "end": 25,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 48,
        "end": 52,
        "text": "存储系统",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 41,
        "end": 46,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4948,
    "created_at": "2024-08-01T09:31:40.191519Z",
    "updated_at": "2024-08-01T09:31:40.191519Z",
    "lead_time": 0.235
  },
  {
    "text": "由于处理机片内核心数和片内存储空间容量都在增长，在共享Lcache结构或私有Lcache结构上增加共享的Lcache显然有助于提高处理机的整体性能",
    "id": 3516,
    "label": [
      {
        "start": 28,
        "end": 33,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 2,
        "end": 5,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 17,
        "text": "存储空间",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 39,
        "end": 44,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 53,
        "end": 58,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 65,
        "end": 68,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4949,
    "created_at": "2024-08-01T09:31:41.392582Z",
    "updated_at": "2024-08-01T09:31:41.392582Z",
    "lead_time": 0.36
  },
  {
    "text": "英特尔公司于年推出的位酷睿iCorei四核处理机就采用这种结构",
    "id": 3517,
    "label": [
      {
        "start": 0,
        "end": 5,
        "text": "英特尔公司",
        "labels": [
          "CORP"
        ]
      },
      {
        "start": 11,
        "end": 13,
        "text": "酷睿",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 21,
        "end": 24,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 10,
        "end": 11,
        "text": "位",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4950,
    "created_at": "2024-08-01T09:31:42.344163Z",
    "updated_at": "2024-08-01T09:31:42.344686Z",
    "lead_time": 0.074
  },
  {
    "text": "尽管多核技术与单核技术相比存在性能高、集成度高、并行度高、结构简单和设计验证方便等诸多优势，但从单核到多核的转变并不是直接把多个芯片上的多个处理机集成到单一芯片之中这么简单",
    "id": 3518,
    "label": [
      {
        "start": 70,
        "end": 73,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 7,
        "end": 9,
        "text": "单核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 64,
        "end": 66,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 24,
        "end": 26,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 48,
        "end": 50,
        "text": "单核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 78,
        "end": 80,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4951,
    "created_at": "2024-08-01T09:31:43.422369Z",
    "updated_at": "2024-08-01T09:31:43.422369Z",
    "lead_time": 0.297
  },
  {
    "text": "多核处理机必须解决诸多技术难题",
    "id": 3519,
    "label": [
      {
        "start": 0,
        "end": 5,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4952,
    "created_at": "2024-08-01T09:31:44.607806Z",
    "updated_at": "2024-08-01T09:31:44.607806Z",
    "lead_time": 0.075
  },
  {
    "text": "多核处理机架构多核处理机的体系结构直接影响着多核的性能",
    "id": 3520,
    "label": [
      {
        "start": 0,
        "end": 5,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 7,
        "end": 12,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4953,
    "created_at": "2024-08-01T09:31:46.643966Z",
    "updated_at": "2024-08-01T09:31:46.643966Z",
    "lead_time": 0.335
  },
  {
    "text": "而不同的应用的特性又差别很大，这些特性又对多核应该采用什么样的结构有着非常大的影响",
    "id": 3521,
    "annotator": 1,
    "annotation_id": 4954,
    "created_at": "2024-08-01T09:31:48.341640Z",
    "updated_at": "2024-08-01T09:31:48.341640Z",
    "lead_time": 0.066
  },
  {
    "text": "为此，必须针对不同的应用设计多核的实现架构",
    "id": 3522,
    "annotator": 1,
    "annotation_id": 4955,
    "created_at": "2024-08-01T09:31:54.963678Z",
    "updated_at": "2024-08-01T09:31:54.963678Z",
    "lead_time": 5.519
  },
  {
    "text": "首先是每个核自身的结构，这关系到整个芯片的面积、功耗和性能",
    "id": 3523,
    "label": [
      {
        "start": 18,
        "end": 20,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4956,
    "created_at": "2024-08-01T09:31:56.276980Z",
    "updated_at": "2024-08-01T09:31:56.277986Z",
    "lead_time": 0.5
  },
  {
    "text": "就每个核而言，如何继承并扩展传统单处理机设计的成果，直接影响多核处理机的性能和实现周期",
    "id": 3524,
    "label": [
      {
        "start": 16,
        "end": 20,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 30,
        "end": 35,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4957,
    "created_at": "2024-08-01T09:31:57.528777Z",
    "updated_at": "2024-08-01T09:31:57.528777Z",
    "lead_time": 0.378
  },
  {
    "text": "多核系统中的每个核是否应该采用超标量技术或超线程技术，是性能和成本平衡的问题",
    "id": 3525,
    "label": [
      {
        "start": 15,
        "end": 20,
        "text": "超标量技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 21,
        "end": 26,
        "text": "超线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 4,
        "text": "多核系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4958,
    "created_at": "2024-08-01T09:31:58.694670Z",
    "updated_at": "2024-08-01T09:31:58.694670Z",
    "lead_time": 0.098
  },
  {
    "text": "随着对处理机的性能要求的不断提高，在多核处理机的每个核上采用超线程技术的架构应用越来越广",
    "id": 3526,
    "label": [
      {
        "start": 18,
        "end": 23,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 30,
        "end": 35,
        "text": "超线程技术",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 3,
        "end": 6,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4959,
    "created_at": "2024-08-01T09:32:00.011683Z",
    "updated_at": "2024-08-01T09:32:00.011683Z",
    "lead_time": 0.099
  },
  {
    "text": "而软件的并行化设计思想的推广也让超线程技术越来越有吸引力",
    "id": 3527,
    "label": [
      {
        "start": 1,
        "end": 3,
        "text": "软件",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 4,
        "end": 6,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 16,
        "end": 21,
        "text": "超线程技术",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4960,
    "created_at": "2024-08-01T09:32:01.727735Z",
    "updated_at": "2024-08-01T09:32:01.727735Z",
    "lead_time": 0.495
  },
  {
    "text": "其次就是多核之间的对等性，以及芯片上的核的数目",
    "id": 3528,
    "label": [
      {
        "start": 15,
        "end": 17,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4961,
    "created_at": "2024-08-01T09:32:02.736891Z",
    "updated_at": "2024-08-01T09:32:02.736891Z",
    "lead_time": 0.061
  },
  {
    "text": "采用同构多核还是异构多核，一般要根据具体的应用场景、设计目标等因素综合决定",
    "id": 3529,
    "annotator": 1,
    "annotation_id": 4962,
    "created_at": "2024-08-01T09:32:04.179722Z",
    "updated_at": "2024-08-01T09:32:04.179722Z",
    "lead_time": 0.078
  },
  {
    "text": "最初的多核处理机都采用同构处理机架构，每个核的功能较强，但集成的处理机核的数量较少，一般以总线或交叉开关互连",
    "id": 3530,
    "label": [
      {
        "start": 48,
        "end": 52,
        "text": "交叉开关",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 32,
        "end": 36,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 45,
        "end": 47,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 3,
        "end": 8,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 16,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4963,
    "created_at": "2024-08-01T09:32:05.319997Z",
    "updated_at": "2024-08-01T09:32:05.319997Z",
    "lead_time": 0.092
  },
  {
    "text": "这种设计实际上是利用半导体技术的进步把原来放在不同芯片上的多处理机集成到一个芯片上，通过简单增加片内处理机核心的数量来提升处理机的性能，体系结构上的改进并不明显",
    "id": 3531,
    "label": [
      {
        "start": 10,
        "end": 13,
        "text": "半导体",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 50,
        "end": 55,
        "text": "处理机核心",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 29,
        "end": 33,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 25,
        "end": 27,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 38,
        "end": 40,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 61,
        "end": 64,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4964,
    "created_at": "2024-08-01T09:32:06.644774Z",
    "updated_at": "2024-08-01T09:32:06.644774Z",
    "lead_time": 0.115
  },
  {
    "text": "这种设计方法简单、有效，可以重用复杂的处理机设计，并且借用板级总线协议，是多核发展的初级阶段",
    "id": 3532,
    "label": [
      {
        "start": 19,
        "end": 22,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 31,
        "end": 33,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4965,
    "created_at": "2024-08-01T09:32:07.891937Z",
    "updated_at": "2024-08-01T09:32:07.891937Z",
    "lead_time": 0.104
  },
  {
    "text": "同构多核结构原理简单，硬件实现复杂度低，在通用桌面系统中被普遍采用",
    "id": 3533,
    "label": [
      {
        "start": 11,
        "end": 13,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4966,
    "created_at": "2024-08-01T09:32:09.168959Z",
    "updated_at": "2024-08-01T09:32:09.168959Z",
    "lead_time": 0.087
  },
  {
    "text": "但在现实世界的应用场景中，并不总是能够把计算任务均匀分配到同构的多个核心上，多核必须面对如何平衡若干处理机的负载并进行任务协调等难题",
    "id": 3534,
    "label": [
      {
        "start": 50,
        "end": 53,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4967,
    "created_at": "2024-08-01T09:32:09.991984Z",
    "updated_at": "2024-08-01T09:32:09.991984Z",
    "lead_time": 0.06
  },
  {
    "text": "即使能够不断增加同类型的处理机核心的数量以加强并行处理能力，整个系统的处理性能仍然会受到软件中必须串行执行的那部分的制约",
    "id": 3535,
    "label": [
      {
        "start": 12,
        "end": 15,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 44,
        "end": 46,
        "text": "软件",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 49,
        "end": 51,
        "text": "串行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4968,
    "created_at": "2024-08-01T09:32:11.026698Z",
    "updated_at": "2024-08-01T09:32:11.027495Z",
    "lead_time": 0.083
  },
  {
    "text": "达到极限值之后，性能就无法再随着内核数量的增加而提升了",
    "id": 3536,
    "annotator": 1,
    "annotation_id": 4969,
    "created_at": "2024-08-01T09:32:12.152417Z",
    "updated_at": "2024-08-01T09:32:12.152417Z",
    "lead_time": 0.057
  },
  {
    "text": "这就是著名的阿姆达尔定律Amdahl’slaw",
    "id": 3537,
    "annotator": 1,
    "annotation_id": 4970,
    "created_at": "2024-08-01T09:32:13.046422Z",
    "updated_at": "2024-08-01T09:32:13.046422Z",
    "lead_time": 0.05
  },
  {
    "text": "异构多核则通过配置不同特点的核心来优化处理机内部结构，实现处理机性能的最佳化，并能有效地降低系统功耗",
    "id": 3538,
    "label": [
      {
        "start": 19,
        "end": 22,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 29,
        "end": 32,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4971,
    "created_at": "2024-08-01T09:32:14.118020Z",
    "updated_at": "2024-08-01T09:32:14.118020Z",
    "lead_time": 0.09
  },
  {
    "text": "异构多核架构的一个典型实例就是在通用个人计算机上将图形处理单元GraphicProcessingUnit，GPU与通用CPU集成在一颗芯片上构成的异构多核处理机",
    "id": 3539,
    "label": [
      {
        "start": 59,
        "end": 62,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 53,
        "end": 56,
        "text": "GPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 67,
        "end": 69,
        "text": "芯片",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 75,
        "end": 80,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 20,
        "end": 23,
        "text": "计算机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4972,
    "created_at": "2024-08-01T09:32:15.081775Z",
    "updated_at": "2024-08-01T09:32:15.081775Z",
    "lead_time": 0.075
  },
  {
    "text": "在这样的架构下，系统中必须串行执行的部分能在一个强大的CPU核上加速，而可以并行的部分则通过很多很小的GPU核来提速",
    "id": 3540,
    "label": [
      {
        "start": 27,
        "end": 31,
        "text": "CPU核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 51,
        "end": 55,
        "text": "GPU核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "串行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 38,
        "end": 40,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4973,
    "created_at": "2024-08-01T09:32:16.058884Z",
    "updated_at": "2024-08-01T09:32:16.058884Z",
    "lead_time": 0.071
  },
  {
    "text": "GPU是在通用计算机系统上支持图形处理的专用处理单元",
    "id": 3541,
    "label": [
      {
        "start": 0,
        "end": 3,
        "text": "GPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 7,
        "end": 12,
        "text": "计算机系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4974,
    "created_at": "2024-08-01T09:32:17.051733Z",
    "updated_at": "2024-08-01T09:32:17.051733Z",
    "lead_time": 0.069
  },
  {
    "text": "GPU的计算能力随着图形运算的复杂度的上升而逐渐提高，尤其是浮点运算能力已经远远超过通用CPU数倍",
    "id": 3542,
    "label": [
      {
        "start": 44,
        "end": 47,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 0,
        "end": 3,
        "text": "GPU",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4975,
    "created_at": "2024-08-01T09:32:17.931694Z",
    "updated_at": "2024-08-01T09:32:17.931694Z",
    "lead_time": 0.075
  },
  {
    "text": "与CPU相比，GPU更适合重复计算，因为GPU是专门为图形运算而设计的，在设计时就考虑到了图形运算的特征",
    "id": 3543,
    "label": [
      {
        "start": 1,
        "end": 4,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 7,
        "end": 10,
        "text": "GPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 20,
        "end": 23,
        "text": "GPU",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4976,
    "created_at": "2024-08-01T09:32:19.044534Z",
    "updated_at": "2024-08-01T09:32:19.044534Z",
    "lead_time": 0.083
  },
  {
    "text": "例如，对图形的色彩处理往往需要对所有待处理的像素执行相同或类似的重复运算",
    "id": 3544,
    "annotator": 1,
    "annotation_id": 4977,
    "created_at": "2024-08-01T09:32:20.005918Z",
    "updated_at": "2024-08-01T09:32:20.005918Z",
    "lead_time": 0.051
  },
  {
    "text": "这恰恰让GPU非常适合进行SIMD运算",
    "id": 3545,
    "label": [
      {
        "start": 13,
        "end": 17,
        "text": "SIMD",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 4,
        "end": 7,
        "text": "GPU",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4978,
    "created_at": "2024-08-01T09:32:21.160929Z",
    "updated_at": "2024-08-01T09:32:21.160929Z",
    "lead_time": 0.461
  },
  {
    "text": "因此，人们很自然地试图利用GPU的这种优化设计来进行图形之外的通用计算，将GPU通用化，于是出现了通用图形处理机GeneralPurposeGPU，GPGPU",
    "id": 3546,
    "label": [
      {
        "start": 13,
        "end": 16,
        "text": "GPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 37,
        "end": 40,
        "text": "GPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 53,
        "end": 56,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 70,
        "end": 73,
        "text": "GPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 76,
        "end": 79,
        "text": "GPU",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4979,
    "created_at": "2024-08-01T09:32:22.184020Z",
    "updated_at": "2024-08-01T09:32:22.184020Z",
    "lead_time": 0.128
  },
  {
    "text": "GPGPU兼有通用计算和图形处理两大功能，能完成CPU的运算工作，更适合高性能计算，并能使用高级程序设计语言，在性能和通用性上更加强大",
    "id": 3547,
    "label": [
      {
        "start": 24,
        "end": 27,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 48,
        "end": 52,
        "text": "程序设计",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 2,
        "end": 5,
        "text": "GPU",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4980,
    "created_at": "2024-08-01T09:32:23.365953Z",
    "updated_at": "2024-08-01T09:32:23.365953Z",
    "lead_time": 0.08
  },
  {
    "text": "GPGPU向着集成化方向发展，即将GPU核集成到CPU片内，就构成异构多核处理机",
    "id": 3548,
    "label": [
      {
        "start": 17,
        "end": 21,
        "text": "GPU核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 24,
        "end": 27,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 35,
        "end": 40,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 2,
        "end": 5,
        "text": "GPU",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4981,
    "created_at": "2024-08-01T09:32:24.780869Z",
    "updated_at": "2024-08-01T09:32:24.780869Z",
    "lead_time": 0.085
  },
  {
    "text": "面向并行处理的应用软件所要求的浮点运算及定点运算将由GPU执行；而CPU内核则把重点放在执行传统处理机的主要任务，即运行操作系统、执行商务软件中的整数运算等",
    "id": 3549,
    "label": [
      {
        "start": 60,
        "end": 64,
        "text": "操作系统",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 7,
        "end": 11,
        "text": "应用软件",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 33,
        "end": 36,
        "text": "CPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 26,
        "end": 29,
        "text": "GPU",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 48,
        "end": 51,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 2,
        "end": 4,
        "text": "并行",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 69,
        "end": 71,
        "text": "软件",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 20,
        "end": 22,
        "text": "定点",
        "labels": [
          "DATA"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4982,
    "created_at": "2024-08-01T09:32:26.600805Z",
    "updated_at": "2024-08-01T09:32:26.600805Z",
    "lead_time": 0.515
  },
  {
    "text": "异构多核结构也存在着一些难点，如选择哪几种不同的核相互搭配、核间任务如何分工、如何实现良好的可扩展性等，必须在性能、成本、功耗等方面仔细平衡，并通过软硬件相互配合使任务的并行性最大化",
    "id": 3550,
    "label": [
      {
        "start": 0,
        "end": 6,
        "text": "异构多核结构",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 85,
        "end": 88,
        "text": "并行性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 75,
        "end": 77,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4983,
    "created_at": "2024-08-01T09:32:28.861876Z",
    "updated_at": "2024-08-01T09:32:28.861876Z",
    "lead_time": 1.043
  },
  {
    "text": "多核系统存储结构设计为了使处理机的处理能力得到充分发挥，存储系统必须能够提供与处理机性能相匹配的存储器带宽",
    "id": 3551,
    "label": [
      {
        "start": 48,
        "end": 51,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 28,
        "end": 32,
        "text": "存储系统",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 0,
        "end": 4,
        "text": "多核系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 13,
        "end": 16,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 51,
        "end": 53,
        "text": "带宽",
        "labels": [
          "PERF"
        ]
      },
      {
        "start": 39,
        "end": 42,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4984,
    "created_at": "2024-08-01T09:32:30.117805Z",
    "updated_at": "2024-08-01T09:32:30.117805Z",
    "lead_time": 0.209
  },
  {
    "text": "因此，处理机与主存储器之间的速度差距一直是处理机结构设计中必须考虑的问题",
    "id": 3552,
    "label": [
      {
        "start": 7,
        "end": 11,
        "text": "主存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 3,
        "end": 6,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 21,
        "end": 24,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4985,
    "created_at": "2024-08-01T09:32:31.534727Z",
    "updated_at": "2024-08-01T09:32:31.534727Z",
    "lead_time": 0.106
  },
  {
    "text": "由于处理机内的核心数目增多，并且各核心采用共享存储器结构进行信息交互，对主存的访问需求进一步增加，在单处理机时代面临的存储墙问题依然存在，而且问题更加严重",
    "id": 3553,
    "label": [
      {
        "start": 50,
        "end": 54,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 2,
        "end": 5,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 36,
        "end": 38,
        "text": "主存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 23,
        "end": 26,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4986,
    "created_at": "2024-08-01T09:32:32.646736Z",
    "updated_at": "2024-08-01T09:32:32.647746Z",
    "lead_time": 0.094
  },
  {
    "text": "故必须针对多核处理机进行相应的存储结构设计，并解决好存储系统的效率问题",
    "id": 3554,
    "label": [
      {
        "start": 5,
        "end": 10,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 26,
        "end": 30,
        "text": "存储系统",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4987,
    "created_at": "2024-08-01T09:32:34.034591Z",
    "updated_at": "2024-08-01T09:32:34.034591Z",
    "lead_time": 0.115
  },
  {
    "text": "目前的存储系统设计仍然采用存储器分级的方式解决存储速度问题，高性能的处理机采用二级甚至三级cache提高存储系统的等效访问速度，并且处理机片内的cache容量尽可能增大",
    "id": 3555,
    "label": [
      {
        "start": 45,
        "end": 50,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 3,
        "end": 7,
        "text": "存储系统",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 34,
        "end": 37,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 16,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 52,
        "end": 56,
        "text": "存储系统",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 66,
        "end": 69,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 72,
        "end": 77,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4988,
    "created_at": "2024-08-01T09:32:35.346451Z",
    "updated_at": "2024-08-01T09:32:35.346451Z",
    "lead_time": 0.121
  },
  {
    "text": "但多核系统中的存储系统设计必须平衡系统整体性能、功耗、成本、运行效率等诸多因素",
    "id": 3556,
    "label": [
      {
        "start": 1,
        "end": 5,
        "text": "多核系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 7,
        "end": 11,
        "text": "存储系统",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4989,
    "created_at": "2024-08-01T09:32:36.781566Z",
    "updated_at": "2024-08-01T09:32:36.781566Z",
    "lead_time": 0.081
  },
  {
    "text": "因此，在多核处理机设计时，必须评估共享cache和私有cache孰优孰劣、需要在芯内设置几级cache等因素",
    "id": 3557,
    "label": [
      {
        "start": 4,
        "end": 9,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 19,
        "end": 24,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 27,
        "end": 32,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 46,
        "end": 51,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4990,
    "created_at": "2024-08-01T09:32:37.949585Z",
    "updated_at": "2024-08-01T09:32:37.949585Z",
    "lead_time": 0.12
  },
  {
    "text": "此外，在多核系统中，还面临多级cache的一致性cachecoherency问题",
    "id": 3558,
    "label": [
      {
        "start": 15,
        "end": 20,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 4,
        "end": 8,
        "text": "多核系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 24,
        "end": 29,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4991,
    "created_at": "2024-08-01T09:32:39.439177Z",
    "updated_at": "2024-08-01T09:32:39.439177Z",
    "lead_time": 0.11
  },
  {
    "text": "多核处理机的cache一致性cache一致性问题产生的原因是：在一个处理机系统中，不同的cache和主存空间中可能存放着同一个数据的多个副本，在写操作时，这些副本存在着潜在的不一致",
    "id": 3559,
    "label": [
      {
        "start": 6,
        "end": 14,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 5,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 50,
        "end": 54,
        "text": "主存空间",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 72,
        "end": 75,
        "text": "写操作",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 14,
        "end": 22,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 34,
        "end": 37,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 44,
        "end": 49,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4992,
    "created_at": "2024-08-01T09:32:40.610961Z",
    "updated_at": "2024-08-01T09:32:40.610961Z",
    "lead_time": 0.106
  },
  {
    "text": "在单处理机系统中，cache一致性问题主要表现为在内存写操作过程中如何保持cache中的数据副本和主存内容的一致，即使有IO通道共享cache，也可以通过全写法较好地解决一致性问题",
    "id": 3560,
    "label": [
      {
        "start": 1,
        "end": 5,
        "text": "单处理机",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 9,
        "end": 17,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 77,
        "end": 80,
        "text": "全写法",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 27,
        "end": 30,
        "text": "写操作",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 49,
        "end": 51,
        "text": "主存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 25,
        "end": 27,
        "text": "内存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 37,
        "end": 42,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 66,
        "end": 71,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4993,
    "created_at": "2024-08-01T09:32:42.395978Z",
    "updated_at": "2024-08-01T09:32:42.395978Z",
    "lead_time": 0.226
  },
  {
    "text": "而在多核系统中，多个核都能够对内存进行写操作，而cache级数更多，同一数据的多个副本可能同时存放在多个cache存储器中，某个核的私有cache又只能被该核自身访问",
    "id": 3561,
    "label": [
      {
        "start": 24,
        "end": 29,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 2,
        "end": 6,
        "text": "多核系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 57,
        "end": 60,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 19,
        "end": 22,
        "text": "写操作",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 15,
        "end": 17,
        "text": "内存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 52,
        "end": 57,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 68,
        "end": 73,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4994,
    "created_at": "2024-08-01T09:32:43.759421Z",
    "updated_at": "2024-08-01T09:32:43.759421Z",
    "lead_time": 0.08
  },
  {
    "text": "即使采用全写法，也只能维持一个cache和主存之间的一致性，不能自动更新其他处理机核的私有cache中的相同副本",
    "id": 3562,
    "label": [
      {
        "start": 15,
        "end": 20,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 38,
        "end": 42,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 4,
        "end": 7,
        "text": "全写法",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 21,
        "end": 23,
        "text": "主存",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 45,
        "end": 50,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4995,
    "created_at": "2024-08-01T09:32:44.786940Z",
    "updated_at": "2024-08-01T09:32:44.786940Z",
    "lead_time": 0.085
  },
  {
    "text": "这些因素无疑加大了cache一致性问题的复杂度，同时又影响着多核系统的存储系统整体设计",
    "id": 3563,
    "label": [
      {
        "start": 35,
        "end": 39,
        "text": "存储系统",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 9,
        "end": 17,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 30,
        "end": 34,
        "text": "多核系统",
        "labels": [
          "ARCH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4996,
    "created_at": "2024-08-01T09:32:48.450448Z",
    "updated_at": "2024-08-01T09:32:48.450448Z",
    "lead_time": 2.862
  },
  {
    "text": "维护cache一致性的关键在于跟踪每一个cache块的状态，并根据处理机的读写操作及总线上的相应事件更新cache块的状态",
    "id": 3564,
    "label": [
      {
        "start": 2,
        "end": 10,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 33,
        "end": 36,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 38,
        "end": 41,
        "text": "写操作",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 42,
        "end": 44,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 20,
        "end": 25,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 52,
        "end": 57,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4997,
    "created_at": "2024-08-01T09:32:49.339916Z",
    "updated_at": "2024-08-01T09:32:49.339916Z",
    "lead_time": 0.148
  },
  {
    "text": "一般来说，导致多核处理机系统中cache内容不一致的原因如下",
    "id": 3565,
    "label": [
      {
        "start": 7,
        "end": 12,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 15,
        "end": 20,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4998,
    "created_at": "2024-08-01T09:32:50.236899Z",
    "updated_at": "2024-08-01T09:32:50.236899Z",
    "lead_time": 0.055
  },
  {
    "text": "可写数据的共享一台处理机采用全写法或回写法修改某一个数据块时，会引起其他处理机的cache中同一副本的不一致",
    "id": 3566,
    "label": [
      {
        "start": 9,
        "end": 12,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 40,
        "end": 45,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 14,
        "end": 17,
        "text": "全写法",
        "labels": [
          "DATA"
        ]
      },
      {
        "start": 36,
        "end": 39,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 4999,
    "created_at": "2024-08-01T09:32:51.248998Z",
    "updated_at": "2024-08-01T09:32:51.248998Z",
    "lead_time": 0.068
  },
  {
    "text": "IO活动如果IO处理机直接接在系统总线上，也会导致cache不一致",
    "id": 3567,
    "label": [
      {
        "start": 25,
        "end": 30,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 15,
        "end": 19,
        "text": "系统总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 8,
        "end": 11,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5000,
    "created_at": "2024-08-01T09:32:52.207970Z",
    "updated_at": "2024-08-01T09:32:52.207970Z",
    "lead_time": 0.07
  },
  {
    "text": "核间线程迁移核间线程迁移就是把一个尚未执行完的线程调度到另一个空闲的处理机核中去执行",
    "id": 3568,
    "label": [
      {
        "start": 34,
        "end": 38,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 2,
        "end": 4,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 8,
        "end": 10,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5001,
    "created_at": "2024-08-01T09:32:53.132855Z",
    "updated_at": "2024-08-01T09:32:53.132855Z",
    "lead_time": 0.072
  },
  {
    "text": "为提高整个系统的效率，有的系统允许线程核间迁移，使系统负载平衡",
    "id": 3569,
    "label": [
      {
        "start": 27,
        "end": 31,
        "text": "负载平衡",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 17,
        "end": 19,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5002,
    "created_at": "2024-08-01T09:32:54.181039Z",
    "updated_at": "2024-08-01T09:32:54.181039Z",
    "lead_time": 0.071
  },
  {
    "text": "但这有可能引起cache的不一致",
    "id": 3570,
    "label": [
      {
        "start": 7,
        "end": 12,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5003,
    "created_at": "2024-08-01T09:32:55.071896Z",
    "updated_at": "2024-08-01T09:32:55.071896Z",
    "lead_time": 0.061
  },
  {
    "text": "对于IO活动和核间线程迁移而导致的cache不一致，可以分别通过禁止IO通道与处理机共享cache以及禁止核间线程迁移来解决",
    "id": 3571,
    "label": [
      {
        "start": 17,
        "end": 22,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 39,
        "end": 42,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 44,
        "end": 49,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 9,
        "end": 11,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 55,
        "end": 57,
        "text": "线程",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5004,
    "created_at": "2024-08-01T09:32:56.080989Z",
    "updated_at": "2024-08-01T09:32:56.080989Z",
    "lead_time": 0.074
  },
  {
    "text": "因而多处理机中cache一致性问题主要是针对可写数据的共享",
    "id": 3572,
    "label": [
      {
        "start": 7,
        "end": 15,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 2,
        "end": 6,
        "text": "多处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5005,
    "created_at": "2024-08-01T09:32:57.013004Z",
    "updated_at": "2024-08-01T09:32:57.013004Z",
    "lead_time": 0.063
  },
  {
    "text": "在多核系统中，cache一致性可以使用软件或者硬件维护",
    "id": 3573,
    "label": [
      {
        "start": 19,
        "end": 21,
        "text": "软件",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 7,
        "end": 15,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 1,
        "end": 5,
        "text": "多核系统",
        "labels": [
          "ARCH"
        ]
      },
      {
        "start": 23,
        "end": 25,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5006,
    "created_at": "2024-08-01T09:32:57.927060Z",
    "updated_at": "2024-08-01T09:32:57.927060Z",
    "lead_time": 0.082
  },
  {
    "text": "软件方法采取的手段是“预防”",
    "id": 3574,
    "label": [
      {
        "start": 0,
        "end": 2,
        "text": "软件",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5007,
    "created_at": "2024-08-01T09:32:58.967634Z",
    "updated_at": "2024-08-01T09:32:58.968620Z",
    "lead_time": 0.063
  },
  {
    "text": "在使用软件方式维护cache一致性时，处理机需要提供专门的显式cache操作指令，如cache块拷贝、回收和无效等指令，让程序员或编译器分析源程序的逻辑结构和数据相关性，判断可能出现的cache一致性问题，利用这些指令维护cache一致性",
    "id": 3575,
    "label": [
      {
        "start": 9,
        "end": 17,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 79,
        "end": 83,
        "text": "数据相关",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 19,
        "end": 22,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 65,
        "end": 68,
        "text": "编译器",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 70,
        "end": 73,
        "text": "源程序",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 3,
        "end": 5,
        "text": "软件",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 38,
        "end": 40,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 31,
        "end": 36,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 42,
        "end": 47,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 92,
        "end": 100,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 57,
        "end": 59,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 111,
        "end": 119,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 107,
        "end": 109,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 61,
        "end": 63,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5008,
    "created_at": "2024-08-01T09:32:59.877574Z",
    "updated_at": "2024-08-01T09:32:59.877574Z",
    "lead_time": 0.101
  },
  {
    "text": "软件维护cache一致性的优点是硬件开销小，缺点是在多数情况下对性能有较大影响，而且需要程序员的介入",
    "id": 3576,
    "label": [
      {
        "start": 4,
        "end": 12,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 0,
        "end": 2,
        "text": "软件",
        "labels": [
          "PROG"
        ]
      },
      {
        "start": 16,
        "end": 18,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 44,
        "end": 46,
        "text": "程序",
        "labels": [
          "PROG"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5009,
    "created_at": "2024-08-01T09:33:01.030797Z",
    "updated_at": "2024-08-01T09:33:01.030797Z",
    "lead_time": 0.094
  },
  {
    "text": "多数情况下，cache一致性由硬件维护",
    "id": 3577,
    "label": [
      {
        "start": 6,
        "end": 14,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 15,
        "end": 17,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5010,
    "created_at": "2024-08-01T09:33:01.922815Z",
    "updated_at": "2024-08-01T09:33:01.922815Z",
    "lead_time": 0.067
  },
  {
    "text": "硬件方法采取的手段是“通过硬件发现和解决所发生的cache一致性问题”",
    "id": 3578,
    "label": [
      {
        "start": 0,
        "end": 2,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 24,
        "end": 32,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "硬件",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5011,
    "created_at": "2024-08-01T09:33:02.847610Z",
    "updated_at": "2024-08-01T09:33:02.847610Z",
    "lead_time": 0.095
  },
  {
    "text": "不同的处理机系统使用不同的cache一致性协议维护cache一致性",
    "id": 3579,
    "label": [
      {
        "start": 13,
        "end": 21,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 25,
        "end": 33,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 3,
        "end": 6,
        "text": "处理机",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5012,
    "created_at": "2024-08-01T09:33:03.857186Z",
    "updated_at": "2024-08-01T09:33:03.857186Z",
    "lead_time": 0.073
  },
  {
    "text": "cache一致性协议维护一个有限状态机，并根据存储器读写指令或者总线上的操作进行状态转移并完成相应cache块的操作，以维护cache一致性",
    "id": 3580,
    "label": [
      {
        "start": 0,
        "end": 8,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 23,
        "end": 27,
        "text": "存储器读",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 32,
        "end": 34,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 28,
        "end": 30,
        "text": "指令",
        "labels": [
          "INST"
        ]
      },
      {
        "start": 49,
        "end": 54,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 62,
        "end": 70,
        "text": "cache一致性",
        "labels": [
          "TECH"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5013,
    "created_at": "2024-08-01T09:33:05.685367Z",
    "updated_at": "2024-08-01T09:33:05.685367Z",
    "lead_time": 1.013
  },
  {
    "text": "目前，大多数多核处理机采用总线侦听bussnooping协议，也有的系统采用目录directory协议解决多级cache的一致性问题",
    "id": 3581,
    "label": [
      {
        "start": 6,
        "end": 11,
        "text": "多核处理机",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 55,
        "end": 60,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 13,
        "end": 15,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5014,
    "created_at": "2024-08-01T09:33:06.695808Z",
    "updated_at": "2024-08-01T09:33:06.695808Z",
    "lead_time": 0.063
  },
  {
    "text": "目录协议在全局的角度统一监管不同cache的状态；而在总线侦听方式中，每个cache分别管理自身cache块的状态，并通过广播进行不同cache间的状态同步",
    "id": 3582,
    "label": [
      {
        "start": 0,
        "end": 4,
        "text": "目录协议",
        "labels": [
          "PROT"
        ]
      },
      {
        "start": 16,
        "end": 21,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 76,
        "end": 78,
        "text": "同步",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 27,
        "end": 29,
        "text": "总线",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 61,
        "end": 63,
        "text": "广播",
        "labels": [
          "PROT"
        ]
      },
      {
        "start": 37,
        "end": 42,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 48,
        "end": 53,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 67,
        "end": 72,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5015,
    "created_at": "2024-08-01T09:33:07.785793Z",
    "updated_at": "2024-08-01T09:33:07.785793Z",
    "lead_time": 0.147
  },
  {
    "text": "目录协议目录协议收集并维护有关数据块副本驻存在何处的信息",
    "id": 3583,
    "label": [
      {
        "start": 0,
        "end": 4,
        "text": "目录协议",
        "labels": [
          "PROT"
        ]
      },
      {
        "start": 4,
        "end": 8,
        "text": "目录协议",
        "labels": [
          "PROT"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5016,
    "created_at": "2024-08-01T09:33:08.794354Z",
    "updated_at": "2024-08-01T09:33:08.794354Z",
    "lead_time": 0.062
  },
  {
    "text": "典型地，系统有一中央控制器，它是主存控制器的一部分，目录就存于主存中",
    "id": 3584,
    "label": [
      {
        "start": 8,
        "end": 13,
        "text": "中央控制器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 16,
        "end": 21,
        "text": "主存控制器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 31,
        "end": 33,
        "text": "主存",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5017,
    "created_at": "2024-08-01T09:33:09.812088Z",
    "updated_at": "2024-08-01T09:33:09.812088Z",
    "lead_time": 0.074
  },
  {
    "text": "目录会有关于各个局部cache内容的全局性状态信息",
    "id": 3585,
    "label": [
      {
        "start": 10,
        "end": 15,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5018,
    "created_at": "2024-08-01T09:33:10.933038Z",
    "updated_at": "2024-08-01T09:33:10.933038Z",
    "lead_time": 0.065
  },
  {
    "text": "当某个特定的cache控制器产生一个请求时，中央控制器检查此请求并发出必要的命令，以在存储器和cache之间或不同cache之间传送数据",
    "id": 3586,
    "label": [
      {
        "start": 6,
        "end": 14,
        "text": "cache控制器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 22,
        "end": 27,
        "text": "中央控制器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 43,
        "end": 46,
        "text": "存储器",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 32,
        "end": 34,
        "text": "并发",
        "labels": [
          "TECH"
        ]
      },
      {
        "start": 47,
        "end": 52,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 57,
        "end": 62,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5019,
    "created_at": "2024-08-01T09:33:11.875592Z",
    "updated_at": "2024-08-01T09:33:11.875592Z",
    "lead_time": 0.09
  },
  {
    "text": "中央控制器亦负责保持状态信息的更新",
    "id": 3587,
    "label": [
      {
        "start": 0,
        "end": 5,
        "text": "中央控制器",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5020,
    "created_at": "2024-08-01T09:33:13.048949Z",
    "updated_at": "2024-08-01T09:33:13.048949Z",
    "lead_time": 0.074
  },
  {
    "text": "于是，任何一个能影响cache行的全局状态的局部动作必须报告给中央控制器",
    "id": 3588,
    "label": [
      {
        "start": 31,
        "end": 36,
        "text": "中央控制器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 10,
        "end": 16,
        "text": "cache行",
        "labels": [
          "STOR"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5021,
    "created_at": "2024-08-01T09:33:14.048624Z",
    "updated_at": "2024-08-01T09:33:14.048624Z",
    "lead_time": 0.07
  },
  {
    "text": "中央控制器维护着关于哪个处理机核具有哪个数据行副本的信息",
    "id": 3589,
    "label": [
      {
        "start": 0,
        "end": 5,
        "text": "中央控制器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 12,
        "end": 16,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5022,
    "created_at": "2024-08-01T09:33:15.215682Z",
    "updated_at": "2024-08-01T09:33:15.215682Z",
    "lead_time": 0.095
  },
  {
    "text": "在处理机核向局部cache行副本写入信息之前，必须向中央控制器请求排他性访问权限",
    "id": 3590,
    "label": [
      {
        "start": 8,
        "end": 14,
        "text": "cache行",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 26,
        "end": 31,
        "text": "中央控制器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 1,
        "end": 5,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5023,
    "created_at": "2024-08-01T09:33:16.174952Z",
    "updated_at": "2024-08-01T09:33:16.174952Z",
    "lead_time": 0.067
  },
  {
    "text": "在同意这次排他性访问之前，控制器发送一个消息给所有cache中保持有这一行副本的处理机核，以强迫每个处理机核使它的副本无效",
    "id": 3591,
    "label": [
      {
        "start": 25,
        "end": 30,
        "text": "cache",
        "labels": [
          "STOR"
        ]
      },
      {
        "start": 40,
        "end": 44,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 13,
        "end": 16,
        "text": "控制器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 50,
        "end": 54,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5024,
    "created_at": "2024-08-01T09:33:17.138951Z",
    "updated_at": "2024-08-01T09:33:17.138951Z",
    "lead_time": 0.077
  },
  {
    "text": "接收到这些处理机核返回的确认信息后，控制器才将排他性访问权授予提出请求的处理机核",
    "id": 3592,
    "label": [
      {
        "start": 5,
        "end": 9,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 18,
        "end": 21,
        "text": "控制器",
        "labels": [
          "COMP"
        ]
      },
      {
        "start": 36,
        "end": 40,
        "text": "处理机核",
        "labels": [
          "COMP"
        ]
      }
    ],
    "annotator": 1,
    "annotation_id": 5025,
    "created_at": "2024-08-01T09:33:18.408861Z",
    "updated_at": "2024-08-01T09:33:23.700808Z",
    "lead_time": 4.32
  }
]